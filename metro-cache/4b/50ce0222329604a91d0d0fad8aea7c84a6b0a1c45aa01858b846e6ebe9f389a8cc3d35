{"dependencies":[{"name":"react-native","data":{"isAsync":false}},{"name":"./AudioAvailability","data":{"isAsync":false}},{"name":"../AV","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Sound = void 0;\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[0], \"react-native\");\n\n  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[1], \"./AudioAvailability\");\n\n  var _AV = _$$_REQUIRE(_dependencyMap[2], \"../AV\");\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var Sound = function () {\n    function Sound() {\n      var _this = this;\n\n      _classCallCheck(this, Sound);\n\n      this._loaded = false;\n      this._loading = false;\n      this._key = -1;\n      this._lastStatusUpdate = null;\n      this._lastStatusUpdateTime = null;\n      this._subscriptions = [];\n      this._eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentAV);\n      this._coalesceStatusUpdatesInMillis = 100;\n      this._onPlaybackStatusUpdate = null;\n\n      this._internalStatusUpdateCallback = function (_ref) {\n        var key = _ref.key,\n            status = _ref.status;\n\n        if (_this._key === key) {\n          _this._callOnPlaybackStatusUpdateForNewStatus(status);\n        }\n      };\n\n      this._errorCallback = function (error) {\n        _this._clearSubscriptions();\n\n        _this._loaded = false;\n        _this._key = -1;\n\n        _this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));\n      };\n\n      this.getStatusAsync = function _callee() {\n        var status;\n        return regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this._loaded) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                  return _reactNative.NativeModules.ExponentAV.getStatusForSound(_this._key);\n                }));\n\n              case 2:\n                status = (0, _AV.getUnloadedStatus)();\n\n                _this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                return _context.abrupt(\"return\", status);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      };\n    }\n\n    _createClass(Sound, [{\n      key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n      value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n          this._onPlaybackStatusUpdate(status);\n\n          this._lastStatusUpdateTime = new Date();\n          this._lastStatusUpdate = JSON.stringify(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function _performOperationAndHandleStatusAsync(operation) {\n        var status;\n        return regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                (0, _AudioAvailability.throwIfAudioIsDisabled)();\n\n                if (!this._loaded) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 4;\n                return regeneratorRuntime.awrap(operation());\n\n              case 4:\n                status = _context2.sent;\n\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                return _context2.abrupt(\"return\", status);\n\n              case 9:\n                throw new Error('Cannot complete operation because sound is not loaded.');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"_subscribeToNativeStatusUpdateEvents\",\n      value: function _subscribeToNativeStatusUpdateEvents() {\n        if (this._loaded) {\n          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n        }\n      }\n    }, {\n      key: \"_clearSubscriptions\",\n      value: function _clearSubscriptions() {\n        this._subscriptions.forEach(function (e) {\n          return e.remove();\n        });\n\n        this._subscriptions = [];\n      }\n    }, {\n      key: \"setOnPlaybackStatusUpdate\",\n      value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n      }\n    }, {\n      key: \"loadAsync\",\n      value: function loadAsync(source) {\n        var _this2 = this;\n\n        var initialStatus,\n            downloadFirst,\n            _ref2,\n            nativeSource,\n            fullInitialStatus,\n            _args3 = arguments;\n\n        return regeneratorRuntime.async(function loadAsync$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n                (0, _AudioAvailability.throwIfAudioIsDisabled)();\n\n                if (!this._loading) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('The Sound is already loading.');\n\n              case 5:\n                if (this._loaded) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                this._loading = true;\n                _context3.next = 9;\n                return regeneratorRuntime.awrap((0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));\n\n              case 9:\n                _ref2 = _context3.sent;\n                nativeSource = _ref2.nativeSource;\n                fullInitialStatus = _ref2.fullInitialStatus;\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var loadSuccess = function loadSuccess(key, status) {\n                    _this2._key = key;\n                    _this2._loaded = true;\n                    _this2._loading = false;\n\n                    _reactNative.NativeModules.ExponentAV.setErrorCallbackForSound(_this2._key, _this2._errorCallback);\n\n                    _this2._subscribeToNativeStatusUpdateEvents();\n\n                    _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                    resolve(status);\n                  };\n\n                  var loadError = function loadError(error) {\n                    _this2._loading = false;\n                    reject(new Error(error));\n                  };\n\n                  _reactNative.NativeModules.ExponentAV.loadForSound(nativeSource, fullInitialStatus, loadSuccess, loadError);\n                }));\n\n              case 15:\n                throw new Error('The Sound is already loaded.');\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"unloadAsync\",\n      value: function unloadAsync() {\n        var key, status;\n        return regeneratorRuntime.async(function unloadAsync$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._loaded) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                this._loaded = false;\n                key = this._key;\n                this._key = -1;\n                _context4.next = 6;\n                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.unloadForSound(key));\n\n              case 6:\n                status = _context4.sent;\n\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                this._clearSubscriptions();\n\n                return _context4.abrupt(\"return\", status);\n\n              case 12:\n                return _context4.abrupt(\"return\", this.getStatusAsync());\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"setStatusAsync\",\n      value: function setStatusAsync(status) {\n        var _this3 = this;\n\n        return regeneratorRuntime.async(function setStatusAsync$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                (0, _AV.assertStatusValuesInBounds)(status);\n                return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                  return _reactNative.NativeModules.ExponentAV.setStatusForSound(_this3._key, status);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"replayAsync\",\n      value: function replayAsync() {\n        var _this4 = this;\n\n        var status,\n            _args6 = arguments;\n        return regeneratorRuntime.async(function replayAsync$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n\n                if (!(status.positionMillis && status.positionMillis !== 0)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('Requested position after replay has to be 0.');\n\n              case 3:\n                return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                  return _reactNative.NativeModules.ExponentAV.replaySound(_this4._key, _objectSpread({}, status, {\n                    positionMillis: 0,\n                    shouldPlay: true\n                  }));\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, this);\n      }\n    }]);\n\n    return Sound;\n  }();\n\n  exports.Sound = Sound;\n\n  Sound.create = function _callee2(source) {\n    var initialStatus,\n        onPlaybackStatusUpdate,\n        downloadFirst,\n        _args7 = arguments;\n    return regeneratorRuntime.async(function _callee2$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n            onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n            downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n            console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n            return _context7.abrupt(\"return\", Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  Sound.createAsync = function _callee3(source) {\n    var initialStatus,\n        onPlaybackStatusUpdate,\n        downloadFirst,\n        sound,\n        status,\n        _args8 = arguments;\n    return regeneratorRuntime.async(function _callee3$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n            onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n            downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n            sound = new Sound();\n            sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n            _context8.next = 7;\n            return regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));\n\n          case 7:\n            status = _context8.sent;\n            return _context8.abrupt(\"return\", {\n              sound: sound,\n              status: status\n            });\n\n          case 9:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  _extends(Sound.prototype, _AV.PlaybackMixin);\n});","map":[[7,0,1,0],[9,0,2,0],[11,0,3,0],[25,6,4,13,"Sound"],[25,11],[26,0,5,4],[26,21,5,18],[27,0,5,18],[29,0,5,18],[31,0,6,8],[31,11,6,13,"_loaded"],[31,18,6,8],[31,21,6,23],[31,26,6,8],[32,0,7,8],[32,11,7,13,"_loading"],[32,19,7,8],[32,22,7,24],[32,27,7,8],[33,0,8,8],[33,11,8,13,"_key"],[33,15,8,8],[33,18,8,20],[33,19,8,21],[33,20,8,8],[34,0,9,8],[34,11,9,13,"_lastStatusUpdate"],[34,28,9,8],[34,31,9,33],[34,35,9,8],[35,0,10,8],[35,11,10,13,"_lastStatusUpdateTime"],[35,32,10,8],[35,35,10,37],[35,39,10,8],[36,0,11,8],[36,11,11,13,"_subscriptions"],[36,25,11,8],[36,28,11,30],[36,30,11,8],[37,0,12,8],[37,11,12,13,"_eventEmitter"],[37,24,12,8],[37,27,12,29],[37,31,12,33,"NativeEventEmitter"],[37,62,12,29],[37,63,12,52,"NativeModules"],[37,90,12,66,"ExponentAV"],[37,100,12,29],[37,101,12,8],[38,0,13,8],[38,11,13,13,"_coalesceStatusUpdatesInMillis"],[38,41,13,8],[38,44,13,46],[38,47,13,8],[39,0,14,8],[39,11,14,13,"_onPlaybackStatusUpdate"],[39,34,14,8],[39,37,14,39],[39,41,14,8],[41,0,15,8],[41,11,15,13,"_internalStatusUpdateCallback"],[41,40,15,8],[41,43,15,45],[41,59,15,66],[42,0,15,66],[42,12,15,48,"key"],[42,15,15,66],[42,23,15,48,"key"],[42,26,15,66],[43,0,15,66],[43,12,15,53,"status"],[43,18,15,66],[43,26,15,53,"status"],[43,32,15,66],[45,0,16,12],[45,12,16,16],[45,17,16,20],[45,18,16,21,"_key"],[45,22,16,16],[45,27,16,30,"key"],[45,30,16,12],[45,32,16,35],[46,0,17,16],[46,10,17,16],[46,15,17,20],[46,16,17,21,"_callOnPlaybackStatusUpdateForNewStatus"],[46,55,17,16],[46,56,17,61,"status"],[46,62,17,16],[47,0,18,13],[48,0,19,9],[48,7,15,8],[50,0,20,8],[50,11,20,13,"_errorCallback"],[50,25,20,8],[50,28,20,30],[50,38,20,31,"error"],[50,43,20,30],[50,45,20,41],[51,0,21,12],[51,8,21,12],[51,13,21,16],[51,14,21,17,"_clearSubscriptions"],[51,33,21,12],[53,0,22,12],[53,8,22,12],[53,13,22,16],[53,14,22,17,"_loaded"],[53,21,22,12],[53,24,22,27],[53,29,22,12],[54,0,23,12],[54,8,23,12],[54,13,23,16],[54,14,23,17,"_key"],[54,18,23,12],[54,21,23,24],[54,22,23,25],[54,23,23,12],[56,0,24,12],[56,8,24,12],[56,13,24,16],[56,14,24,17,"_callOnPlaybackStatusUpdateForNewStatus"],[56,53,24,12],[56,54,24,57],[56,81,24,75,"error"],[56,86,24,57],[56,87,24,12],[57,0,25,9],[57,7,20,8],[59,0,29,8],[59,11,29,13,"getStatusAsync"],[59,25,29,8],[59,28,29,30],[60,0,29,30],[61,0,29,30],[62,0,29,30],[63,0,29,30],[64,0,29,30],[65,0,29,30],[65,21,30,16],[65,26,30,20],[65,27,30,21,"_loaded"],[65,34,29,30],[66,0,29,30],[67,0,29,30],[68,0,29,30],[70,0,29,30],[70,49,31,23],[70,54,31,27],[70,55,31,28,"_performOperationAndHandleStatusAsync"],[70,92,31,23],[70,93,31,66],[71,0,31,66],[71,25,31,72,"NativeModules"],[71,52,31,86,"ExponentAV"],[71,62,31,72],[71,63,31,97,"getStatusForSound"],[71,80,31,72],[71,81,31,115],[71,86,31,119],[71,87,31,120,"_key"],[71,91,31,72],[71,92,31,66],[72,0,31,66],[72,17,31,23],[72,18,29,30],[74,0,29,30],[75,0,33,18,"status"],[75,16,33,18,"status"],[75,22,29,30],[75,25,33,27],[75,53,29,30],[77,0,34,12],[77,16,34,12],[77,21,34,16],[77,22,34,17,"_callOnPlaybackStatusUpdateForNewStatus"],[77,61,34,12],[77,62,34,57,"status"],[77,68,34,12],[79,0,29,30],[79,49,35,19,"status"],[79,55,29,30],[81,0,29,30],[82,0,29,30],[83,0,29,30],[84,0,29,30],[85,0,29,30],[86,0,29,30],[87,0,29,30],[87,7,29,8],[88,0,37,5],[92,62,39,44,"status"],[92,68],[92,70,39,52],[93,0,40,8],[93,12,40,14,"shouldDismissBasedOnCoalescing"],[93,42,40,44],[93,45,40,47],[93,50,40,52,"_lastStatusUpdateTime"],[93,71,40,47],[93,75,41,12,"JSON"],[93,79,41,16],[93,80,41,17,"stringify"],[93,89,41,12],[93,90,41,27,"status"],[93,96,41,12],[93,102,41,39],[93,107,41,44,"_lastStatusUpdate"],[93,124,40,47],[93,128,42,12,"Date"],[93,132,42,16],[93,133,42,17,"now"],[93,136,42,12],[93,141,42,25],[93,146,42,30,"_lastStatusUpdateTime"],[93,167,42,25],[93,168,42,52,"getTime"],[93,175,42,25],[93,177,42,12],[93,180,42,64],[93,185,42,69,"_coalesceStatusUpdatesInMillis"],[93,215,40,8],[95,0,43,8],[95,12,43,12],[95,17,43,17,"_onPlaybackStatusUpdate"],[95,40,43,12],[95,44,43,44],[95,48,43,12],[95,52,43,52],[95,53,43,53,"shouldDismissBasedOnCoalescing"],[95,83,43,8],[95,85,43,85],[96,0,44,12],[96,15,44,17,"_onPlaybackStatusUpdate"],[96,38,44,12],[96,39,44,41,"status"],[96,45,44,12],[98,0,45,12],[98,15,45,17,"_lastStatusUpdateTime"],[98,36,45,12],[98,39,45,41],[98,43,45,45,"Date"],[98,47,45,41],[98,49,45,12],[99,0,46,12],[99,15,46,17,"_lastStatusUpdate"],[99,32,46,12],[99,35,46,37,"JSON"],[99,39,46,41],[99,40,46,42,"stringify"],[99,49,46,37],[99,50,46,52,"status"],[99,56,46,37],[99,57,46,12],[100,0,47,9],[101,0,48,5],[104,60,49,48,"operation"],[104,69],[110,0,50,8],[112,21,51,12],[112,26,51,17,"_loaded"],[112,33],[118,48,52,33,"operation"],[118,57,52,42],[118,59],[121,0,52,18,"status"],[121,16,52,18,"status"],[121,22],[123,0,53,12],[123,21,53,17,"_callOnPlaybackStatusUpdateForNewStatus"],[123,60,53,12],[123,61,53,57,"status"],[123,67,53,12],[125,50,54,19,"status"],[125,56],[128,22,57,18],[128,26,57,22,"Error"],[128,31,57,18],[128,32,57,28],[128,88,57,18],[128,89],[139,61,61,43],[140,0,62,8],[140,12,62,12],[140,17,62,17,"_loaded"],[140,24,62,8],[140,26,62,26],[141,0,63,12],[141,15,63,17,"_subscriptions"],[141,29,63,12],[141,30,63,32,"push"],[141,34,63,12],[141,35,63,37],[141,40,63,42,"_eventEmitter"],[141,53,63,37],[141,54,63,56,"addListener"],[141,65,63,37],[141,66,63,68],[141,91,63,37],[141,93,63,95],[141,98,63,100,"_internalStatusUpdateCallback"],[141,127,63,37],[141,128,63,12],[142,0,64,9],[143,0,65,5],[146,44,66,26],[147,0,67,8],[147,13,67,13,"_subscriptions"],[147,27,67,8],[147,28,67,28,"forEach"],[147,35,67,8],[147,36,67,36],[147,46,67,36,"e"],[147,47,67,37],[148,0,67,37],[148,17,67,41,"e"],[148,18,67,42],[148,19,67,43,"remove"],[148,25,67,41],[148,27,67,37],[149,0,67,37],[149,9,67,8],[151,0,68,8],[151,13,68,13,"_subscriptions"],[151,27,68,8],[151,30,68,30],[151,32,68,8],[152,0,69,5],[155,48,70,30,"onPlaybackStatusUpdate"],[155,70],[155,72,70,54],[156,0,71,8],[156,13,71,13,"_onPlaybackStatusUpdate"],[156,36,71,8],[156,39,71,39,"onPlaybackStatusUpdate"],[156,61,71,8],[157,0,72,8],[157,13,72,13,"getStatusAsync"],[157,27,72,8],[158,0,73,5],[161,32,75,20,"source"],[161,38],[175,0,75,28,"initialStatus"],[175,16,75,28,"initialStatus"],[175,29],[175,91,75,44],[175,93],[176,0,75,48,"downloadFirst"],[176,16,75,48,"downloadFirst"],[176,29],[176,91,75,64],[176,95],[177,0,76,8],[179,21,77,12],[179,26,77,17,"_loading"],[179,34],[184,22,78,18],[184,26,78,22,"Error"],[184,31,78,18],[184,32,78,28],[184,63,78,18],[184,64],[187,20,80,13],[187,25,80,18,"_loaded"],[187,32],[192,0,81,12],[192,21,81,17,"_loading"],[192,29,81,12],[192,32,81,28],[192,36,81,12],[194,48,82,63],[194,105,82,111,"source"],[194,111,82,63],[194,113,82,119,"initialStatus"],[194,126,82,63],[194,128,82,134,"downloadFirst"],[194,141,82,63],[194,142],[198,0,82,20,"nativeSource"],[198,16,82,20,"nativeSource"],[198,28],[198,37,82,20,"nativeSource"],[198,49],[199,0,82,34,"fullInitialStatus"],[199,16,82,34,"fullInitialStatus"],[199,33],[199,42,82,34,"fullInitialStatus"],[199,59],[200,50,84,19],[200,54,84,23,"Promise"],[200,61,84,19],[200,62,84,31],[200,72,84,32,"resolve"],[200,79,84,31],[200,81,84,41,"reject"],[200,87,84,31],[200,89,84,52],[201,0,85,16],[201,22,85,22,"loadSuccess"],[201,33,85,33],[201,36,85,36],[201,45,85,22,"loadSuccess"],[201,56,85,36],[201,57,85,37,"key"],[201,60,85,36],[201,62,85,42,"status"],[201,68,85,36],[201,70,85,53],[202,0,86,20],[202,20,86,20],[202,26,86,24],[202,27,86,25,"_key"],[202,31,86,20],[202,34,86,32,"key"],[202,37,86,20],[203,0,87,20],[203,20,87,20],[203,26,87,24],[203,27,87,25,"_loaded"],[203,34,87,20],[203,37,87,35],[203,41,87,20],[204,0,88,20],[204,20,88,20],[204,26,88,24],[204,27,88,25,"_loading"],[204,35,88,20],[204,38,88,36],[204,43,88,20],[206,0,89,20,"NativeModules"],[206,47,89,34,"ExponentAV"],[206,57,89,20],[206,58,89,45,"setErrorCallbackForSound"],[206,82,89,20],[206,83,89,70],[206,89,89,74],[206,90,89,75,"_key"],[206,94,89,20],[206,96,89,81],[206,102,89,85],[206,103,89,86,"_errorCallback"],[206,117,89,20],[208,0,90,20],[208,20,90,20],[208,26,90,24],[208,27,90,25,"_subscribeToNativeStatusUpdateEvents"],[208,63,90,20],[210,0,91,20],[210,20,91,20],[210,26,91,24],[210,27,91,25,"_callOnPlaybackStatusUpdateForNewStatus"],[210,66,91,20],[210,67,91,65,"status"],[210,73,91,20],[212,0,92,20,"resolve"],[212,20,92,20,"resolve"],[212,27,92,27],[212,28,92,28,"status"],[212,34,92,27],[212,35,92,20],[213,0,93,17],[213,19,85,16],[215,0,94,16],[215,22,94,22,"loadError"],[215,31,94,31],[215,34,94,34],[215,43,94,22,"loadError"],[215,52,94,34],[215,53,94,35,"error"],[215,58,94,34],[215,60,94,45],[216,0,95,20],[216,20,95,20],[216,26,95,24],[216,27,95,25,"_loading"],[216,35,95,20],[216,38,95,36],[216,43,95,20],[217,0,96,20,"reject"],[217,20,96,20,"reject"],[217,26,96,26],[217,27,96,27],[217,31,96,31,"Error"],[217,36,96,27],[217,37,96,37,"error"],[217,42,96,27],[217,43,96,26],[217,44,96,20],[218,0,97,17],[218,19,94,16],[220,0,98,16,"NativeModules"],[220,45,98,30,"ExponentAV"],[220,55,98,16],[220,56,98,41,"loadForSound"],[220,68,98,16],[220,69,98,54,"nativeSource"],[220,81,98,16],[220,83,98,68,"fullInitialStatus"],[220,100,98,16],[220,102,98,87,"loadSuccess"],[220,113,98,16],[220,115,98,100,"loadError"],[220,124,98,16],[221,0,99,13],[221,17,84,19],[221,18],[224,22,102,18],[224,26,102,22,"Error"],[224,31,102,18],[224,32,102,28],[224,62,102,18],[224,63],[241,21,106,12],[241,26,106,17,"_loaded"],[241,33],[246,0,107,12],[246,21,107,17,"_loaded"],[246,28,107,12],[246,31,107,27],[246,36,107,12],[247,0,108,18,"key"],[247,16,108,18,"key"],[247,19],[247,22,108,24],[247,27,108,29,"_key"],[247,31],[248,0,109,12],[248,21,109,17,"_key"],[248,25,109,12],[248,28,109,24],[248,29,109,25],[248,30,109,12],[250,48,110,33,"NativeModules"],[250,75,110,47,"ExponentAV"],[250,85,110,33],[250,86,110,58,"unloadForSound"],[250,100,110,33],[250,101,110,73,"key"],[250,104,110,33],[250,105],[253,0,110,18,"status"],[253,16,110,18,"status"],[253,22],[255,0,111,12],[255,21,111,17,"_callOnPlaybackStatusUpdateForNewStatus"],[255,60,111,12],[255,61,111,57,"status"],[255,67,111,12],[257,0,112,12],[257,21,112,17,"_clearSubscriptions"],[257,40,112,12],[259,50,113,19,"status"],[259,56],[262,50,116,19],[262,55,116,24,"getStatusAsync"],[262,69,116,19],[262,71],[273,37,120,25,"status"],[273,43],[280,0,121,8],[280,52,121,35,"status"],[280,58,121,8],[281,50,122,15],[281,55,122,20,"_performOperationAndHandleStatusAsync"],[281,92,122,15],[281,93,122,58],[282,0,122,58],[282,25,122,64,"NativeModules"],[282,52,122,78,"ExponentAV"],[282,62,122,64],[282,63,122,89,"setStatusForSound"],[282,80,122,64],[282,81,122,107],[282,87,122,111],[282,88,122,112,"_key"],[282,92,122,64],[282,94,122,118,"status"],[282,100,122,64],[282,101,122,58],[283,0,122,58],[283,17,122,15],[283,18],[303,0,124,22,"status"],[303,16,124,22,"status"],[303,22],[303,84,124,31],[303,86],[305,22,125,12,"status"],[305,28,125,18],[305,29,125,19,"positionMillis"],[305,43,125,12],[305,47,125,37,"status"],[305,53,125,43],[305,54,125,44,"positionMillis"],[305,68,125,37],[305,73,125,63],[305,74],[310,22,126,18],[310,26,126,22,"Error"],[310,31,126,18],[310,32,126,28],[310,78,126,18],[310,79],[313,50,128,15],[313,55,128,20,"_performOperationAndHandleStatusAsync"],[313,92,128,15],[313,93,128,58],[314,0,128,58],[314,25,128,64,"NativeModules"],[314,52,128,78,"ExponentAV"],[314,62,128,64],[314,63,128,89,"replaySound"],[314,74,128,64],[314,75,128,101],[314,81,128,105],[314,82,128,106,"_key"],[314,86,128,64],[314,106,129,15,"status"],[314,112,128,64],[315,0,130,12,"positionMillis"],[315,20,130,12,"positionMillis"],[315,34,130,26],[315,36,130,28],[315,37,128,64],[316,0,131,12,"shouldPlay"],[316,20,131,12,"shouldPlay"],[316,30,131,22],[316,32,131,24],[317,0,128,64],[317,21,128,58],[318,0,128,58],[318,17,128,15],[318,18],[334,0,135,0,"Sound"],[334,2,135,0,"Sound"],[334,7,135,5],[334,8,135,6,"create"],[334,14,135,0],[334,17,135,15],[334,35,135,22,"source"],[334,41,135,15],[335,0,135,15],[336,0,135,15],[337,0,135,15],[338,0,135,15],[339,0,135,15],[340,0,135,15],[341,0,135,15],[342,0,135,15],[343,0,135,30,"initialStatus"],[343,12,135,30,"initialStatus"],[343,25,135,15],[343,87,135,46],[343,89,135,15],[344,0,135,50,"onPlaybackStatusUpdate"],[344,12,135,50,"onPlaybackStatusUpdate"],[344,34,135,15],[344,96,135,75],[344,100,135,15],[345,0,135,81,"downloadFirst"],[345,12,135,81,"downloadFirst"],[345,25,135,15],[345,87,135,97],[345,91,135,15],[346,0,136,4,"console"],[346,12,136,4,"console"],[346,19,136,11],[346,20,136,12,"warn"],[346,24,136,4],[347,0,135,15],[347,46,137,11,"Sound"],[347,51,137,16],[347,52,137,17,"createAsync"],[347,63,137,11],[347,64,137,29,"source"],[347,70,137,11],[347,72,137,37,"initialStatus"],[347,85,137,11],[347,87,137,52,"onPlaybackStatusUpdate"],[347,109,137,11],[347,111,137,76,"downloadFirst"],[347,124,137,11],[347,125,135,15],[349,0,135,15],[350,0,135,15],[351,0,135,15],[352,0,135,15],[353,0,135,15],[354,0,135,15],[355,0,135,15],[355,3,135,0],[357,0,139,0,"Sound"],[357,2,139,0,"Sound"],[357,7,139,5],[357,8,139,6,"createAsync"],[357,19,139,0],[357,22,139,20],[357,40,139,27,"source"],[357,46,139,20],[358,0,139,20],[359,0,139,20],[360,0,139,20],[361,0,139,20],[362,0,139,20],[363,0,139,20],[364,0,139,20],[365,0,139,20],[366,0,139,20],[367,0,139,20],[368,0,139,35,"initialStatus"],[368,12,139,35,"initialStatus"],[368,25,139,20],[368,87,139,51],[368,89,139,20],[369,0,139,55,"onPlaybackStatusUpdate"],[369,12,139,55,"onPlaybackStatusUpdate"],[369,34,139,20],[369,96,139,80],[369,100,139,20],[370,0,139,86,"downloadFirst"],[370,12,139,86,"downloadFirst"],[370,25,139,20],[370,87,139,102],[370,91,139,20],[371,0,140,10,"sound"],[371,12,140,10,"sound"],[371,17,139,20],[371,20,140,18],[371,24,140,22,"Sound"],[371,29,140,18],[371,31,139,20],[372,0,141,4,"sound"],[372,12,141,4,"sound"],[372,17,141,9],[372,18,141,10,"setOnPlaybackStatusUpdate"],[372,43,141,4],[372,44,141,36,"onPlaybackStatusUpdate"],[372,66,141,4],[373,0,139,20],[374,0,139,20],[374,44,142,25,"sound"],[374,49,142,30],[374,50,142,31,"loadAsync"],[374,59,142,25],[374,60,142,41,"source"],[374,66,142,25],[374,68,142,49,"initialStatus"],[374,81,142,25],[374,83,142,64,"downloadFirst"],[374,96,142,25],[374,97,139,20],[376,0,139,20],[377,0,142,10,"status"],[377,12,142,10,"status"],[377,18,139,20],[378,0,139,20],[378,46,143,11],[379,0,143,13,"sound"],[379,14,143,13,"sound"],[379,19,143,18],[379,21,143,13,"sound"],[379,26,143,11],[380,0,143,20,"status"],[380,14,143,20,"status"],[380,20,143,26],[380,22,143,20,"status"],[381,0,143,11],[381,13,139,20],[383,0,139,20],[384,0,139,20],[385,0,139,20],[386,0,139,20],[387,0,139,20],[388,0,139,20],[389,0,139,20],[389,3,139,0],[391,0,145,0],[391,11,145,14,"Sound"],[391,16,145,19],[391,17,145,20,"prototype"],[391,26,145,0],[391,28,145,31,"PlaybackMixin"],[391,45,145,0]]},"type":"js/module"}]}