{"dependencies":[{"name":"react","data":{"isAsync":false}},{"name":"./../../../../../react-transform-hmr/lib/index.js","data":{"isAsync":false}},{"name":"lodash/isEqual","data":{"isAsync":false}},{"name":"lodash/pick","data":{"isAsync":false}},{"name":"prop-types","data":{"isAsync":false}},{"name":"./react-native","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = createToolbarAndroidComponent;\n\n  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../../../../../react-transform-hmr/lib/index.js\"));\n\n  var _isEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"lodash/isEqual\"));\n\n  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"lodash/pick\"));\n\n  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"prop-types\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[5], \"./react-native\");\n\n  var _jsxFileName = \"/home/alex/Documentos/CursoReactNative/node_modules/@expo/vector-icons/vendor/react-native-vector-icons/lib/toolbar-android.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var _components = {\n    IconToolbarAndroid: {\n      displayName: \"IconToolbarAndroid\",\n      isInFunction: true\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/home/alex/Documentos/CursoReactNative/node_modules/@expo/vector-icons/vendor/react-native-vector-icons/lib/toolbar-android.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\n  var LOGO_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['logoName']);\n  var NAV_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['navIconName']);\n  var OVERFLOW_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['overflowIconName']);\n  var ACTIONS_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['actions']);\n\n  var arePropsEqual = function arePropsEqual(keys) {\n    return function (prevProps, nextProps) {\n      return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));\n    };\n  };\n\n  var areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\n  var areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\n  var areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\n  var areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\n  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n    var _class, _temp;\n\n    return _wrapComponent(\"IconToolbarAndroid\")((_temp = _class = function (_PureComponent) {\n      _inherits(IconToolbarAndroid, _PureComponent);\n\n      function IconToolbarAndroid() {\n        var _getPrototypeOf2;\n\n        var _this;\n\n        _classCallCheck(this, IconToolbarAndroid);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n        _this.state = {\n          logo: undefined,\n          navIcon: undefined,\n          overflowIcon: undefined,\n          actions: undefined\n        };\n        return _this;\n      }\n\n      _createClass(IconToolbarAndroid, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.updateLogoIconSource();\n          this.updateNavIconSource();\n          this.updateOverflowIconSource();\n          this.updateActionIconSources();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate(prevProps) {\n          if (!areLogoIconPropsEqual(prevProps, this.props)) {\n            this.updateLogoIconSource();\n          }\n\n          if (!areNavIconPropsEqual(prevProps, this.props)) {\n            this.updateNavIconSource();\n          }\n\n          if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n            this.updateOverflowIconSource();\n          }\n\n          if (!areActionPropsEqual(prevProps, this.props)) {\n            this.updateActionIconSources();\n          }\n        }\n      }, {\n        key: \"updateLogoIconSource\",\n        value: function updateLogoIconSource() {\n          var _this$props, logoName, iconSize, iconColor, titleColor, logo;\n\n          return regeneratorRuntime.async(function updateLogoIconSource$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this$props = this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;\n\n                  if (!logoName) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return regeneratorRuntime.awrap(getImageSource(logoName, iconSize, iconColor || titleColor));\n\n                case 4:\n                  logo = _context.sent;\n                  this.setState({\n                    logo: logo\n                  });\n                  _context.next = 9;\n                  break;\n\n                case 8:\n                  if (this.state.logo) {\n                    this.setState({\n                      logo: undefined\n                    });\n                  }\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, this);\n        }\n      }, {\n        key: \"updateNavIconSource\",\n        value: function updateNavIconSource() {\n          var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;\n\n          return regeneratorRuntime.async(function updateNavIconSource$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this$props2 = this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;\n\n                  if (!navIconName) {\n                    _context2.next = 8;\n                    break;\n                  }\n\n                  _context2.next = 4;\n                  return regeneratorRuntime.awrap(getImageSource(navIconName, iconSize, iconColor || titleColor));\n\n                case 4:\n                  navIcon = _context2.sent;\n                  this.setState({\n                    navIcon: navIcon\n                  });\n                  _context2.next = 9;\n                  break;\n\n                case 8:\n                  if (this.state.navIcon) {\n                    this.setState({\n                      navIcon: undefined\n                    });\n                  }\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, this);\n        }\n      }, {\n        key: \"updateOverflowIconSource\",\n        value: function updateOverflowIconSource() {\n          var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;\n\n          return regeneratorRuntime.async(function updateOverflowIconSource$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this$props3 = this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;\n\n                  if (!overflowIconName) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  _context3.next = 4;\n                  return regeneratorRuntime.awrap(getImageSource(overflowIconName, iconSize, iconColor || titleColor));\n\n                case 4:\n                  overflowIcon = _context3.sent;\n                  this.setState({\n                    overflowIcon: overflowIcon\n                  });\n                  _context3.next = 9;\n                  break;\n\n                case 8:\n                  if (this.state.overflowIcon) {\n                    this.setState({\n                      overflowIcon: undefined\n                    });\n                  }\n\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, null, this);\n        }\n      }, {\n        key: \"updateActionIconSources\",\n        value: function updateActionIconSources() {\n          var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;\n\n          return regeneratorRuntime.async(function updateActionIconSources$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _this$props4 = this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;\n                  _context4.next = 3;\n                  return regeneratorRuntime.awrap(Promise.all((actions || []).map(function (action) {\n                    if (action.iconName) {\n                      return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(function (icon) {\n                        return _objectSpread({}, action, {\n                          icon: icon\n                        });\n                      });\n                    }\n\n                    return Promise.resolve(action);\n                  })));\n\n                case 3:\n                  updatedActions = _context4.sent;\n                  this.setState({\n                    actions: updatedActions\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, null, this);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          return _react.default.createElement(_reactNative.ToolbarAndroid, _extends({}, this.props, this.state, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            }\n          }));\n        }\n      }]);\n\n      return IconToolbarAndroid;\n    }(_react.PureComponent), _class.propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: _propTypes.default.arrayOf(_propTypes.default.shape({\n        title: _propTypes.default.string.isRequired,\n        iconName: IconNamePropType,\n        iconSize: _propTypes.default.number,\n        iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n        show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']),\n        showWithText: _propTypes.default.bool\n      })),\n      iconSize: _propTypes.default.number,\n      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n      titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])\n    }, _class.defaultProps = {\n      iconSize: 24\n    }, _temp));\n  }\n});","map":[[7,0,4,0],[11,0,2,0],[13,0,3,0],[15,0,5,0],[17,0,6,0],[67,0,8,0],[67,6,8,6,"ICON_PROP_NAMES"],[67,21,8,21],[67,24,8,24],[67,25,8,25],[67,35,8,24],[67,37,8,37],[67,48,8,24],[67,50,8,50],[67,62,8,24],[67,63,8,0],[68,0,9,0],[68,6,9,6,"LOGO_ICON_PROP_NAMES"],[68,26,9,26],[68,39,9,33,"ICON_PROP_NAMES"],[68,54,9,26],[68,57,9,50],[68,67,9,26],[68,69,9,0],[69,0,10,0],[69,6,10,6,"NAV_ICON_PROP_NAMES"],[69,25,10,25],[69,38,10,32,"ICON_PROP_NAMES"],[69,53,10,25],[69,56,10,49],[69,69,10,25],[69,71,10,0],[70,0,11,0],[70,6,11,6,"OVERFLOW_ICON_PROP_NAMES"],[70,30,11,30],[70,43,11,37,"ICON_PROP_NAMES"],[70,58,11,30],[70,61,11,54],[70,79,11,30],[70,81,11,0],[71,0,12,0],[71,6,12,6,"ACTIONS_PROP_NAMES"],[71,24,12,24],[71,37,12,31,"ICON_PROP_NAMES"],[71,52,12,24],[71,55,12,48],[71,64,12,24],[71,66,12,0],[73,0,14,0],[73,6,14,6,"arePropsEqual"],[73,19,14,19],[73,22,14,22],[73,31,14,6,"arePropsEqual"],[73,44,14,22],[73,45,14,22,"keys"],[73,49,14,26],[74,0,14,26],[74,11,14,30],[74,21,14,31,"prevProps"],[74,30,14,30],[74,32,14,42,"nextProps"],[74,41,14,30],[75,0,14,30],[75,13,15,2],[75,35,15,10],[75,54,15,15,"prevProps"],[75,63,15,10],[75,65,15,26,"keys"],[75,69,15,10],[75,70,15,2],[75,72,15,33],[75,91,15,38,"nextProps"],[75,100,15,33],[75,102,15,49,"keys"],[75,106,15,33],[75,107,15,2],[75,108,14,30],[76,0,14,30],[76,5,14,26],[77,0,14,26],[77,3,14,0],[79,0,17,0],[79,6,17,6,"areLogoIconPropsEqual"],[79,27,17,27],[79,30,17,30,"arePropsEqual"],[79,43,17,43],[79,44,17,44,"LOGO_ICON_PROP_NAMES"],[79,64,17,43],[79,65,17,0],[80,0,18,0],[80,6,18,6,"areNavIconPropsEqual"],[80,26,18,26],[80,29,18,29,"arePropsEqual"],[80,42,18,42],[80,43,18,43,"NAV_ICON_PROP_NAMES"],[80,62,18,42],[80,63,18,0],[81,0,19,0],[81,6,19,6,"areOverflowIconPropsEqual"],[81,31,19,31],[81,34,19,34,"arePropsEqual"],[81,47,19,47],[81,48,19,48,"OVERFLOW_ICON_PROP_NAMES"],[81,72,19,47],[81,73,19,0],[82,0,20,0],[82,6,20,6,"areActionPropsEqual"],[82,25,20,25],[82,28,20,28,"arePropsEqual"],[82,41,20,41],[82,42,20,42,"ACTIONS_PROP_NAMES"],[82,60,20,41],[82,61,20,0],[84,0,22,15],[84,11,22,24,"createToolbarAndroidComponent"],[84,40,22,15],[84,41,23,2,"IconNamePropType"],[84,57,22,15],[84,59,24,2,"getImageSource"],[84,73,22,15],[84,75,25,2],[85,0,25,2],[87,0,26,2],[88,0,26,2],[90,0,26,2],[91,0,26,2],[93,0,26,2],[95,0,26,2],[97,0,26,2],[98,0,26,2],[99,0,26,2],[101,0,26,2],[102,0,26,2],[102,14,50,4,"state"],[102,19,26,2],[102,22,50,12],[103,0,51,6,"logo"],[103,10,51,6,"logo"],[103,14,51,10],[103,16,51,12,"undefined"],[103,25,50,12],[104,0,52,6,"navIcon"],[104,10,52,6,"navIcon"],[104,17,52,13],[104,19,52,15,"undefined"],[104,28,50,12],[105,0,53,6,"overflowIcon"],[105,10,53,6,"overflowIcon"],[105,22,53,18],[105,24,53,20,"undefined"],[105,33,50,12],[106,0,54,6,"actions"],[106,10,54,6,"actions"],[106,17,54,13],[106,19,54,15,"undefined"],[107,0,50,12],[107,9,26,2],[108,0,26,2],[109,0,26,2],[111,0,26,2],[112,0,26,2],[113,0,26,2],[113,44,57,24],[114,0,58,6],[114,15,58,11,"updateLogoIconSource"],[114,35,58,6],[115,0,59,6],[115,15,59,11,"updateNavIconSource"],[115,34,59,6],[116,0,60,6],[116,15,60,11,"updateOverflowIconSource"],[116,39,60,6],[117,0,61,6],[117,15,61,11,"updateActionIconSources"],[117,38,61,6],[118,0,62,5],[119,0,26,2],[120,0,26,2],[121,0,26,2],[121,43,64,23,"prevProps"],[121,52,26,2],[121,54,64,34],[122,0,65,6],[122,14,65,10],[122,15,65,11,"areLogoIconPropsEqual"],[122,36,65,32],[122,37,65,33,"prevProps"],[122,46,65,32],[122,48,65,44],[122,53,65,49,"props"],[122,58,65,32],[122,59,65,6],[122,61,65,57],[123,0,66,8],[123,17,66,13,"updateLogoIconSource"],[123,37,66,8],[124,0,67,7],[126,0,68,6],[126,14,68,10],[126,15,68,11,"areNavIconPropsEqual"],[126,35,68,31],[126,36,68,32,"prevProps"],[126,45,68,31],[126,47,68,43],[126,52,68,48,"props"],[126,57,68,31],[126,58,68,6],[126,60,68,56],[127,0,69,8],[127,17,69,13,"updateNavIconSource"],[127,36,69,8],[128,0,70,7],[130,0,71,6],[130,14,71,10],[130,15,71,11,"areOverflowIconPropsEqual"],[130,40,71,36],[130,41,71,37,"prevProps"],[130,50,71,36],[130,52,71,48],[130,57,71,53,"props"],[130,62,71,36],[130,63,71,6],[130,65,71,61],[131,0,72,8],[131,17,72,13,"updateOverflowIconSource"],[131,41,72,8],[132,0,73,7],[134,0,74,6],[134,14,74,10],[134,15,74,11,"areActionPropsEqual"],[134,34,74,30],[134,35,74,31,"prevProps"],[134,44,74,30],[134,46,74,42],[134,51,74,47,"props"],[134,56,74,30],[134,57,74,6],[134,59,74,55],[135,0,75,8],[135,17,75,13,"updateActionIconSources"],[135,40,75,8],[136,0,76,7],[137,0,77,5],[138,0,26,2],[139,0,26,2],[140,0,26,2],[141,0,26,2],[143,0,26,2],[144,0,26,2],[145,0,26,2],[146,0,26,2],[147,0,26,2],[147,32,80,60],[147,37,80,65,"props"],[147,42,26,2],[147,44,80,14,"logoName"],[147,52,26,2],[147,67,80,14,"logoName"],[147,75,26,2],[147,77,80,24,"iconSize"],[147,85,26,2],[147,100,80,24,"iconSize"],[147,108,26,2],[147,110,80,34,"iconColor"],[147,119,26,2],[147,134,80,34,"iconColor"],[147,143,26,2],[147,145,80,45,"titleColor"],[147,155,26,2],[147,170,80,45,"titleColor"],[147,180,26,2],[149,0,26,2],[149,23,81,10,"logoName"],[149,31,26,2],[150,0,26,2],[151,0,26,2],[152,0,26,2],[154,0,26,2],[155,0,26,2],[155,50,82,27,"getImageSource"],[155,64,82,41],[155,65,83,10,"logoName"],[155,73,82,41],[155,75,84,10,"iconSize"],[155,83,82,41],[155,85,85,10,"iconColor"],[155,94,85,19],[155,98,85,23,"titleColor"],[155,108,82,41],[155,109,26,2],[157,0,26,2],[158,0,82,14,"logo"],[158,18,82,14,"logo"],[158,22,26,2],[159,0,87,8],[159,23,87,13,"setState"],[159,31,87,8],[159,32,87,22],[160,0,87,24,"logo"],[160,20,87,24,"logo"],[160,24,87,28],[160,26,87,24,"logo"],[161,0,87,22],[161,19,87,8],[162,0,26,2],[163,0,26,2],[165,0,26,2],[166,0,89,13],[166,22,89,17],[166,27,89,22,"state"],[166,32,89,17],[166,33,89,28,"logo"],[166,37,89,13],[166,39,89,34],[167,0,90,8],[167,25,90,13,"setState"],[167,33,90,8],[167,34,90,22],[168,0,90,24,"logo"],[168,22,90,24,"logo"],[168,26,90,28],[168,28,90,30,"undefined"],[169,0,90,22],[169,21,90,8],[170,0,91,7],[172,0,26,2],[173,0,26,2],[174,0,26,2],[175,0,26,2],[176,0,26,2],[177,0,26,2],[178,0,26,2],[179,0,26,2],[180,0,26,2],[181,0,26,2],[182,0,26,2],[184,0,26,2],[185,0,26,2],[186,0,26,2],[187,0,26,2],[188,0,26,2],[188,33,95,63],[188,38,95,68,"props"],[188,43,26,2],[188,45,95,14,"navIconName"],[188,56,26,2],[188,72,95,14,"navIconName"],[188,83,26,2],[188,85,95,27,"iconSize"],[188,93,26,2],[188,109,95,27,"iconSize"],[188,117,26,2],[188,119,95,37,"iconColor"],[188,128,26,2],[188,144,95,37,"iconColor"],[188,153,26,2],[188,155,95,48,"titleColor"],[188,165,26,2],[188,181,95,48,"titleColor"],[188,191,26,2],[190,0,26,2],[190,23,96,10,"navIconName"],[190,34,26,2],[191,0,26,2],[192,0,26,2],[193,0,26,2],[195,0,26,2],[196,0,26,2],[196,50,97,30,"getImageSource"],[196,64,97,44],[196,65,98,10,"navIconName"],[196,76,97,44],[196,78,99,10,"iconSize"],[196,86,97,44],[196,88,100,10,"iconColor"],[196,97,100,19],[196,101,100,23,"titleColor"],[196,111,97,44],[196,112,26,2],[198,0,26,2],[199,0,97,14,"navIcon"],[199,18,97,14,"navIcon"],[199,25,26,2],[200,0,102,8],[200,23,102,13,"setState"],[200,31,102,8],[200,32,102,22],[201,0,102,24,"navIcon"],[201,20,102,24,"navIcon"],[201,27,102,31],[201,29,102,24,"navIcon"],[202,0,102,22],[202,19,102,8],[203,0,26,2],[204,0,26,2],[206,0,26,2],[207,0,104,13],[207,22,104,17],[207,27,104,22,"state"],[207,32,104,17],[207,33,104,28,"navIcon"],[207,40,104,13],[207,42,104,37],[208,0,105,8],[208,25,105,13,"setState"],[208,33,105,8],[208,34,105,22],[209,0,105,24,"navIcon"],[209,22,105,24,"navIcon"],[209,29,105,31],[209,31,105,33,"undefined"],[210,0,105,22],[210,21,105,8],[211,0,106,7],[213,0,26,2],[214,0,26,2],[215,0,26,2],[216,0,26,2],[217,0,26,2],[218,0,26,2],[219,0,26,2],[220,0,26,2],[221,0,26,2],[222,0,26,2],[223,0,26,2],[225,0,26,2],[226,0,26,2],[227,0,26,2],[228,0,26,2],[229,0,26,2],[229,33,110,68],[229,38,110,73,"props"],[229,43,26,2],[229,45,110,14,"overflowIconName"],[229,61,26,2],[229,77,110,14,"overflowIconName"],[229,93,26,2],[229,95,110,32,"iconSize"],[229,103,26,2],[229,119,110,32,"iconSize"],[229,127,26,2],[229,129,110,42,"iconColor"],[229,138,26,2],[229,154,110,42,"iconColor"],[229,163,26,2],[229,165,110,53,"titleColor"],[229,175,26,2],[229,191,110,53,"titleColor"],[229,201,26,2],[231,0,26,2],[231,23,111,10,"overflowIconName"],[231,39,26,2],[232,0,26,2],[233,0,26,2],[234,0,26,2],[236,0,26,2],[237,0,26,2],[237,50,112,35,"getImageSource"],[237,64,112,49],[237,65,113,10,"overflowIconName"],[237,81,112,49],[237,83,114,10,"iconSize"],[237,91,112,49],[237,93,115,10,"iconColor"],[237,102,115,19],[237,106,115,23,"titleColor"],[237,116,112,49],[237,117,26,2],[239,0,26,2],[240,0,112,14,"overflowIcon"],[240,18,112,14,"overflowIcon"],[240,30,26,2],[241,0,117,8],[241,23,117,13,"setState"],[241,31,117,8],[241,32,117,22],[242,0,117,24,"overflowIcon"],[242,20,117,24,"overflowIcon"],[242,32,117,36],[242,34,117,24,"overflowIcon"],[243,0,117,22],[243,19,117,8],[244,0,26,2],[245,0,26,2],[247,0,26,2],[248,0,119,13],[248,22,119,17],[248,27,119,22,"state"],[248,32,119,17],[248,33,119,28,"overflowIcon"],[248,45,119,13],[248,47,119,42],[249,0,120,8],[249,25,120,13,"setState"],[249,33,120,8],[249,34,120,22],[250,0,120,24,"overflowIcon"],[250,22,120,24,"overflowIcon"],[250,34,120,36],[250,36,120,38,"undefined"],[251,0,120,22],[251,21,120,8],[252,0,121,7],[254,0,26,2],[255,0,26,2],[256,0,26,2],[257,0,26,2],[258,0,26,2],[259,0,26,2],[260,0,26,2],[261,0,26,2],[262,0,26,2],[263,0,26,2],[264,0,26,2],[266,0,26,2],[267,0,26,2],[268,0,26,2],[269,0,26,2],[270,0,26,2],[270,33,125,59],[270,38,125,64,"props"],[270,43,26,2],[270,45,125,14,"actions"],[270,52,26,2],[270,68,125,14,"actions"],[270,75,26,2],[270,77,125,23,"iconSize"],[270,85,26,2],[270,101,125,23,"iconSize"],[270,109,26,2],[270,111,125,33,"iconColor"],[270,120,26,2],[270,136,125,33,"iconColor"],[270,145,26,2],[270,147,125,44,"titleColor"],[270,157,26,2],[270,173,125,44,"titleColor"],[270,183,26,2],[271,0,26,2],[272,0,26,2],[272,50,126,35,"Promise"],[272,57,126,42],[272,58,126,43,"all"],[272,61,126,35],[272,62,127,8],[272,63,127,9,"actions"],[272,70,127,16],[272,74,127,20],[272,76,127,8],[272,78,127,24,"map"],[272,81,127,8],[272,82,127,28],[272,92,127,28,"action"],[272,98,127,34],[272,100,127,38],[273,0,128,10],[273,24,128,14,"action"],[273,30,128,20],[273,31,128,21,"iconName"],[273,39,128,10],[273,41,128,31],[274,0,129,12],[274,29,129,19,"getImageSource"],[274,43,129,33],[274,44,130,14,"action"],[274,50,130,20],[274,51,130,21,"iconName"],[274,59,129,33],[274,61,131,14,"action"],[274,67,131,20],[274,68,131,21,"iconSize"],[274,76,131,14],[274,80,131,33,"iconSize"],[274,88,129,33],[274,90,132,14,"action"],[274,96,132,20],[274,97,132,21,"iconColor"],[274,106,132,14],[274,110,132,34,"iconColor"],[274,119,132,14],[274,123,132,47,"titleColor"],[274,133,129,33],[274,134,129,19],[274,135,133,14,"then"],[274,139,129,19],[274,140,133,19],[274,150,133,19,"icon"],[274,154,133,23],[275,0,133,23],[275,49,133,33,"action"],[275,55,133,23],[276,0,133,41,"icon"],[276,26,133,41,"icon"],[276,30,133,45],[276,32,133,41,"icon"],[277,0,133,23],[278,0,133,23],[278,23,129,19],[278,24,129,12],[279,0,134,11],[281,0,135,10],[281,27,135,17,"Promise"],[281,34,135,24],[281,35,135,25,"resolve"],[281,42,135,17],[281,43,135,33,"action"],[281,49,135,17],[281,50,135,10],[282,0,136,9],[282,19,127,8],[282,20,126,35],[282,21,26,2],[284,0,26,2],[285,0,126,12,"updatedActions"],[285,18,126,12,"updatedActions"],[285,32,26,2],[286,0,138,6],[286,23,138,11,"setState"],[286,31,138,6],[286,32,138,20],[287,0,138,22,"actions"],[287,20,138,22,"actions"],[287,27,138,29],[287,29,138,31,"updatedActions"],[288,0,138,20],[288,19,138,6],[290,0,26,2],[291,0,26,2],[292,0,26,2],[293,0,26,2],[294,0,26,2],[295,0,26,2],[296,0,26,2],[297,0,26,2],[298,0,26,2],[299,0,26,2],[299,33,141,13],[300,0,142,6],[300,17,142,13],[300,46,142,14],[300,73,142,13],[300,88,142,33],[300,93,142,38,"props"],[300,98,142,13],[300,100,142,49],[300,105,142,54,"state"],[300,110,142,13],[301,0,142,13],[302,0,142,13],[303,0,142,13],[304,0,142,13],[305,0,142,13],[305,13,142,6],[306,0,143,5],[307,0,26,2],[309,0,26,2],[310,0,26,2],[310,6,26,42,"PureComponent"],[310,26,26,2],[310,36,27,11,"propTypes"],[310,45,26,2],[310,48,27,23],[311,0,28,6,"logoName"],[311,6,28,6,"logoName"],[311,14,28,14],[311,16,28,16,"IconNamePropType"],[311,32,27,23],[312,0,29,6,"navIconName"],[312,6,29,6,"navIconName"],[312,17,29,17],[312,19,29,19,"IconNamePropType"],[312,35,27,23],[313,0,30,6,"overflowIconName"],[313,6,30,6,"overflowIconName"],[313,22,30,22],[313,24,30,24,"IconNamePropType"],[313,40,27,23],[314,0,31,6,"actions"],[314,6,31,6,"actions"],[314,13,31,13],[314,15,31,15,"PropTypes"],[314,34,31,25,"arrayOf"],[314,41,31,15],[314,42,32,8,"PropTypes"],[314,61,32,18,"shape"],[314,66,32,8],[314,67,32,24],[315,0,33,10,"title"],[315,8,33,10,"title"],[315,13,33,15],[315,15,33,17,"PropTypes"],[315,34,33,27,"string"],[315,40,33,17],[315,41,33,34,"isRequired"],[315,51,32,24],[316,0,34,10,"iconName"],[316,8,34,10,"iconName"],[316,16,34,18],[316,18,34,20,"IconNamePropType"],[316,34,32,24],[317,0,35,10,"iconSize"],[317,8,35,10,"iconSize"],[317,16,35,18],[317,18,35,20,"PropTypes"],[317,37,35,30,"number"],[317,43,32,24],[318,0,36,10,"iconColor"],[318,8,36,10,"iconColor"],[318,17,36,19],[318,19,36,21,"PropTypes"],[318,38,36,31,"oneOfType"],[318,47,36,21],[318,48,36,41],[318,49,36,42,"PropTypes"],[318,68,36,52,"string"],[318,74,36,41],[318,76,36,60,"PropTypes"],[318,95,36,70,"number"],[318,101,36,41],[318,102,36,21],[318,103,32,24],[319,0,37,10,"show"],[319,8,37,10,"show"],[319,12,37,14],[319,14,37,16,"PropTypes"],[319,33,37,26,"oneOf"],[319,38,37,16],[319,39,37,32],[319,40,37,33],[319,48,37,32],[319,50,37,43],[319,58,37,32],[319,60,37,53],[319,67,37,32],[319,68,37,16],[319,69,32,24],[320,0,38,10,"showWithText"],[320,8,38,10,"showWithText"],[320,20,38,22],[320,22,38,24,"PropTypes"],[320,41,38,34,"bool"],[321,0,32,24],[321,7,32,8],[321,8,31,15],[321,9,27,23],[322,0,41,6,"iconSize"],[322,6,41,6,"iconSize"],[322,14,41,14],[322,16,41,16,"PropTypes"],[322,35,41,26,"number"],[322,41,27,23],[323,0,42,6,"iconColor"],[323,6,42,6,"iconColor"],[323,15,42,15],[323,17,42,17,"PropTypes"],[323,36,42,27,"oneOfType"],[323,45,42,17],[323,46,42,37],[323,47,42,38,"PropTypes"],[323,66,42,48,"string"],[323,72,42,37],[323,74,42,56,"PropTypes"],[323,93,42,66,"number"],[323,99,42,37],[323,100,42,17],[323,101,27,23],[324,0,43,6,"titleColor"],[324,6,43,6,"titleColor"],[324,16,43,16],[324,18,43,18,"PropTypes"],[324,37,43,28,"oneOfType"],[324,46,43,18],[324,47,43,38],[324,48,43,39,"PropTypes"],[324,67,43,49,"string"],[324,73,43,38],[324,75,43,57,"PropTypes"],[324,94,43,67,"number"],[324,100,43,38],[324,101,43,18],[325,0,27,23],[325,5,26,2],[325,14,46,11,"defaultProps"],[325,26,26,2],[325,29,46,26],[326,0,47,6,"iconSize"],[326,6,47,6,"iconSize"],[326,14,47,14],[326,16,47,16],[327,0,46,26],[327,5,26,2],[328,0,145,1]]},"type":"js/module"}]}