{"dependencies":[{"name":"react","data":{"isAsync":false}},{"name":"lodash","data":{"isAsync":false}},{"name":"color","data":{"isAsync":false}},{"name":"./extractOpacity","data":{"isAsync":false}},{"name":"./extractTransform","data":{"isAsync":false}},{"name":"../units","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _default;\n\n  var _react = _$$_REQUIRE(_dependencyMap[0], \"react\");\n\n  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"lodash\"));\n\n  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"color\"));\n\n  var _extractOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./extractOpacity\"));\n\n  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./extractTransform\"));\n\n  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"../units\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var percentReg = /^([+\\-]?\\d+(?:\\.\\d+)?(?:[eE][+\\-]?\\d+)?)(%?)$/;\n\n  function percentToFloat(percent) {\n    var matched = percent.match(percentReg);\n\n    if (!matched) {\n      console.warn(\"`\" + percent + \"` is not a valid number or percentage string.\");\n      return 0;\n    }\n\n    return matched[2] ? matched[1] / 100 : +matched[1];\n  }\n\n  function _default(props) {\n    if (!props.id) {\n      return null;\n    }\n\n    var stops = {};\n\n    _react.Children.forEach(props.children, function (child) {\n      if (child.props.stopColor && child.props.offset) {\n        var offset = percentToFloat(child.props.offset);\n        stops[offset] = (0, _color.default)(child.props.stopColor).alpha((0, _extractOpacity.default)(child.props.stopOpacity));\n      }\n    });\n\n    var sorted = _lodash.default.sortBy(_lodash.default.map(stops, function (stop, offset) {\n      return {\n        stop: stop,\n        offset: offset\n      };\n    }), \"offset\");\n\n    var gradient = [];\n    sorted.forEach(function (_ref) {\n      var stop = _ref.stop;\n\n      var _stop$rgb$array = stop.rgb().array(),\n          _stop$rgb$array2 = _slicedToArray(_stop$rgb$array, 4),\n          r = _stop$rgb$array2[0],\n          g = _stop$rgb$array2[1],\n          b = _stop$rgb$array2[2],\n          _stop$rgb$array2$ = _stop$rgb$array2[3],\n          a = _stop$rgb$array2$ === void 0 ? 1 : _stop$rgb$array2$;\n\n      gradient.push(r / 255);\n      gradient.push(g / 255);\n      gradient.push(b / 255);\n      gradient.push(a);\n    });\n    gradient.push.apply(gradient, _toConsumableArray(sorted.map(function (_ref2) {\n      var offset = _ref2.offset;\n      return +offset;\n    })));\n    var gradientTransform;\n\n    if (props.gradientTransform) {\n      gradientTransform = (0, _extractTransform.default)(props.gradientTransform);\n    } else if (props.transform) {\n      gradientTransform = (0, _extractTransform.default)(props.transform);\n    } else {\n      gradientTransform = (0, _extractTransform.default)(props);\n    }\n\n    return {\n      gradient: gradient,\n      name: props.id,\n      gradientTransform: gradientTransform,\n      gradientUnits: _units.default[props.gradientUnits] || 0\n    };\n  }\n});","map":[[7,0,1,0],[9,0,2,0],[11,0,3,0],[13,0,5,0],[15,0,6,0],[17,0,7,0],[37,0,9,0],[37,6,9,6,"percentReg"],[37,16,9,16],[37,19,9,19],[37,66,9,0],[39,0,11,0],[39,11,11,9,"percentToFloat"],[39,25,11,0],[39,26,11,24,"percent"],[39,33,11,0],[39,35,11,33],[40,0,12,4],[40,8,12,10,"matched"],[40,15,12,17],[40,18,12,20,"percent"],[40,25,12,27],[40,26,12,28,"match"],[40,31,12,20],[40,32,12,34,"percentReg"],[40,42,12,20],[40,43,12,4],[42,0,13,4],[42,8,13,8],[42,9,13,9,"matched"],[42,16,13,4],[42,18,13,18],[43,0,14,8,"console"],[43,6,14,8,"console"],[43,13,14,15],[43,14,14,16,"warn"],[43,18,14,8],[43,25,15,17,"percent"],[43,32,14,8],[44,0,17,8],[44,13,17,15],[44,14,17,8],[45,0,18,5],[47,0,20,4],[47,11,20,11,"matched"],[47,18,20,18],[47,19,20,19],[47,20,20,18],[47,21,20,11],[47,24,20,24,"matched"],[47,31,20,31],[47,32,20,32],[47,33,20,31],[47,34,20,24],[47,37,20,37],[47,40,20,11],[47,43,20,43],[47,44,20,44,"matched"],[47,51,20,51],[47,52,20,52],[47,53,20,51],[47,54,20,4],[48,0,21,1],[50,0,23,15],[50,20,23,24,"props"],[50,25,23,15],[50,27,23,31],[51,0,24,4],[51,8,24,8],[51,9,24,9,"props"],[51,14,24,14],[51,15,24,15,"id"],[51,17,24,4],[51,19,24,19],[52,0,25,8],[52,13,25,15],[52,17,25,8],[53,0,26,5],[55,0,28,4],[55,8,28,10,"stops"],[55,13,28,15],[55,16,28,18],[55,18,28,4],[57,0,29,4,"Children"],[57,20,29,13,"forEach"],[57,27,29,4],[57,28,29,21,"props"],[57,33,29,26],[57,34,29,27,"children"],[57,42,29,4],[57,44,29,37],[57,54,29,37,"child"],[57,59,29,42],[57,61,29,46],[58,0,30,8],[58,10,30,12,"child"],[58,15,30,17],[58,16,30,18,"props"],[58,21,30,12],[58,22,30,24,"stopColor"],[58,31,30,12],[58,35,30,37,"child"],[58,40,30,42],[58,41,30,43,"props"],[58,46,30,37],[58,47,30,49,"offset"],[58,53,30,8],[58,55,30,57],[59,0,32,12],[59,12,32,18,"offset"],[59,18,32,24],[59,21,32,27,"percentToFloat"],[59,35,32,41],[59,36,32,42,"child"],[59,41,32,47],[59,42,32,48,"props"],[59,47,32,42],[59,48,32,54,"offset"],[59,54,32,41],[59,55,32,12],[60,0,36,12,"stops"],[60,8,36,12,"stops"],[60,13,36,17],[60,14,36,18,"offset"],[60,20,36,17],[60,21,36,12],[60,24,36,28],[60,44,36,34,"child"],[60,49,36,39],[60,50,36,40,"props"],[60,55,36,34],[60,56,36,46,"stopColor"],[60,65,36,28],[60,67,36,57,"alpha"],[60,72,36,28],[60,73,37,16],[60,102,37,31,"child"],[60,107,37,36],[60,108,37,37,"props"],[60,113,37,31],[60,114,37,43,"stopOpacity"],[60,125,37,16],[60,126,36,28],[60,127,36,12],[61,0,39,9],[62,0,40,5],[62,5,29,4],[64,0,42,4],[64,8,42,10,"sorted"],[64,14,42,16],[64,17,42,19,"_"],[64,33,42,21,"sortBy"],[64,39,42,19],[64,40,43,8,"_"],[64,56,43,10,"map"],[64,59,43,8],[64,60,43,14,"stops"],[64,65,43,8],[64,67,43,21],[64,77,43,22,"stop"],[64,81,43,21],[64,83,43,28,"offset"],[64,89,43,21],[64,91,43,39],[65,0,44,12],[65,13,44,19],[66,0,44,21,"stop"],[66,8,44,21,"stop"],[66,12,44,25],[66,14,44,21,"stop"],[66,18,44,19],[67,0,44,27,"offset"],[67,8,44,27,"offset"],[67,14,44,33],[67,16,44,27,"offset"],[68,0,44,19],[68,7,44,12],[69,0,45,9],[69,5,43,8],[69,6,42,19],[69,8,46,8],[69,16,42,19],[69,17,42,4],[71,0,49,4],[71,8,49,10,"gradient"],[71,16,49,18],[71,19,49,21],[71,21,49,4],[72,0,51,4,"sorted"],[72,4,51,4,"sorted"],[72,10,51,10],[72,11,51,11,"forEach"],[72,18,51,4],[72,19,51,19],[72,35,51,33],[73,0,51,33],[73,10,51,22,"stop"],[73,14,51,33],[73,22,51,22,"stop"],[73,26,51,33],[75,0,51,33],[75,28,52,33,"stop"],[75,32,52,37],[75,33,52,38,"rgb"],[75,36,52,33],[75,39,52,44,"array"],[75,44,52,33],[75,46,51,33],[76,0,51,33],[77,0,51,33],[77,10,52,15,"r"],[77,11,51,33],[78,0,51,33],[78,10,52,18,"g"],[78,11,51,33],[79,0,51,33],[79,10,52,21,"b"],[79,11,51,33],[80,0,51,33],[81,0,51,33],[81,10,52,24,"a"],[81,11,51,33],[81,45,52,28],[81,46,51,33],[83,0,53,8,"gradient"],[83,6,53,8,"gradient"],[83,14,53,16],[83,15,53,17,"push"],[83,19,53,8],[83,20,53,22,"r"],[83,21,53,23],[83,24,53,26],[83,27,53,8],[84,0,54,8,"gradient"],[84,6,54,8,"gradient"],[84,14,54,16],[84,15,54,17,"push"],[84,19,54,8],[84,20,54,22,"g"],[84,21,54,23],[84,24,54,26],[84,27,54,8],[85,0,55,8,"gradient"],[85,6,55,8,"gradient"],[85,14,55,16],[85,15,55,17,"push"],[85,19,55,8],[85,20,55,22,"b"],[85,21,55,23],[85,24,55,26],[85,27,55,8],[86,0,56,8,"gradient"],[86,6,56,8,"gradient"],[86,14,56,16],[86,15,56,17,"push"],[86,19,56,8],[86,20,56,22,"a"],[86,21,56,8],[87,0,57,5],[87,5,51,4],[88,0,59,4,"gradient"],[88,4,59,4,"gradient"],[88,12,59,12],[88,13,59,13,"push"],[88,17,59,4],[88,24,59,4,"gradient"],[88,32,59,12],[88,53,59,21,"sorted"],[88,59,59,27],[88,60,59,28,"map"],[88,63,59,21],[88,64,59,32],[89,0,59,32],[89,10,59,35,"offset"],[89,16,59,32],[89,25,59,35,"offset"],[89,31,59,32],[90,0,59,32],[90,13,59,48],[90,14,59,49,"offset"],[90,20,59,32],[91,0,59,32],[91,5,59,21],[91,6,59,12],[91,8,59,4],[92,0,61,4],[92,8,61,8,"gradientTransform"],[92,25,61,4],[94,0,62,4],[94,8,62,8,"props"],[94,13,62,13],[94,14,62,14,"gradientTransform"],[94,31,62,4],[94,33,62,33],[95,0,63,8,"gradientTransform"],[95,6,63,8,"gradientTransform"],[95,23,63,25],[95,26,63,28],[95,57,63,45,"props"],[95,62,63,50],[95,63,63,51,"gradientTransform"],[95,80,63,28],[95,81,63,8],[96,0,64,5],[96,5,62,4],[96,11,64,11],[96,15,64,15,"props"],[96,20,64,20],[96,21,64,21,"transform"],[96,30,64,11],[96,32,64,32],[97,0,65,8,"gradientTransform"],[97,6,65,8,"gradientTransform"],[97,23,65,25],[97,26,65,28],[97,57,65,45,"props"],[97,62,65,50],[97,63,65,51,"transform"],[97,72,65,28],[97,73,65,8],[98,0,66,5],[98,5,64,11],[98,11,66,11],[99,0,67,8,"gradientTransform"],[99,6,67,8,"gradientTransform"],[99,23,67,25],[99,26,67,28],[99,57,67,45,"props"],[99,62,67,28],[99,63,67,8],[100,0,68,5],[102,0,70,4],[102,11,70,11],[103,0,71,8,"gradient"],[103,6,71,8,"gradient"],[103,14,71,16],[103,16,71,8,"gradient"],[103,24,70,11],[104,0,72,8,"name"],[104,6,72,8,"name"],[104,10,72,12],[104,12,72,14,"props"],[104,17,72,19],[104,18,72,20,"id"],[104,20,70,11],[105,0,73,8,"gradientTransform"],[105,6,73,8,"gradientTransform"],[105,23,73,25],[105,25,73,8,"gradientTransform"],[105,42,70,11],[106,0,74,8,"gradientUnits"],[106,6,74,8,"gradientUnits"],[106,19,74,21],[106,21,74,23,"units"],[106,36,74,29,"props"],[106,41,74,34],[106,42,74,35,"gradientUnits"],[106,55,74,23],[106,60,74,53],[107,0,70,11],[107,5,70,4],[108,0,76,1]]},"type":"js/module"}]}