{"dependencies":[{"name":"../utils","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _utils = _$$_REQUIRE(_dependencyMap[0], \"../utils\");\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./AnimatedNode\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX = 0;\n    var currentT = 0;\n    var i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x;\n      }\n\n      if (x === 0) {\n        return 0;\n      }\n\n      if (x === 1) {\n        return 1;\n      }\n\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n\n  var AnimatedBezier = function (_AnimatedNode) {\n    _inherits(AnimatedBezier, _AnimatedNode);\n\n    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n      var _this;\n\n      _classCallCheck(this, AnimatedBezier);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedBezier).call(this, {\n        type: 'bezier',\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        input: value.__nodeID\n      }, [value]));\n      _this._value = value;\n      _this._bezier = bezier(mX1, mY1, mX2, mY2);\n      return _this;\n    }\n\n    _createClass(AnimatedBezier, [{\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._bezier((0, _utils.val)(this._value));\n      }\n    }]);\n\n    return AnimatedBezier;\n  }(_AnimatedNode2.default);\n\n  exports.default = AnimatedBezier;\n});","map":[[7,0,1,0],[9,0,2,0],[29,0,5,0],[29,6,5,4,"NEWTON_ITERATIONS"],[29,23,5,21],[29,26,5,24],[29,27,5,0],[30,0,6,0],[30,6,6,4,"NEWTON_MIN_SLOPE"],[30,22,6,20],[30,25,6,23],[30,30,6,0],[31,0,7,0],[31,6,7,4,"SUBDIVISION_PRECISION"],[31,27,7,25],[31,30,7,28],[31,39,7,0],[32,0,8,0],[32,6,8,4,"SUBDIVISION_MAX_ITERATIONS"],[32,32,8,30],[32,35,8,33],[32,37,8,0],[33,0,10,0],[33,6,10,4,"kSplineTableSize"],[33,22,10,20],[33,25,10,23],[33,27,10,0],[34,0,11,0],[34,6,11,4,"kSampleStepSize"],[34,21,11,19],[34,24,11,22],[34,31,11,29,"kSplineTableSize"],[34,47,11,45],[34,50,11,48],[34,53,11,22],[34,54,11,0],[35,0,13,0],[35,6,13,4,"float32ArraySupported"],[35,27,13,25],[35,30,13,28],[35,37,13,35,"Float32Array"],[35,49,13,28],[35,54,13,52],[35,64,13,0],[37,0,15,0],[37,11,15,9,"A"],[37,12,15,0],[37,13,15,11,"aA1"],[37,16,15,0],[37,18,15,16,"aA2"],[37,21,15,0],[37,23,15,21],[38,0,16,2],[38,11,16,9],[38,17,16,15],[38,23,16,21,"aA2"],[38,26,16,9],[38,29,16,27],[38,35,16,33,"aA1"],[38,38,16,2],[39,0,17,1],[41,0,18,0],[41,11,18,9,"B"],[41,12,18,0],[41,13,18,11,"aA1"],[41,16,18,0],[41,18,18,16,"aA2"],[41,21,18,0],[41,23,18,21],[42,0,19,2],[42,11,19,9],[42,17,19,15,"aA2"],[42,20,19,9],[42,23,19,21],[42,29,19,27,"aA1"],[42,32,19,2],[43,0,20,1],[45,0,21,0],[45,11,21,9,"C"],[45,12,21,0],[45,13,21,11,"aA1"],[45,16,21,0],[45,18,21,16],[46,0,22,2],[46,11,22,9],[46,17,22,15,"aA1"],[46,20,22,2],[47,0,23,1],[49,0,26,0],[49,11,26,9,"calcBezier"],[49,21,26,0],[49,22,26,20,"aT"],[49,24,26,0],[49,26,26,24,"aA1"],[49,29,26,0],[49,31,26,29,"aA2"],[49,34,26,0],[49,36,26,34],[50,0,27,2],[50,11,27,9],[50,12,27,10],[50,13,27,11,"A"],[50,14,27,12],[50,15,27,13,"aA1"],[50,18,27,12],[50,20,27,18,"aA2"],[50,23,27,12],[50,24,27,11],[50,27,27,25,"aT"],[50,29,27,11],[50,32,27,30,"B"],[50,33,27,31],[50,34,27,32,"aA1"],[50,37,27,31],[50,39,27,37,"aA2"],[50,42,27,31],[50,43,27,10],[50,47,27,45,"aT"],[50,49,27,10],[50,52,27,50,"C"],[50,53,27,51],[50,54,27,52,"aA1"],[50,57,27,51],[50,58,27,9],[50,62,27,60,"aT"],[50,64,27,2],[51,0,28,1],[53,0,31,0],[53,11,31,9,"getSlope"],[53,19,31,0],[53,20,31,18,"aT"],[53,22,31,0],[53,24,31,22,"aA1"],[53,27,31,0],[53,29,31,27,"aA2"],[53,32,31,0],[53,34,31,32],[54,0,32,2],[54,11,32,9],[54,17,32,15,"A"],[54,18,32,16],[54,19,32,17,"aA1"],[54,22,32,16],[54,24,32,22,"aA2"],[54,27,32,16],[54,28,32,9],[54,31,32,29,"aT"],[54,33,32,9],[54,36,32,34,"aT"],[54,38,32,9],[54,41,32,39],[54,47,32,45,"B"],[54,48,32,46],[54,49,32,47,"aA1"],[54,52,32,46],[54,54,32,52,"aA2"],[54,57,32,46],[54,58,32,39],[54,61,32,59,"aT"],[54,63,32,9],[54,66,32,64,"C"],[54,67,32,65],[54,68,32,66,"aA1"],[54,71,32,65],[54,72,32,2],[55,0,33,1],[57,0,35,0],[57,11,35,9,"binarySubdivide"],[57,26,35,0],[57,27,35,25,"aX"],[57,29,35,0],[57,31,35,29,"aA"],[57,33,35,0],[57,35,35,33,"aB"],[57,37,35,0],[57,39,35,37,"mX1"],[57,42,35,0],[57,44,35,42,"mX2"],[57,47,35,0],[57,49,35,47],[58,0,36,2],[58,8,36,6,"currentX"],[58,16,36,14],[58,19,36,17],[58,20,36,2],[59,0,37,2],[59,8,37,6,"currentT"],[59,16,37,14],[59,19,37,17],[59,20,37,2],[60,0,38,2],[60,8,38,6,"i"],[60,9,38,7],[60,12,38,10],[60,13,38,2],[62,0,39,2],[62,7,39,5],[63,0,40,4,"currentT"],[63,6,40,4,"currentT"],[63,14,40,12],[63,17,40,15,"aA"],[63,19,40,17],[63,22,40,20],[63,23,40,21,"aB"],[63,25,40,23],[63,28,40,26,"aA"],[63,30,40,20],[63,34,40,32],[63,37,40,4],[64,0,41,4,"currentX"],[64,6,41,4,"currentX"],[64,14,41,12],[64,17,41,15,"calcBezier"],[64,27,41,25],[64,28,41,26,"currentT"],[64,36,41,25],[64,38,41,36,"mX1"],[64,41,41,25],[64,43,41,41,"mX2"],[64,46,41,25],[64,47,41,15],[64,50,41,48,"aX"],[64,52,41,4],[66,0,42,4],[66,10,42,8,"currentX"],[66,18,42,16],[66,21,42,19],[66,24,42,4],[66,26,42,24],[67,0,43,6,"aB"],[67,8,43,6,"aB"],[67,10,43,8],[67,13,43,11,"currentT"],[67,21,43,6],[68,0,44,5],[68,7,42,4],[68,13,44,11],[69,0,45,6,"aA"],[69,8,45,6,"aA"],[69,10,45,8],[69,13,45,11,"currentT"],[69,21,45,6],[70,0,46,5],[71,0,47,3],[71,5,39,2],[71,13,48,4,"Math"],[71,17,48,8],[71,18,48,9,"abs"],[71,21,48,4],[71,22,48,13,"currentX"],[71,30,48,4],[71,34,48,25,"SUBDIVISION_PRECISION"],[71,55,48,4],[71,59,49,4],[71,61,49,6,"i"],[71,62,49,4],[71,65,49,10,"SUBDIVISION_MAX_ITERATIONS"],[71,91,39,2],[73,0,51,2],[73,11,51,9,"currentT"],[73,19,51,2],[74,0,52,1],[76,0,54,0],[76,11,54,9,"newtonRaphsonIterate"],[76,31,54,0],[76,32,54,30,"aX"],[76,34,54,0],[76,36,54,34,"aGuessT"],[76,43,54,0],[76,45,54,43,"mX1"],[76,48,54,0],[76,50,54,48,"mX2"],[76,53,54,0],[76,55,54,53],[77,0,55,2],[77,9,55,7],[77,13,55,11,"i"],[77,14,55,12],[77,17,55,15],[77,18,55,2],[77,20,55,18,"i"],[77,21,55,19],[77,24,55,22,"NEWTON_ITERATIONS"],[77,41,55,2],[77,43,55,41],[77,45,55,43,"i"],[77,46,55,2],[77,48,55,46],[78,0,56,4],[78,10,56,8,"currentSlope"],[78,22,56,20],[78,25,56,23,"getSlope"],[78,33,56,31],[78,34,56,32,"aGuessT"],[78,41,56,31],[78,43,56,41,"mX1"],[78,46,56,31],[78,48,56,46,"mX2"],[78,51,56,31],[78,52,56,4],[80,0,57,4],[80,10,57,8,"currentSlope"],[80,22,57,20],[80,27,57,25],[80,30,57,4],[80,32,57,30],[81,0,58,6],[81,15,58,13,"aGuessT"],[81,22,58,6],[82,0,59,5],[84,0,60,4],[84,10,60,8,"currentX"],[84,18,60,16],[84,21,60,19,"calcBezier"],[84,31,60,29],[84,32,60,30,"aGuessT"],[84,39,60,29],[84,41,60,39,"mX1"],[84,44,60,29],[84,46,60,44,"mX2"],[84,49,60,29],[84,50,60,19],[84,53,60,51,"aX"],[84,55,60,4],[85,0,61,4,"aGuessT"],[85,6,61,4,"aGuessT"],[85,13,61,11],[85,17,61,15,"currentX"],[85,25,61,23],[85,28,61,26,"currentSlope"],[85,40,61,4],[86,0,62,3],[88,0,63,2],[88,11,63,9,"aGuessT"],[88,18,63,2],[89,0,64,1],[91,0,66,0],[91,11,66,9,"bezier"],[91,17,66,0],[91,18,66,16,"mX1"],[91,21,66,0],[91,23,66,21,"mY1"],[91,26,66,0],[91,28,66,26,"mX2"],[91,31,66,0],[91,33,66,31,"mY2"],[91,36,66,0],[91,38,66,36],[92,0,67,2],[92,8,67,6],[92,10,67,8,"mX1"],[92,13,67,11],[92,17,67,15],[92,18,67,8],[92,22,67,20,"mX1"],[92,25,67,23],[92,29,67,27],[92,30,67,8],[92,34,67,32,"mX2"],[92,37,67,35],[92,41,67,39],[92,42,67,8],[92,46,67,44,"mX2"],[92,49,67,47],[92,53,67,51],[92,54,67,6],[92,55,67,2],[92,57,67,55],[93,0,68,4],[93,12,68,10],[93,16,68,14,"Error"],[93,21,68,10],[93,22,68,20],[93,63,68,10],[93,64,68,4],[94,0,69,3],[96,0,72,2],[96,8,72,6,"sampleValues"],[96,20,72,18],[96,23,72,21,"float32ArraySupported"],[96,44,72,42],[96,47,73,6],[96,51,73,10,"Float32Array"],[96,63,73,6],[96,64,73,23,"kSplineTableSize"],[96,80,73,6],[96,81,72,42],[96,84,74,6],[96,88,74,10,"Array"],[96,93,74,6],[96,94,74,16,"kSplineTableSize"],[96,110,74,6],[96,111,72,2],[98,0,75,2],[98,8,75,6,"mX1"],[98,11,75,9],[98,16,75,14,"mY1"],[98,19,75,6],[98,23,75,21,"mX2"],[98,26,75,24],[98,31,75,29,"mY2"],[98,34,75,2],[98,36,75,34],[99,0,76,4],[99,11,76,9],[99,15,76,13,"i"],[99,16,76,14],[99,19,76,17],[99,20,76,4],[99,22,76,20,"i"],[99,23,76,21],[99,26,76,24,"kSplineTableSize"],[99,42,76,4],[99,44,76,42],[99,46,76,44,"i"],[99,47,76,4],[99,49,76,47],[100,0,77,6,"sampleValues"],[100,8,77,6,"sampleValues"],[100,20,77,18],[100,21,77,19,"i"],[100,22,77,18],[100,23,77,6],[100,26,77,24,"calcBezier"],[100,36,77,34],[100,37,77,35,"i"],[100,38,77,36],[100,41,77,39,"kSampleStepSize"],[100,56,77,34],[100,58,77,56,"mX1"],[100,61,77,34],[100,63,77,61,"mX2"],[100,66,77,34],[100,67,77,6],[101,0,78,5],[102,0,79,3],[104,0,81,2],[104,13,81,11,"getTForX"],[104,21,81,2],[104,22,81,20,"aX"],[104,24,81,2],[104,26,81,24],[105,0,82,4],[105,10,82,8,"intervalStart"],[105,23,82,21],[105,26,82,24],[105,29,82,4],[106,0,83,4],[106,10,83,8,"currentSample"],[106,23,83,21],[106,26,83,24],[106,27,83,4],[107,0,84,4],[107,10,84,8,"lastSample"],[107,20,84,18],[107,23,84,21,"kSplineTableSize"],[107,39,84,37],[107,42,84,40],[107,43,84,4],[109,0,86,4],[109,13,88,6,"currentSample"],[109,26,88,19],[109,31,88,24,"lastSample"],[109,41,88,6],[109,45,88,38,"sampleValues"],[109,57,88,50],[109,58,88,51,"currentSample"],[109,71,88,50],[109,72,88,38],[109,76,88,69,"aX"],[109,78,86,4],[109,80,89,6],[109,82,89,8,"currentSample"],[109,95,86,4],[109,97,90,6],[110,0,91,6,"intervalStart"],[110,8,91,6,"intervalStart"],[110,21,91,19],[110,25,91,23,"kSampleStepSize"],[110,40,91,6],[111,0,92,5],[113,0,93,4],[113,8,93,6,"currentSample"],[113,21,93,4],[114,0,96,4],[114,10,96,8,"dist"],[114,14,96,12],[114,17,97,6],[114,18,97,7,"aX"],[114,20,97,9],[114,23,97,12,"sampleValues"],[114,35,97,24],[114,36,97,25,"currentSample"],[114,49,97,24],[114,50,97,6],[114,55,98,7,"sampleValues"],[114,67,98,19],[114,68,98,20,"currentSample"],[114,81,98,33],[114,84,98,36],[114,85,98,19],[114,86,98,7],[114,89,98,41,"sampleValues"],[114,101,98,53],[114,102,98,54,"currentSample"],[114,115,98,53],[114,116,97,6],[114,117,96,4],[115,0,99,4],[115,10,99,8,"guessForT"],[115,19,99,17],[115,22,99,20,"intervalStart"],[115,35,99,33],[115,38,99,36,"dist"],[115,42,99,40],[115,45,99,43,"kSampleStepSize"],[115,60,99,4],[116,0,101,4],[116,10,101,8,"initialSlope"],[116,22,101,20],[116,25,101,23,"getSlope"],[116,33,101,31],[116,34,101,32,"guessForT"],[116,43,101,31],[116,45,101,43,"mX1"],[116,48,101,31],[116,50,101,48,"mX2"],[116,53,101,31],[116,54,101,4],[118,0,102,4],[118,10,102,8,"initialSlope"],[118,22,102,20],[118,26,102,24,"NEWTON_MIN_SLOPE"],[118,42,102,4],[118,44,102,42],[119,0,103,6],[119,15,103,13,"newtonRaphsonIterate"],[119,35,103,33],[119,36,103,34,"aX"],[119,38,103,33],[119,40,103,38,"guessForT"],[119,49,103,33],[119,51,103,49,"mX1"],[119,54,103,33],[119,56,103,54,"mX2"],[119,59,103,33],[119,60,103,6],[120,0,104,5],[120,7,102,4],[120,13,104,11],[120,17,104,15,"initialSlope"],[120,29,104,27],[120,34,104,32],[120,37,104,11],[120,39,104,37],[121,0,105,6],[121,15,105,13,"guessForT"],[121,24,105,6],[122,0,106,5],[122,7,104,11],[122,13,106,11],[123,0,107,6],[123,15,107,13,"binarySubdivide"],[123,30,107,28],[123,31,108,8,"aX"],[123,33,107,28],[123,35,109,8,"intervalStart"],[123,48,107,28],[123,50,110,8,"intervalStart"],[123,63,110,21],[123,66,110,24,"kSampleStepSize"],[123,81,107,28],[123,83,111,8,"mX1"],[123,86,107,28],[123,88,112,8,"mX2"],[123,91,107,28],[123,92,107,6],[124,0,114,5],[125,0,115,3],[127,0,117,2],[127,11,117,9],[127,20,117,18,"BezierEasing"],[127,32,117,9],[127,33,117,31,"x"],[127,34,117,9],[127,36,117,34],[128,0,118,4],[128,10,118,8,"mX1"],[128,13,118,11],[128,18,118,16,"mY1"],[128,21,118,8],[128,25,118,23,"mX2"],[128,28,118,26],[128,33,118,31,"mY2"],[128,36,118,4],[128,38,118,36],[129,0,119,6],[129,15,119,13,"x"],[129,16,119,6],[130,0,120,5],[132,0,122,4],[132,10,122,8,"x"],[132,11,122,9],[132,16,122,14],[132,17,122,4],[132,19,122,17],[133,0,123,6],[133,15,123,13],[133,16,123,6],[134,0,124,5],[136,0,125,4],[136,10,125,8,"x"],[136,11,125,9],[136,16,125,14],[136,17,125,4],[136,19,125,17],[137,0,126,6],[137,15,126,13],[137,16,126,6],[138,0,127,5],[140,0,128,4],[140,13,128,11,"calcBezier"],[140,23,128,21],[140,24,128,22,"getTForX"],[140,32,128,30],[140,33,128,31,"x"],[140,34,128,30],[140,35,128,21],[140,37,128,35,"mY1"],[140,40,128,21],[140,42,128,40,"mY2"],[140,45,128,21],[140,46,128,4],[141,0,129,3],[141,5,117,2],[142,0,130,1],[144,6,132,21,"AnimatedBezier"],[144,20],[147,0,136,2],[147,28,136,14,"value"],[147,33,136,2],[147,35,136,21,"mX1"],[147,38,136,2],[147,40,136,26,"mY1"],[147,43,136,2],[147,45,136,31,"mX2"],[147,48,136,2],[147,50,136,36,"mY2"],[147,53,136,2],[147,55,136,41],[148,0,136,41],[150,0,136,41],[152,0,137,4],[152,90,137,10],[153,0,137,12,"type"],[153,8,137,12,"type"],[153,12,137,16],[153,14,137,18],[153,22,137,10],[154,0,137,28,"mX1"],[154,8,137,28,"mX1"],[154,11,137,31],[154,13,137,28,"mX1"],[154,16,137,10],[155,0,137,33,"mY1"],[155,8,137,33,"mY1"],[155,11,137,36],[155,13,137,33,"mY1"],[155,16,137,10],[156,0,137,38,"mX2"],[156,8,137,38,"mX2"],[156,11,137,41],[156,13,137,38,"mX2"],[156,16,137,10],[157,0,137,43,"mY2"],[157,8,137,43,"mY2"],[157,11,137,46],[157,13,137,43,"mY2"],[157,16,137,10],[158,0,137,48,"input"],[158,8,137,48,"input"],[158,13,137,53],[158,15,137,55,"value"],[158,20,137,60],[158,21,137,61,"__nodeID"],[159,0,137,10],[159,7,137,4],[159,9,137,73],[159,10,138,6,"value"],[159,15,137,73],[159,16,137,4],[160,0,140,4],[160,12,140,9,"_value"],[160,18,140,4],[160,21,140,18,"value"],[160,26,140,4],[161,0,141,4],[161,12,141,9,"_bezier"],[161,19,141,4],[161,22,141,19,"bezier"],[161,28,141,25],[161,29,141,26,"mX1"],[161,32,141,25],[161,34,141,31,"mY1"],[161,37,141,25],[161,39,141,36,"mX2"],[161,42,141,25],[161,44,141,41,"mY2"],[161,47,141,25],[161,48,141,4],[162,0,136,41],[163,0,142,3],[167,37,144,17],[168,0,145,4],[168,15,145,11],[168,20,145,16,"_bezier"],[168,27,145,11],[168,28,145,24],[168,44,145,28],[168,49,145,33,"_value"],[168,55,145,24],[168,56,145,11],[168,57,145,4],[169,0,146,3],[173,4,132,44,"AnimatedNode"],[173,26]]},"type":"js/module"}]}