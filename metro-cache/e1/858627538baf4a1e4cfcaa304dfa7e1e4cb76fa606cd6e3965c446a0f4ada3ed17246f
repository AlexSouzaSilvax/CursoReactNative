{"dependencies":[{"name":"react","data":{"isAsync":false}},{"name":"./../../react-transform-hmr/lib/index.js","data":{"isAsync":false}},{"name":"prop-types","data":{"isAsync":false}},{"name":"lodash.mapvalues","data":{"isAsync":false}},{"name":"expo-core","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Constants = exports.default = void 0;\n\n  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../../react-transform-hmr/lib/index.js\"));\n\n  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"prop-types\"));\n\n  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"lodash.mapvalues\"));\n\n  var _expoCore = _$$_REQUIRE(_dependencyMap[4], \"expo-core\");\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[5], \"react-native\");\n\n  var _class,\n      _temp,\n      _jsxFileName = \"/home/alex/Documentos/CursoReactNative/node_modules/expo-barcode-scanner/src/BarCodeScanner.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var _components = {\n    BarCodeScanner: {\n      displayName: \"BarCodeScanner\"\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/home/alex/Documentos/CursoReactNative/node_modules/expo-barcode-scanner/src/BarCodeScanner.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var ExpoBarCodeScannerModule = _expoCore.NativeModulesProxy.ExpoBarCodeScannerModule;\n  var EVENT_THROTTLE_MS = 500;\n\n  var BarCodeScanner = _wrapComponent(\"BarCodeScanner\")((_temp = _class = function (_React$Component) {\n    _inherits(BarCodeScanner, _React$Component);\n\n    function BarCodeScanner(props) {\n      var _this;\n\n      _classCallCheck(this, BarCodeScanner);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(BarCodeScanner).call(this, props));\n\n      _this.setReference = function (ref) {\n        if (ref) {\n          _this.barCodeScannerRef = ref;\n          _this.barCodeScannerHandle = (0, _reactNative.findNodeHandle)(ref);\n        } else {\n          _this.barCodeScannerRef = null;\n          _this.barCodeScannerHandle = null;\n        }\n      };\n\n      _this.onObjectDetected = function (callback) {\n        return function (_ref) {\n          var nativeEvent = _ref.nativeEvent;\n          var type = nativeEvent.type;\n\n          if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && new Date() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n            return;\n          }\n\n          if (callback) {\n            callback(nativeEvent);\n            _this.lastEventsTimes[type] = new Date();\n            _this.lastEvents[type] = JSON.stringify(nativeEvent);\n          }\n        };\n      };\n\n      _this.lastEvents = {};\n      _this.lastEventsTimes = {};\n      return _this;\n    }\n\n    _createClass(BarCodeScanner, [{\n      key: \"render\",\n      value: function render() {\n        var nativeProps = this.convertNativeProps(this.props);\n        var _this$props = this.props,\n            onBarCodeScanned = _this$props.onBarCodeScanned,\n            onBarCodeRead = _this$props.onBarCodeRead;\n        return _react.default.createElement(ExpoBarCodeScannerView, _extends({}, nativeProps, {\n          ref: this.setReference,\n          onBarCodeScanned: this.onObjectDetected(onBarCodeScanned || onBarCodeRead),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          }\n        }));\n      }\n    }, {\n      key: \"convertNativeProps\",\n      value: function convertNativeProps(props) {\n        var newProps = (0, _lodash.default)(props, this.convertProp);\n        return newProps;\n      }\n    }, {\n      key: \"convertProp\",\n      value: function convertProp(value, key) {\n        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n          return BarCodeScanner.ConversionTables[key][value];\n        }\n\n        return value;\n      }\n    }], [{\n      key: \"scanFromURLAsync\",\n      value: function scanFromURLAsync(url, barCodeTypes) {\n        var effectiveBarCodeTypes;\n        return regeneratorRuntime.async(function scanFromURLAsync$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(Array.isArray(barCodeTypes) && barCodeTypes.length === 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('No barCodeTypes requested, provide at least one barCodeType for scanner');\n\n              case 2:\n                if (!(_reactNative.Platform.OS === 'ios')) {\n                  _context.next = 6;\n                  break;\n                }\n\n                if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeScanner.Constants.BarCodeType.qr))) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n\n              case 5:\n                return _context.abrupt(\"return\", ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeScanner.Constants.BarCodeType.qr]));\n\n              case 6:\n                effectiveBarCodeTypes = barCodeTypes || Object.values(ExpoBarCodeScannerModule.BarCodeType);\n                return _context.abrupt(\"return\", ExpoBarCodeScannerModule.scanFromURLAsync(url, effectiveBarCodeTypes));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      }\n    }]);\n\n    return BarCodeScanner;\n  }(_react.default.Component), _class.Constants = {\n    BarCodeType: ExpoBarCodeScannerModule.BarCodeType,\n    Type: ExpoBarCodeScannerModule.Type\n  }, _class.ConversionTables = {\n    type: ExpoBarCodeScannerModule.Type\n  }, _class.propTypes = _objectSpread({}, _reactNative.ViewPropTypes, {\n    onBarCodeScanned: _propTypes.default.func,\n    barCodeTypes: _propTypes.default.array,\n    type: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])\n  }), _class.defaultProps = {\n    type: ExpoBarCodeScannerModule.Type.back,\n    barCodeTypes: Object.values(ExpoBarCodeScannerModule.BarCodeType)\n  }, _temp));\n\n  var _default2 = BarCodeScanner;\n  exports.default = _default2;\n  var Constants = BarCodeScanner.Constants;\n  exports.Constants = Constants;\n  var ExpoBarCodeScannerView = (0, _expoCore.requireNativeViewManager)('ExpoBarCodeScannerView', BarCodeScanner);\n});","map":[[7,0,2,0],[11,0,3,0],[13,0,4,0],[15,0,5,0],[17,0,6,0],[66,6,18,8,"ExpoBarCodeScannerModule"],[66,30],[66,33,18,37,"NativeModulesProxy"],[66,61],[66,62,18,8,"ExpoBarCodeScannerModule"],[66,86],[67,0,20,0],[67,6,20,6,"EVENT_THROTTLE_MS"],[67,23,20,23],[67,26,20,26],[67,29,20,0],[72,0,49,2],[72,28,49,14,"props"],[72,33,49,2],[72,35,49,28],[73,0,49,28],[75,0,49,28],[77,0,50,4],[77,90,50,10,"props"],[77,95,50,4],[79,0,49,28],[79,12,86,2,"setReference"],[79,24,49,28],[79,27,86,17],[79,37,86,18,"ref"],[79,40,86,17],[79,42,86,35],[80,0,87,4],[80,12,87,8,"ref"],[80,15,87,4],[80,17,87,13],[81,0,88,6],[81,16,88,11,"barCodeScannerRef"],[81,33,88,6],[81,36,88,31,"ref"],[81,39,88,6],[82,0,89,6],[82,16,89,11,"barCodeScannerHandle"],[82,36,89,6],[82,39,89,34],[82,72,89,49,"ref"],[82,75,89,34],[82,76,89,6],[83,0,90,5],[83,9,87,4],[83,15,90,11],[84,0,91,6],[84,16,91,11,"barCodeScannerRef"],[84,33,91,6],[84,36,91,31],[84,40,91,6],[85,0,92,6],[85,16,92,11,"barCodeScannerHandle"],[85,36,92,6],[85,39,92,34],[85,43,92,6],[86,0,93,5],[87,0,94,3],[87,7,49,28],[89,0,49,28],[89,12,96,2,"onObjectDetected"],[89,28,49,28],[89,31,96,21],[89,41,96,22,"callback"],[89,49,96,21],[90,0,96,21],[90,15,96,46],[90,31,96,95],[91,0,96,95],[91,14,96,49,"nativeEvent"],[91,25,96,95],[91,33,96,49,"nativeEvent"],[91,44,96,95],[92,0,96,95],[92,14,97,12,"type"],[92,18,96,95],[92,21,97,21,"nativeEvent"],[92,32,96,95],[92,33,97,12,"type"],[92,37,96,95],[94,0,98,4],[94,14,98,8],[94,20,98,13,"lastEvents"],[94,30,98,8],[94,31,98,24,"type"],[94,35,98,8],[94,40,99,6],[94,46,99,11,"lastEventsTimes"],[94,61,99,6],[94,62,99,27,"type"],[94,66,99,6],[94,67,98,8],[94,71,100,6,"JSON"],[94,75,100,10],[94,76,100,11,"stringify"],[94,85,100,6],[94,86,100,21,"nativeEvent"],[94,97,100,6],[94,103,100,38],[94,109,100,43,"lastEvents"],[94,119,100,38],[94,120,100,54,"type"],[94,124,100,38],[94,125,98,8],[94,129,101,6],[94,133,101,10,"Date"],[94,137,101,6],[94,142,101,19],[94,148,101,24,"lastEventsTimes"],[94,163,101,19],[94,164,101,40,"type"],[94,168,101,19],[94,169,101,6],[94,172,101,48,"EVENT_THROTTLE_MS"],[94,189,98,4],[94,191,102,6],[95,0,103,6],[96,0,104,5],[98,0,106,4],[98,14,106,8,"callback"],[98,22,106,4],[98,24,106,18],[99,0,107,6,"callback"],[99,12,107,6,"callback"],[99,20,107,14],[99,21,107,15,"nativeEvent"],[99,32,107,14],[99,33,107,6],[100,0,108,6],[100,18,108,11,"lastEventsTimes"],[100,33,108,6],[100,34,108,27,"type"],[100,38,108,6],[100,42,108,35],[100,46,108,39,"Date"],[100,50,108,35],[100,52,108,6],[101,0,109,6],[101,18,109,11,"lastEvents"],[101,28,109,6],[101,29,109,22,"type"],[101,33,109,6],[101,37,109,30,"JSON"],[101,41,109,34],[101,42,109,35,"stringify"],[101,51,109,30],[101,52,109,45,"nativeEvent"],[101,63,109,30],[101,64,109,6],[102,0,110,5],[103,0,111,3],[103,9,96,21],[104,0,96,21],[104,7,49,28],[106,0,51,4],[106,12,51,9,"lastEvents"],[106,22,51,4],[106,25,51,22],[106,27,51,4],[107,0,52,4],[107,12,52,9,"lastEventsTimes"],[107,27,52,4],[107,30,52,27],[107,32,52,4],[108,0,49,28],[109,0,53,3],[113,31,74,11],[114,0,75,4],[114,12,75,10,"nativeProps"],[114,23,75,21],[114,26,75,24],[114,31,75,29,"convertNativeProps"],[114,49,75,24],[114,50,75,48],[114,55,75,53,"props"],[114,60,75,24],[114,61,75,4],[115,0,74,11],[115,26,76,48],[115,31,76,53,"props"],[115,36,74,11],[116,0,74,11],[116,12,76,12,"onBarCodeScanned"],[116,28,74,11],[116,43,76,12,"onBarCodeScanned"],[116,59,74,11],[117,0,74,11],[117,12,76,30,"onBarCodeRead"],[117,25,74,11],[117,40,76,30,"onBarCodeRead"],[117,53,74,11],[118,0,77,4],[118,15,78,6],[118,44,78,7],[118,66,78,6],[118,81,79,12,"nativeProps"],[118,92,78,6],[119,0,80,8],[119,10,80,8],[119,13,80,11],[119,15,80,13],[119,20,80,18,"setReference"],[119,32,78,6],[120,0,81,8],[120,10,81,8],[120,26,81,24],[120,28,81,26],[120,33,81,31,"onObjectDetected"],[120,49,81,26],[120,50,81,48,"onBarCodeScanned"],[120,66,81,64],[120,70,81,68,"onBarCodeRead"],[120,83,81,26],[120,84,78,6],[121,0,78,6],[122,0,78,6],[123,0,78,6],[124,0,78,6],[125,0,78,6],[125,11,77,4],[126,0,84,3],[129,41,113,21,"props"],[129,46],[129,48,113,35],[130,0,114,4],[130,12,114,10,"newProps"],[130,20,114,18],[130,23,114,21],[130,44,114,31,"props"],[130,49,114,21],[130,51,114,38],[130,56,114,43,"convertProp"],[130,67,114,21],[130,68,114,4],[131,0,115,4],[131,15,115,11,"newProps"],[131,23,115,4],[132,0,116,3],[135,34,118,14,"value"],[135,39],[135,41,118,24,"key"],[135,44],[135,46,118,40],[136,0,119,4],[136,12,119,8],[136,19,119,15,"value"],[136,24,119,8],[136,29,119,25],[136,37,119,8],[136,41,119,37,"BarCodeScanner"],[136,55,119,51],[136,56,119,52,"ConversionTables"],[136,72,119,37],[136,73,119,69,"key"],[136,76,119,37],[136,77,119,4],[136,79,119,75],[137,0,120,6],[137,17,120,13,"BarCodeScanner"],[137,31,120,27],[137,32,120,28,"ConversionTables"],[137,48,120,13],[137,49,120,45,"key"],[137,52,120,13],[137,54,120,50,"value"],[137,59,120,13],[137,60,120,6],[138,0,121,5],[140,0,122,4],[140,15,122,11,"value"],[140,20,122,4],[141,0,123,3],[144,39,55,32,"url"],[144,42],[144,44,55,45,"barCodeTypes"],[144,56],[150,22,56,8,"Array"],[150,27,56,13],[150,28,56,14,"isArray"],[150,35,56,8],[150,36,56,22,"barCodeTypes"],[150,48,56,8],[150,53,56,39,"barCodeTypes"],[150,65,56,51],[150,66,56,52,"length"],[150,72,56,39],[150,77,56,63],[150,78],[155,22,57,12],[155,26,57,16,"Error"],[155,31,57,12],[155,32,57,22],[155,105,57,12],[155,106],[158,22,60,8,"Platform"],[158,44,60,17,"OS"],[158,46,60,8],[158,51,60,24],[158,56],[163,22,61,10,"Array"],[163,27,61,15],[163,28,61,16,"isArray"],[163,35,61,10],[163,36,61,24,"barCodeTypes"],[163,48,61,10],[163,53,61,41],[163,54,61,42,"barCodeTypes"],[163,66,61,54],[163,67,61,55,"includes"],[163,75,61,42],[163,76,61,64,"BarCodeScanner"],[163,90,61,78],[163,91,61,79,"Constants"],[163,100,61,64],[163,101,61,89,"BarCodeType"],[163,112,61,64],[163,113,61,101,"qr"],[163,115,61,42],[163,116],[168,22,63,14],[168,26,63,18,"Error"],[168,31,63,14],[168,32,63,24],[168,88,63,14],[168,89],[171,49,66,13,"ExpoBarCodeScannerModule"],[171,73,66,37],[171,74,66,38,"scanFromURLAsync"],[171,90,66,13],[171,91,66,55,"url"],[171,94,66,13],[171,96,66,60],[171,97,66,61,"BarCodeScanner"],[171,111,66,75],[171,112,66,76,"Constants"],[171,121,66,61],[171,122,66,86,"BarCodeType"],[171,133,66,61],[171,134,66,98,"qr"],[171,136,66,60],[171,137,66,13],[171,138],[174,0,70,10,"effectiveBarCodeTypes"],[174,16,70,10,"effectiveBarCodeTypes"],[174,37],[174,40,70,34,"barCodeTypes"],[174,52,70,46],[174,56,70,50,"Object"],[174,62,70,56],[174,63,70,57,"values"],[174,69,70,50],[174,70,70,64,"ExpoBarCodeScannerModule"],[174,94,70,88],[174,95,70,89,"BarCodeType"],[174,106,70,50],[174,107],[175,49,71,11,"ExpoBarCodeScannerModule"],[175,73,71,35],[175,74,71,36,"scanFromURLAsync"],[175,90,71,11],[175,91,71,53,"url"],[175,94,71,11],[175,96,71,58,"effectiveBarCodeTypes"],[175,117,71,11],[175,118],[187,4,22,44,"React"],[187,19,22,50,"Component"],[187,28],[187,38,28,9,"Constants"],[187,47],[187,50,28,21],[188,0,29,4,"BarCodeType"],[188,4,29,4,"BarCodeType"],[188,15,29,15],[188,17,29,17,"ExpoBarCodeScannerModule"],[188,41,29,41],[188,42,29,42,"BarCodeType"],[188,53,28,21],[189,0,30,4,"Type"],[189,4,30,4,"Type"],[189,8,30,8],[189,10,30,10,"ExpoBarCodeScannerModule"],[189,34,30,34],[189,35,30,35,"Type"],[190,0,28,21],[190,3],[190,12,33,9,"ConversionTables"],[190,28],[190,31,33,28],[191,0,34,4,"type"],[191,4,34,4,"type"],[191,8,34,8],[191,10,34,10,"ExpoBarCodeScannerModule"],[191,34,34,34],[191,35,34,35,"Type"],[192,0,33,28],[192,3],[192,12,37,9,"propTypes"],[192,21],[192,42,38,7,"ViewPropTypes"],[192,68],[193,0,39,4,"onBarCodeScanned"],[193,4,39,4,"onBarCodeScanned"],[193,20,39,20],[193,22,39,22,"PropTypes"],[193,41,39,32,"func"],[193,45],[194,0,40,4,"barCodeTypes"],[194,4,40,4,"barCodeTypes"],[194,16,40,16],[194,18,40,18,"PropTypes"],[194,37,40,28,"array"],[194,42],[195,0,41,4,"type"],[195,4,41,4,"type"],[195,8,41,8],[195,10,41,10,"PropTypes"],[195,29,41,20,"oneOfType"],[195,38,41,10],[195,39,41,30],[195,40,41,31,"PropTypes"],[195,59,41,41,"string"],[195,65,41,30],[195,67,41,49,"PropTypes"],[195,86,41,59,"number"],[195,92,41,30],[195,93,41,10],[196,13,44,9,"defaultProps"],[196,25],[196,28,44,24],[197,0,45,4,"type"],[197,4,45,4,"type"],[197,8,45,8],[197,10,45,10,"ExpoBarCodeScannerModule"],[197,34,45,34],[197,35,45,35,"Type"],[197,39,45,10],[197,40,45,40,"back"],[197,44,44,24],[198,0,46,4,"barCodeTypes"],[198,4,46,4,"barCodeTypes"],[198,16,46,16],[198,18,46,18,"Object"],[198,24,46,24],[198,25,46,25,"values"],[198,31,46,18],[198,32,46,32,"ExpoBarCodeScannerModule"],[198,56,46,56],[198,57,46,57,"BarCodeType"],[198,68,46,18],[199,0,44,24],[199,3],[203,0,126,7],[203,6,126,13,"Constants"],[203,15,126,22],[203,18,126,25,"BarCodeScanner"],[203,32,126,39],[203,33,126,40,"Constants"],[203,42,126,7],[205,0,128,0],[205,6,128,6,"ExpoBarCodeScannerView"],[205,28,128,28],[205,31,128,31],[205,71,128,56],[205,95,128,31],[205,97,128,82,"BarCodeScanner"],[205,111,128,31],[205,112,128,0]]},"type":"js/module"}]}