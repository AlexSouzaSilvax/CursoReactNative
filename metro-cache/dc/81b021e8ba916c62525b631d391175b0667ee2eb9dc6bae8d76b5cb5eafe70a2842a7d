{"dependencies":[{"name":"react","data":{"isAsync":false}},{"name":"./../../../react-transform-hmr/lib/index.js","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"../utils/invariant","data":{"isAsync":false}},{"name":"react-native-gesture-handler","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../../../react-transform-hmr/lib/index.js\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[2], \"react-native\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../utils/invariant\"));\n\n  var _reactNativeGestureHandler = _$$_REQUIRE(_dependencyMap[4], \"react-native-gesture-handler\");\n\n  var _class,\n      _temp,\n      _jsxFileName = \"/home/alex/Documentos/CursoReactNative/node_modules/react-navigation-drawer/dist/views/DrawerLayout.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var _components = {\n    DrawerLayout: {\n      displayName: \"DrawerLayout\"\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/home/alex/Documentos/CursoReactNative/node_modules/react-navigation-drawer/dist/views/DrawerLayout.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var DRAG_TOSS = 0.05;\n  var IDLE = 'Idle';\n  var DRAGGING = 'Dragging';\n  var SETTLING = 'Settling';\n\n  var DrawerLayout = _wrapComponent(\"DrawerLayout\")((_temp = _class = function (_Component) {\n    _inherits(DrawerLayout, _Component);\n\n    function DrawerLayout(_props, context) {\n      var _this;\n\n      _classCallCheck(this, DrawerLayout);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawerLayout).call(this, _props, context));\n\n      _this._updateAnimatedEvent = function (props, state) {\n        var drawerPosition = props.drawerPosition,\n            drawerWidth = props.drawerWidth,\n            drawerType = props.drawerType;\n        var dragXValue = state.dragX,\n            touchXValue = state.touchX,\n            drawerTranslation = state.drawerTranslation,\n            containerWidth = state.containerWidth;\n        var dragX = dragXValue;\n        var touchX = touchXValue;\n\n        if (drawerPosition !== 'left') {\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        }\n\n        var translationX = dragX;\n\n        if (drawerType === 'front') {\n          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n\n          var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n        }\n\n        _this._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        _this._onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], {\n          useNativeDriver: props.useNativeAnimations\n        });\n      };\n\n      _this._handleContainerLayout = function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n\n        _this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      };\n\n      _this._emitStateChanged = function (newState, drawerWillShow) {\n        _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);\n      };\n\n      _this._openingHandlerStateChange = function (_ref2) {\n        var nativeEvent = _ref2.nativeEvent;\n\n        if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {\n          _this._handleRelease(nativeEvent);\n        } else if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {\n          _this._emitStateChanged(DRAGGING, false);\n\n          if (_this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n\n          if (_this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n          }\n        }\n      };\n\n      _this._onTapHandlerStateChange = function (_ref3) {\n        var nativeEvent = _ref3.nativeEvent;\n\n        if (_this.state.drawerShown && nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n          _this.closeDrawer();\n        }\n      };\n\n      _this._handleRelease = function (nativeEvent) {\n        var _this$props = _this.props,\n            drawerWidth = _this$props.drawerWidth,\n            drawerPosition = _this$props.drawerPosition,\n            drawerType = _this$props.drawerType;\n        var _this$state = _this.state,\n            drawerShown = _this$state.drawerShown,\n            containerWidth = _this$state.containerWidth;\n        var dragX = nativeEvent.translationX,\n            velocityX = nativeEvent.velocityX,\n            touchX = nativeEvent.x;\n\n        if (drawerPosition !== 'left') {\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n\n        var gestureStartX = touchX - dragX;\n        var dragOffsetBasedOnStart = 0;\n\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n\n        var startOffsetX = dragX + dragOffsetBasedOnStart + (drawerShown ? drawerWidth : 0);\n        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        var shouldOpen = projOffsetX > drawerWidth / 2;\n\n        if (shouldOpen) {\n          _this._animateDrawer({\n            fromValue: startOffsetX,\n            toValue: drawerWidth,\n            velocity: velocityX\n          });\n        } else {\n          _this._animateDrawer({\n            fromValue: startOffsetX,\n            toValue: 0,\n            velocity: velocityX\n          });\n        }\n      };\n\n      _this._animateDrawer = function (_ref4) {\n        var fromValue = _ref4.fromValue,\n            toValue = _ref4.toValue,\n            velocity = _ref4.velocity;\n\n        _this.state.dragX.setValue(0);\n\n        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n        if (typeof fromValue === 'number') {\n          _this.state.drawerTranslation.setValue(fromValue);\n        }\n\n        var willShow = toValue !== 0;\n\n        _this.setState({\n          drawerShown: willShow\n        });\n\n        _this._emitStateChanged(SETTLING, willShow);\n\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n        }\n\n        _reactNative.Animated.spring(_this.state.drawerTranslation, {\n          velocity: velocity,\n          bounciness: 0,\n          toValue: toValue,\n          useNativeDriver: _this.props.useNativeAnimations\n        }).start(function (_ref5) {\n          var finished = _ref5.finished;\n\n          if (finished) {\n            _this._emitStateChanged(IDLE, willShow);\n\n            if (willShow) {\n              _this.props.onDrawerOpen && _this.props.onDrawerOpen();\n            } else {\n              _this.props.onDrawerClose && _this.props.onDrawerClose();\n            }\n          }\n        });\n      };\n\n      _this.openDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _this._animateDrawer({\n          toValue: _this.props.drawerWidth,\n          velocity: options.velocity ? options.velocity : 0\n        });\n      };\n\n      _this.closeDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _this._animateDrawer({\n          toValue: 0,\n          velocity: options.velocity ? options.velocity : 0\n        });\n      };\n\n      _this._renderOverlay = function () {\n        (0, _invariant.default)(_this._openValue, 'should be set');\n\n        var overlayOpacity = _this._openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 0.7],\n          extrapolate: 'clamp'\n        });\n\n        var dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: _this.props.overlayColor\n        };\n        return _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: _this._onTapHandlerStateChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          }\n        }, _react.default.createElement(_reactNative.Animated.View, {\n          pointerEvents: _this.state.drawerShown ? 'auto' : 'none',\n          style: [styles.overlay, dynamicOverlayStyles],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          }\n        }));\n      };\n\n      _this._renderDrawer = function () {\n        var drawerShown = _this.state.drawerShown;\n        var _this$props2 = _this.props,\n            drawerBackgroundColor = _this$props2.drawerBackgroundColor,\n            drawerWidth = _this$props2.drawerWidth,\n            drawerPosition = _this$props2.drawerPosition,\n            drawerType = _this$props2.drawerType,\n            contentContainerStyle = _this$props2.contentContainerStyle;\n        var fromLeft = drawerPosition === 'left';\n        var drawerSlide = drawerType !== 'back';\n        var containerSlide = drawerType !== 'front';\n        var dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        var openValue = _this._openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        var containerStyles;\n\n        if (containerSlide) {\n          var containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n\n        var drawerTranslateX = 0;\n\n        if (drawerSlide) {\n          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        }\n\n        var drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: (_reactNative.I18nManager.isRTL ? !fromLeft : fromLeft) ? 'row' : 'row-reverse'\n        };\n        return _react.default.createElement(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: _this._handleContainerLayout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          }\n        }, _react.default.createElement(_reactNative.Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          }\n        }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), _react.default.createElement(_reactNative.Animated.View, {\n          pointerEvents: \"box-none\",\n          accessibilityViewIsModal: drawerShown,\n          style: [styles.drawerContainer, drawerStyles],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: [styles.drawer, dynamicDrawerStyles],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328\n          }\n        }, _this.props.renderNavigationView(_this._openValue))));\n      };\n\n      var _dragX = new _reactNative.Animated.Value(0);\n\n      var _touchX = new _reactNative.Animated.Value(0);\n\n      var _drawerTranslation = new _reactNative.Animated.Value(0);\n\n      _this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        drawerShown: false,\n        containerWidth: 0\n      };\n\n      _this._updateAnimatedEvent(_props, _this.state);\n\n      return _this;\n    }\n\n    _createClass(DrawerLayout, [{\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n          this._updateAnimatedEvent(props, state);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$state2 = this.state,\n            drawerShown = _this$state2.drawerShown,\n            containerWidth = _this$state2.containerWidth;\n        var _this$props3 = this.props,\n            drawerPosition = _this$props3.drawerPosition,\n            drawerType = _this$props3.drawerType,\n            drawerLockMode = _this$props3.drawerLockMode,\n            edgeWidth = _this$props3.edgeWidth,\n            minSwipeDistance = _this$props3.minSwipeDistance;\n        var fromLeft = drawerPosition === 'left';\n        var gestureOrientation = (fromLeft ? 1 : -1) * (drawerShown ? -1 : 1);\n        var hitSlop = fromLeft ? {\n          right: drawerShown ? 0 : edgeWidth - containerWidth\n        } : {\n          left: drawerShown ? 0 : edgeWidth - containerWidth\n        };\n        return _react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, {\n          hitSlop: hitSlop,\n          minOffsetX: gestureOrientation * minSwipeDistance,\n          maxDeltaY: 15,\n          onGestureEvent: this._onGestureEvent,\n          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n          onHandlerStateChange: this._openingHandlerStateChange,\n          ref: this.props.gestureRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358\n          }\n        }, this._renderDrawer());\n      }\n    }]);\n\n    return DrawerLayout;\n  }(_react.Component), _class.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'black',\n    drawerLockMode: 'unlocked'\n  }, _class.positions = {\n    Left: 'left',\n    Right: 'right'\n  }, _temp));\n\n  var _default2 = DrawerLayout;\n  exports.default = _default2;\n\n  var styles = _reactNative.StyleSheet.create({\n    drawer: {\n      flex: 0\n    },\n    drawerContainer: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1001,\n      flexDirection: 'row'\n    }),\n    containerInFront: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1002\n    }),\n    containerOnBack: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1000\n    })\n  });\n});","map":[[7,0,15,0],[11,0,16,0],[13,0,17,0],[15,0,19,0],[64,0,21,0],[64,6,21,6,"DRAG_TOSS"],[64,15,21,15],[64,18,21,18],[64,22,21,0],[65,0,23,0],[65,6,23,6,"IDLE"],[65,10,23,10],[65,13,23,13],[65,19,23,0],[66,0,24,0],[66,6,24,6,"DRAGGING"],[66,14,24,14],[66,17,24,17],[66,27,24,0],[67,0,25,0],[67,6,25,6,"SETTLING"],[67,14,25,14],[67,17,25,17],[67,27,25,0],[72,0,45,2],[72,26,45,14,"props"],[72,32,45,2],[72,34,45,21,"context"],[72,41,45,2],[72,43,45,30],[73,0,45,30],[75,0,45,30],[77,0,46,4],[77,88,46,10,"props"],[77,94,46,4],[77,96,46,17,"context"],[77,103,46,4],[79,0,45,30],[79,12,69,2,"_updateAnimatedEvent"],[79,32,45,30],[79,35,69,25],[79,45,69,26,"props"],[79,50,69,25],[79,52,69,33,"state"],[79,57,69,25],[79,59,69,43],[80,0,69,43],[80,12,71,12,"drawerPosition"],[80,26,69,43],[80,29,71,56,"props"],[80,34,69,43],[80,35,71,12,"drawerPosition"],[80,49,69,43],[81,0,69,43],[81,12,71,28,"drawerWidth"],[81,23,69,43],[81,26,71,56,"props"],[81,31,69,43],[81,32,71,28,"drawerWidth"],[81,43,69,43],[82,0,69,43],[82,12,71,41,"drawerType"],[82,22,69,43],[82,25,71,56,"props"],[82,30,69,43],[82,31,71,41,"drawerType"],[82,41,69,43],[83,0,69,43],[83,12,73,13,"dragXValue"],[83,22,69,43],[83,25,77,8,"state"],[83,30,69,43],[83,31,73,6,"dragX"],[83,36,69,43],[84,0,69,43],[84,12,74,14,"touchXValue"],[84,23,69,43],[84,26,77,8,"state"],[84,31,69,43],[84,32,74,6,"touchX"],[84,38,69,43],[85,0,69,43],[85,12,75,6,"drawerTranslation"],[85,29,69,43],[85,32,77,8,"state"],[85,37,69,43],[85,38,75,6,"drawerTranslation"],[85,55,69,43],[86,0,69,43],[86,12,76,6,"containerWidth"],[86,26,69,43],[86,29,77,8,"state"],[86,34,69,43],[86,35,76,6,"containerWidth"],[86,49,69,43],[87,0,79,4],[87,12,79,8,"dragX"],[87,17,79,13],[87,20,79,16,"dragXValue"],[87,30,79,4],[88,0,80,4],[88,12,80,8,"touchX"],[88,18,80,14],[88,21,80,17,"touchXValue"],[88,32,80,4],[90,0,82,4],[90,12,82,8,"drawerPosition"],[90,26,82,22],[90,31,82,27],[90,37,82,4],[90,39,82,35],[91,0,90,6,"dragX"],[91,10,90,6,"dragX"],[91,15,90,11],[91,18,90,14,"Animated"],[91,40,90,23,"multiply"],[91,48,90,14],[91,49,90,32],[91,53,90,36,"Animated"],[91,75,90,45,"Value"],[91,80,90,32],[91,81,90,51],[91,82,90,52],[91,83,90,32],[91,84,90,14],[91,86,90,56,"dragXValue"],[91,96,90,14],[91,97,90,6],[92,0,91,6,"touchX"],[92,10,91,6,"touchX"],[92,16,91,12],[92,19,91,15,"Animated"],[92,41,91,24,"add"],[92,44,91,15],[92,45,91,28],[92,49,91,32,"Animated"],[92,71,91,41,"Value"],[92,76,91,28],[92,77,91,47,"containerWidth"],[92,91,91,28],[92,92,91,15],[92,94,91,64,"Animated"],[92,116,91,73,"multiply"],[92,124,91,64],[92,125,91,82],[92,129,91,86,"Animated"],[92,151,91,95,"Value"],[92,156,91,82],[92,157,91,101],[92,158,91,102],[92,159,91,82],[92,160,91,64],[92,162,91,106,"touchXValue"],[92,173,91,64],[92,174,91,15],[92,175,91,6],[93,0,92,6,"touchXValue"],[93,10,92,6,"touchXValue"],[93,21,92,17],[93,22,92,18,"setValue"],[93,30,92,6],[93,31,92,27,"containerWidth"],[93,45,92,6],[94,0,93,5],[94,9,82,4],[94,15,93,11],[95,0,94,6,"touchXValue"],[95,10,94,6,"touchXValue"],[95,21,94,17],[95,22,94,18,"setValue"],[95,30,94,6],[95,31,94,27],[95,32,94,6],[96,0,95,5],[98,0,121,4],[98,12,121,8,"translationX"],[98,24,121,20],[98,27,121,23,"dragX"],[98,32,121,4],[100,0,122,4],[100,12,122,8,"drawerType"],[100,22,122,18],[100,27,122,23],[100,34,122,4],[100,36,122,32],[101,0,123,6],[101,14,123,12,"startPositionX"],[101,28,123,26],[101,31,123,29,"Animated"],[101,53,123,38,"add"],[101,56,123,29],[101,57,123,42,"touchX"],[101,63,123,29],[101,65,123,50,"Animated"],[101,87,123,59,"multiply"],[101,95,123,50],[101,96,123,68],[101,100,123,72,"Animated"],[101,122,123,81,"Value"],[101,127,123,68],[101,128,123,87],[101,129,123,88],[101,130,123,68],[101,131,123,50],[101,133,123,92,"dragX"],[101,138,123,50],[101,139,123,29],[101,140,123,6],[103,0,125,6],[103,14,125,12,"dragOffsetFromOnStartPosition"],[103,43,125,41],[103,46,125,44,"startPositionX"],[103,60,125,58],[103,61,125,59,"interpolate"],[103,72,125,44],[103,73,125,71],[104,0,126,8,"inputRange"],[104,12,126,8,"inputRange"],[104,22,126,18],[104,24,126,20],[104,25,126,21,"drawerWidth"],[104,36,126,32],[104,39,126,35],[104,40,126,20],[104,42,126,38,"drawerWidth"],[104,53,126,20],[104,55,126,51,"drawerWidth"],[104,66,126,62],[104,69,126,65],[104,70,126,20],[104,71,125,71],[105,0,127,8,"outputRange"],[105,12,127,8,"outputRange"],[105,23,127,19],[105,25,127,21],[105,26,127,22],[105,27,127,21],[105,29,127,25],[105,30,127,21],[105,32,127,28],[105,33,127,21],[106,0,125,71],[106,11,125,44],[106,12,125,6],[107,0,129,6,"translationX"],[107,10,129,6,"translationX"],[107,22,129,18],[107,25,129,21,"Animated"],[107,47,129,30,"add"],[107,50,129,21],[107,51,129,34,"dragX"],[107,56,129,21],[107,58,129,41,"dragOffsetFromOnStartPosition"],[107,87,129,21],[107,88,129,6],[108,0,130,5],[110,0,132,4],[110,14,132,9,"_openValue"],[110,24,132,4],[110,27,132,22,"Animated"],[110,49,132,31,"add"],[110,52,132,22],[110,53,132,35,"translationX"],[110,65,132,22],[110,67,132,49,"drawerTranslation"],[110,84,132,22],[110,86,132,68,"interpolate"],[110,97,132,22],[110,98,132,80],[111,0,133,6,"inputRange"],[111,10,133,6,"inputRange"],[111,20,133,16],[111,22,133,18],[111,23,133,19],[111,24,133,18],[111,26,133,22,"drawerWidth"],[111,37,133,18],[111,38,132,80],[112,0,134,6,"outputRange"],[112,10,134,6,"outputRange"],[112,21,134,17],[112,23,134,19],[112,24,134,20],[112,25,134,19],[112,27,134,23],[112,28,134,19],[112,29,132,80],[113,0,135,6,"extrapolate"],[113,10,135,6,"extrapolate"],[113,21,135,17],[113,23,135,19],[114,0,132,80],[114,9,132,22],[114,10,132,4],[115,0,138,4],[115,14,138,9,"_onGestureEvent"],[115,29,138,4],[115,32,138,27,"Animated"],[115,54,138,36,"event"],[115,59,138,27],[115,60,138,42],[115,61,138,43],[116,0,138,45,"nativeEvent"],[116,10,138,45,"nativeEvent"],[116,21,138,56],[116,23,138,58],[117,0,138,60,"translationX"],[117,12,138,60,"translationX"],[117,24,138,72],[117,26,138,74,"dragXValue"],[117,36,138,58],[118,0,138,86,"x"],[118,12,138,86,"x"],[118,13,138,87],[118,15,138,89,"touchXValue"],[119,0,138,58],[120,0,138,43],[120,9,138,42],[120,10,138,27],[120,12,138,107],[121,0,138,109,"useNativeDriver"],[121,10,138,109,"useNativeDriver"],[121,25,138,124],[121,27,138,126,"props"],[121,32,138,131],[121,33,138,132,"useNativeAnimations"],[122,0,138,107],[122,9,138,27],[122,10,138,4],[123,0,139,3],[123,7,45,30],[125,0,45,30],[125,12,141,2,"_handleContainerLayout"],[125,34,45,30],[125,37,141,27],[125,53,141,48],[126,0,141,48],[126,12,141,30,"nativeEvent"],[126,23,141,48],[126,31,141,30,"nativeEvent"],[126,42,141,48],[128,0,142,4],[128,14,142,9,"setState"],[128,22,142,4],[128,23,142,18],[129,0,142,20,"containerWidth"],[129,10,142,20,"containerWidth"],[129,24,142,34],[129,26,142,36,"nativeEvent"],[129,37,142,47],[129,38,142,48,"layout"],[129,44,142,36],[129,45,142,55,"width"],[130,0,142,18],[130,9,142,4],[131,0,143,3],[131,7,45,30],[133,0,45,30],[133,12,145,2,"_emitStateChanged"],[133,29,45,30],[133,32,145,22],[133,42,145,23,"newState"],[133,50,145,22],[133,52,145,33,"drawerWillShow"],[133,66,145,22],[133,68,145,52],[134,0,146,4],[134,14,146,9,"props"],[134,19,146,4],[134,20,146,15,"onDrawerStateChanged"],[134,40,146,4],[134,44,146,39],[134,50,146,44,"props"],[134,55,146,39],[134,56,146,50,"onDrawerStateChanged"],[134,76,146,39],[134,77,146,71,"newState"],[134,85,146,39],[134,87,146,81,"drawerWillShow"],[134,101,146,39],[134,102,146,4],[135,0,147,3],[135,7,45,30],[137,0,45,30],[137,12,149,2,"_openingHandlerStateChange"],[137,38,45,30],[137,41,149,31],[137,58,149,52],[138,0,149,52],[138,12,149,34,"nativeEvent"],[138,23,149,52],[138,32,149,34,"nativeEvent"],[138,43,149,52],[140,0,150,4],[140,12,150,8,"nativeEvent"],[140,23,150,19],[140,24,150,20,"oldState"],[140,32,150,8],[140,37,150,33,"State"],[140,70,150,39,"ACTIVE"],[140,76,150,4],[140,78,150,47],[141,0,151,6],[141,16,151,11,"_handleRelease"],[141,30,151,6],[141,31,151,26,"nativeEvent"],[141,42,151,6],[142,0,152,5],[142,9,150,4],[142,15,152,11],[142,19,152,15,"nativeEvent"],[142,30,152,26],[142,31,152,27,"state"],[142,36,152,15],[142,41,152,37,"State"],[142,74,152,43,"ACTIVE"],[142,80,152,11],[142,82,152,51],[143,0,153,6],[143,16,153,11,"_emitStateChanged"],[143,33,153,6],[143,34,153,29,"DRAGGING"],[143,42,153,6],[143,44,153,39],[143,49,153,6],[145,0,154,6],[145,14,154,10],[145,20,154,15,"props"],[145,25,154,10],[145,26,154,21,"keyboardDismissMode"],[145,45,154,10],[145,50,154,45],[145,59,154,6],[145,61,154,56],[146,0,155,8,"Keyboard"],[146,34,155,17,"dismiss"],[146,41,155,8],[147,0,156,7],[149,0,157,6],[149,14,157,10],[149,20,157,15,"props"],[149,25,157,10],[149,26,157,21,"hideStatusBar"],[149,39,157,6],[149,41,157,36],[150,0,158,8,"StatusBar"],[150,35,158,18,"setHidden"],[150,44,158,8],[150,45,158,28],[150,49,158,8],[150,51,158,34],[150,57,158,39,"props"],[150,62,158,34],[150,63,158,45,"statusBarAnimation"],[150,81,158,34],[150,85,158,67],[150,92,158,8],[151,0,159,7],[152,0,160,5],[153,0,161,3],[153,7,45,30],[155,0,45,30],[155,12,163,2,"_onTapHandlerStateChange"],[155,36,45,30],[155,39,163,29],[155,56,163,50],[156,0,163,50],[156,12,163,32,"nativeEvent"],[156,23,163,50],[156,32,163,32,"nativeEvent"],[156,43,163,50],[158,0,164,4],[158,12,164,8],[158,18,164,13,"state"],[158,23,164,8],[158,24,164,19,"drawerShown"],[158,35,164,8],[158,39,164,34,"nativeEvent"],[158,50,164,45],[158,51,164,46,"oldState"],[158,59,164,34],[158,64,164,59,"State"],[158,97,164,65,"ACTIVE"],[158,103,164,8],[158,107,164,75],[158,113,164,80,"props"],[158,118,164,75],[158,119,164,86,"drawerLockMode"],[158,133,164,75],[158,138,164,105],[158,151,164,4],[158,153,164,120],[159,0,165,6],[159,16,165,11,"closeDrawer"],[159,27,165,6],[160,0,166,5],[161,0,167,3],[161,7,45,30],[163,0,45,30],[163,12,169,2,"_handleRelease"],[163,26,45,30],[163,29,169,19],[163,39,169,19,"nativeEvent"],[163,50,169,30],[163,52,169,34],[164,0,169,34],[164,26,170,56],[164,32,170,61,"props"],[164,37,169,34],[165,0,169,34],[165,12,170,12,"drawerWidth"],[165,23,169,34],[165,38,170,12,"drawerWidth"],[165,49,169,34],[166,0,169,34],[166,12,170,25,"drawerPosition"],[166,26,169,34],[166,41,170,25,"drawerPosition"],[166,55,169,34],[167,0,169,34],[167,12,170,41,"drawerType"],[167,22,169,34],[167,37,170,41,"drawerType"],[167,47,169,34],[168,0,169,34],[168,26,171,44],[168,32,171,49,"state"],[168,37,169,34],[169,0,169,34],[169,12,171,12,"drawerShown"],[169,23,169,34],[169,38,171,12,"drawerShown"],[169,49,169,34],[170,0,169,34],[170,12,171,25,"containerWidth"],[170,26,169,34],[170,41,171,25,"containerWidth"],[170,55,169,34],[171,0,169,34],[171,12,172,24,"dragX"],[171,17,169,34],[171,20,172,56,"nativeEvent"],[171,31,169,34],[171,32,172,10,"translationX"],[171,44,169,34],[172,0,169,34],[172,12,172,31,"velocityX"],[172,21,169,34],[172,24,172,56,"nativeEvent"],[172,35,169,34],[172,36,172,31,"velocityX"],[172,45,169,34],[173,0,169,34],[173,12,172,45,"touchX"],[173,18,169,34],[173,21,172,56,"nativeEvent"],[173,32,169,34],[173,33,172,42,"x"],[173,34,169,34],[175,0,174,4],[175,12,174,8,"drawerPosition"],[175,26,174,22],[175,31,174,27],[175,37,174,4],[175,39,174,35],[176,0,177,6,"dragX"],[176,10,177,6,"dragX"],[176,15,177,11],[176,18,177,14],[176,19,177,15,"dragX"],[176,24,177,6],[177,0,178,6,"touchX"],[177,10,178,6,"touchX"],[177,16,178,12],[177,19,178,15,"containerWidth"],[177,33,178,29],[177,36,178,32,"touchX"],[177,42,178,6],[178,0,179,6,"velocityX"],[178,10,179,6,"velocityX"],[178,19,179,15],[178,22,179,18],[178,23,179,19,"velocityX"],[178,32,179,6],[179,0,180,5],[181,0,182,4],[181,12,182,10,"gestureStartX"],[181,25,182,23],[181,28,182,26,"touchX"],[181,34,182,32],[181,37,182,35,"dragX"],[181,42,182,4],[182,0,183,4],[182,12,183,8,"dragOffsetBasedOnStart"],[182,34,183,30],[182,37,183,33],[182,38,183,4],[184,0,185,4],[184,12,185,8,"drawerType"],[184,22,185,18],[184,27,185,23],[184,34,185,4],[184,36,185,32],[185,0,186,6,"dragOffsetBasedOnStart"],[185,10,186,6,"dragOffsetBasedOnStart"],[185,32,186,28],[185,35,186,31,"gestureStartX"],[185,48,186,44],[185,51,186,47,"drawerWidth"],[185,62,186,31],[185,65,186,61,"gestureStartX"],[185,78,186,74],[185,81,186,77,"drawerWidth"],[185,92,186,31],[185,95,186,91],[185,96,186,6],[186,0,187,5],[188,0,189,4],[188,12,189,10,"startOffsetX"],[188,24,189,22],[188,27,189,25,"dragX"],[188,32,189,30],[188,35,189,33,"dragOffsetBasedOnStart"],[188,57,189,25],[188,61,189,59,"drawerShown"],[188,72,189,70],[188,75,189,73,"drawerWidth"],[188,86,189,70],[188,89,189,87],[188,90,189,25],[188,91,189,4],[189,0,190,4],[189,12,190,10,"projOffsetX"],[189,23,190,21],[189,26,190,24,"startOffsetX"],[189,38,190,36],[189,41,190,39,"DRAG_TOSS"],[189,50,190,48],[189,53,190,51,"velocityX"],[189,62,190,4],[190,0,192,4],[190,12,192,10,"shouldOpen"],[190,22,192,20],[190,25,192,23,"projOffsetX"],[190,36,192,34],[190,39,192,37,"drawerWidth"],[190,50,192,48],[190,53,192,51],[190,54,192,4],[192,0,194,4],[192,12,194,8,"shouldOpen"],[192,22,194,4],[192,24,194,20],[193,0,195,6],[193,16,195,11,"_animateDrawer"],[193,30,195,6],[193,31,195,26],[194,0,196,8,"fromValue"],[194,12,196,8,"fromValue"],[194,21,196,17],[194,23,196,19,"startOffsetX"],[194,35,195,26],[195,0,197,8,"toValue"],[195,12,197,8,"toValue"],[195,19,197,15],[195,21,197,17,"drawerWidth"],[195,32,195,26],[196,0,198,8,"velocity"],[196,12,198,8,"velocity"],[196,20,198,16],[196,22,198,18,"velocityX"],[197,0,195,26],[197,11,195,6],[198,0,200,5],[198,9,194,4],[198,15,200,11],[199,0,201,6],[199,16,201,11,"_animateDrawer"],[199,30,201,6],[199,31,201,26],[200,0,202,8,"fromValue"],[200,12,202,8,"fromValue"],[200,21,202,17],[200,23,202,19,"startOffsetX"],[200,35,201,26],[201,0,203,8,"toValue"],[201,12,203,8,"toValue"],[201,19,203,15],[201,21,203,17],[201,22,201,26],[202,0,204,8,"velocity"],[202,12,204,8,"velocity"],[202,20,204,16],[202,22,204,18,"velocityX"],[203,0,201,26],[203,11,201,6],[204,0,206,5],[205,0,207,3],[205,7,45,30],[207,0,45,30],[207,12,209,2,"_animateDrawer"],[207,26,45,30],[207,29,209,19],[207,46,213,8],[208,0,213,8],[208,12,210,4,"fromValue"],[208,21,213,8],[208,30,210,4,"fromValue"],[208,39,213,8],[209,0,213,8],[209,12,211,4,"toValue"],[209,19,213,8],[209,28,211,4,"toValue"],[209,35,213,8],[210,0,213,8],[210,12,212,4,"velocity"],[210,20,213,8],[210,29,212,4,"velocity"],[210,37,213,8],[212,0,214,4],[212,14,214,9,"state"],[212,19,214,4],[212,20,214,15,"dragX"],[212,25,214,4],[212,26,214,21,"setValue"],[212,34,214,4],[212,35,214,30],[212,36,214,4],[214,0,215,4],[214,14,215,9,"state"],[214,19,215,4],[214,20,215,15,"touchX"],[214,26,215,4],[214,27,215,22,"setValue"],[214,35,215,4],[214,36,215,31],[214,42,215,36,"props"],[214,47,215,31],[214,48,215,42,"drawerPosition"],[214,62,215,31],[214,67,215,61],[214,73,215,31],[214,76,215,70],[214,77,215,31],[214,80,215,74],[214,86,215,79,"state"],[214,91,215,74],[214,92,215,85,"containerWidth"],[214,106,215,4],[216,0,217,4],[216,12,217,8],[216,19,217,15,"fromValue"],[216,28,217,8],[216,33,217,29],[216,41,217,4],[216,43,217,39],[217,0,218,6],[217,16,218,11,"state"],[217,21,218,6],[217,22,218,17,"drawerTranslation"],[217,39,218,6],[217,40,218,35,"setValue"],[217,48,218,6],[217,49,218,44,"fromValue"],[217,58,218,6],[218,0,219,5],[220,0,221,4],[220,12,221,10,"willShow"],[220,20,221,18],[220,23,221,21,"toValue"],[220,30,221,28],[220,35,221,33],[220,36,221,4],[222,0,222,4],[222,14,222,9,"setState"],[222,22,222,4],[222,23,222,18],[223,0,222,20,"drawerShown"],[223,10,222,20,"drawerShown"],[223,21,222,31],[223,23,222,33,"willShow"],[224,0,222,18],[224,9,222,4],[226,0,223,4],[226,14,223,9,"_emitStateChanged"],[226,31,223,4],[226,32,223,27,"SETTLING"],[226,40,223,4],[226,42,223,37,"willShow"],[226,50,223,4],[228,0,224,4],[228,12,224,8],[228,18,224,13,"props"],[228,23,224,8],[228,24,224,19,"hideStatusBar"],[228,37,224,4],[228,39,224,34],[229,0,225,6,"StatusBar"],[229,33,225,16,"setHidden"],[229,42,225,6],[229,43,225,26,"willShow"],[229,51,225,6],[229,53,225,36],[229,59,225,41,"props"],[229,64,225,36],[229,65,225,47,"statusBarAnimation"],[229,83,225,36],[229,87,225,69],[229,94,225,6],[230,0,226,5],[232,0,227,4,"Animated"],[232,30,227,13,"spring"],[232,36,227,4],[232,37,227,20],[232,43,227,25,"state"],[232,48,227,20],[232,49,227,31,"drawerTranslation"],[232,66,227,4],[232,68,227,50],[233,0,228,6,"velocity"],[233,10,228,6,"velocity"],[233,18,228,14],[233,20,228,6,"velocity"],[233,28,227,50],[234,0,229,6,"bounciness"],[234,10,229,6,"bounciness"],[234,20,229,16],[234,22,229,18],[234,23,227,50],[235,0,230,6,"toValue"],[235,10,230,6,"toValue"],[235,17,230,13],[235,19,230,6,"toValue"],[235,26,227,50],[236,0,231,6,"useNativeDriver"],[236,10,231,6,"useNativeDriver"],[236,25,231,21],[236,27,231,23],[236,33,231,28,"props"],[236,38,231,23],[236,39,231,34,"useNativeAnimations"],[237,0,227,50],[237,9,227,4],[237,11,232,7,"start"],[237,16,227,4],[237,17,232,13],[237,34,232,31],[238,0,232,31],[238,14,232,16,"finished"],[238,22,232,31],[238,31,232,16,"finished"],[238,39,232,31],[240,0,233,6],[240,14,233,10,"finished"],[240,22,233,6],[240,24,233,20],[241,0,234,8],[241,18,234,13,"_emitStateChanged"],[241,35,234,8],[241,36,234,31,"IDLE"],[241,40,234,8],[241,42,234,37,"willShow"],[241,50,234,8],[243,0,235,8],[243,16,235,12,"willShow"],[243,24,235,8],[243,26,235,22],[244,0,236,10],[244,20,236,15,"props"],[244,25,236,10],[244,26,236,21,"onDrawerOpen"],[244,38,236,10],[244,42,236,37],[244,48,236,42,"props"],[244,53,236,37],[244,54,236,48,"onDrawerOpen"],[244,66,236,37],[244,68,236,10],[245,0,237,9],[245,13,235,8],[245,19,237,15],[246,0,238,10],[246,20,238,15,"props"],[246,25,238,10],[246,26,238,21,"onDrawerClose"],[246,39,238,10],[246,43,238,38],[246,49,238,43,"props"],[246,54,238,38],[246,55,238,49,"onDrawerClose"],[246,68,238,38],[246,70,238,10],[247,0,239,9],[248,0,240,7],[249,0,241,5],[249,9,227,4],[250,0,242,3],[250,7,45,30],[252,0,45,30],[252,12,244,2,"openDrawer"],[252,22,45,30],[252,25,244,15],[252,37,244,33],[253,0,244,33],[253,12,244,16,"options"],[253,19,244,33],[253,90,244,26],[253,92,244,33],[255,0,245,4],[255,14,245,9,"_animateDrawer"],[255,28,245,4],[255,29,245,24],[256,0,246,6,"toValue"],[256,10,246,6,"toValue"],[256,17,246,13],[256,19,246,15],[256,25,246,20,"props"],[256,30,246,15],[256,31,246,26,"drawerWidth"],[256,42,245,24],[257,0,247,6,"velocity"],[257,10,247,6,"velocity"],[257,18,247,14],[257,20,247,16,"options"],[257,27,247,23],[257,28,247,24,"velocity"],[257,36,247,16],[257,39,247,35,"options"],[257,46,247,42],[257,47,247,43,"velocity"],[257,55,247,16],[257,58,247,54],[258,0,245,24],[258,9,245,4],[259,0,249,3],[259,7,45,30],[261,0,45,30],[261,12,251,2,"closeDrawer"],[261,23,45,30],[261,26,251,16],[261,38,251,34],[262,0,251,34],[262,12,251,17,"options"],[262,19,251,34],[262,90,251,27],[262,92,251,34],[264,0,252,4],[264,14,252,9,"_animateDrawer"],[264,28,252,4],[264,29,252,24],[265,0,253,6,"toValue"],[265,10,253,6,"toValue"],[265,17,253,13],[265,19,253,15],[265,20,252,24],[266,0,254,6,"velocity"],[266,10,254,6,"velocity"],[266,18,254,14],[266,20,254,16,"options"],[266,27,254,23],[266,28,254,24,"velocity"],[266,36,254,16],[266,39,254,35,"options"],[266,46,254,42],[266,47,254,43,"velocity"],[266,55,254,16],[266,58,254,54],[267,0,252,24],[267,9,252,4],[268,0,256,3],[268,7,45,30],[270,0,45,30],[270,12,258,2,"_renderOverlay"],[270,26,45,30],[270,29,258,19],[270,41,258,25],[271,0,260,4],[271,32,260,14],[271,38,260,19,"_openValue"],[271,48,260,4],[271,50,260,31],[271,65,260,4],[273,0,261,4],[273,12,261,10,"overlayOpacity"],[273,26,261,24],[273,29,261,27],[273,35,261,32,"_openValue"],[273,45,261,27],[273,46,261,43,"interpolate"],[273,57,261,27],[273,58,261,55],[274,0,262,6,"inputRange"],[274,10,262,6,"inputRange"],[274,20,262,16],[274,22,262,18],[274,23,262,19],[274,24,262,18],[274,26,262,22],[274,27,262,18],[274,28,261,55],[275,0,263,6,"outputRange"],[275,10,263,6,"outputRange"],[275,21,263,17],[275,23,263,19],[275,24,263,20],[275,25,263,19],[275,27,263,23],[275,30,263,19],[275,31,261,55],[276,0,264,6,"extrapolate"],[276,10,264,6,"extrapolate"],[276,21,264,17],[276,23,264,19],[277,0,261,55],[277,9,261,27],[277,10,261,4],[279,0,266,4],[279,12,266,10,"dynamicOverlayStyles"],[279,32,266,30],[279,35,266,33],[280,0,267,6,"opacity"],[280,10,267,6,"opacity"],[280,17,267,13],[280,19,267,15,"overlayOpacity"],[280,33,266,33],[281,0,268,6,"backgroundColor"],[281,10,268,6,"backgroundColor"],[281,25,268,21],[281,27,268,23],[281,33,268,28,"props"],[281,38,268,23],[281,39,268,34,"overlayColor"],[282,0,266,33],[282,9,266,4],[283,0,270,4],[283,15,270,11],[283,44,270,12],[283,88,270,11],[284,0,270,30],[284,10,270,30],[284,30,270,50],[284,32,270,52],[284,38,270,57,"_onTapHandlerStateChange"],[284,62,270,11],[285,0,270,11],[286,0,270,11],[287,0,270,11],[288,0,270,11],[289,0,270,11],[289,11,271,8],[289,40,271,9],[289,61,271,8],[289,62,271,18],[289,66,271,8],[290,0,271,23],[290,10,271,23],[290,23,271,36],[290,25,271,38],[290,31,271,43,"state"],[290,36,271,38],[290,37,271,49,"drawerShown"],[290,48,271,38],[290,51,271,63],[290,57,271,38],[290,60,271,72],[290,66,271,8],[291,0,271,80],[291,10,271,80],[291,15,271,85],[291,17,271,87],[291,18,271,88,"styles"],[291,24,271,94],[291,25,271,95,"overlay"],[291,32,271,87],[291,34,271,104,"dynamicOverlayStyles"],[291,54,271,87],[291,55,271,8],[292,0,271,8],[293,0,271,8],[294,0,271,8],[295,0,271,8],[296,0,271,8],[296,10,270,11],[296,11,270,4],[297,0,273,3],[297,7,45,30],[299,0,45,30],[299,12,275,2,"_renderDrawer"],[299,25,45,30],[299,28,275,18],[299,40,275,24],[300,0,275,24],[300,12,276,12,"drawerShown"],[300,23,275,24],[300,26,276,28],[300,32,276,33,"state"],[300,37,275,24],[300,38,276,12,"drawerShown"],[300,49,275,24],[301,0,275,24],[301,27,283,8],[301,33,283,13,"props"],[301,38,275,24],[302,0,275,24],[302,12,278,6,"drawerBackgroundColor"],[302,33,275,24],[302,49,278,6,"drawerBackgroundColor"],[302,70,275,24],[303,0,275,24],[303,12,279,6,"drawerWidth"],[303,23,275,24],[303,39,279,6,"drawerWidth"],[303,50,275,24],[304,0,275,24],[304,12,280,6,"drawerPosition"],[304,26,275,24],[304,42,280,6,"drawerPosition"],[304,56,275,24],[305,0,275,24],[305,12,281,6,"drawerType"],[305,22,275,24],[305,38,281,6,"drawerType"],[305,48,275,24],[306,0,275,24],[306,12,282,6,"contentContainerStyle"],[306,33,275,24],[306,49,282,6,"contentContainerStyle"],[306,70,275,24],[307,0,285,4],[307,12,285,10,"fromLeft"],[307,20,285,18],[307,23,285,21,"drawerPosition"],[307,37,285,35],[307,42,285,40],[307,48,285,4],[308,0,286,4],[308,12,286,10,"drawerSlide"],[308,23,286,21],[308,26,286,24,"drawerType"],[308,36,286,34],[308,41,286,39],[308,47,286,4],[309,0,287,4],[309,12,287,10,"containerSlide"],[309,26,287,24],[309,29,287,27,"drawerType"],[309,39,287,37],[309,44,287,42],[309,51,287,4],[310,0,289,4],[310,12,289,10,"dynamicDrawerStyles"],[310,31,289,29],[310,34,289,32],[311,0,290,6,"backgroundColor"],[311,10,290,6,"backgroundColor"],[311,25,290,21],[311,27,290,23,"drawerBackgroundColor"],[311,48,289,32],[312,0,291,6,"width"],[312,10,291,6,"width"],[312,15,291,11],[312,17,291,13,"drawerWidth"],[313,0,289,32],[313,9,289,4],[314,0,293,4],[314,12,293,10,"openValue"],[314,21,293,19],[314,24,293,22],[314,30,293,27,"_openValue"],[314,40,293,4],[315,0,294,4],[315,32,294,14,"openValue"],[315,41,294,4],[315,43,294,25],[315,58,294,4],[316,0,296,4],[316,12,296,8,"containerStyles"],[316,27,296,4],[318,0,297,4],[318,12,297,8,"containerSlide"],[318,26,297,4],[318,28,297,24],[319,0,298,6],[319,14,298,12,"containerTranslateX"],[319,33,298,31],[319,36,298,34,"openValue"],[319,45,298,43],[319,46,298,44,"interpolate"],[319,57,298,34],[319,58,298,56],[320,0,299,8,"inputRange"],[320,12,299,8,"inputRange"],[320,22,299,18],[320,24,299,20],[320,25,299,21],[320,26,299,20],[320,28,299,24],[320,29,299,20],[320,30,298,56],[321,0,300,8,"outputRange"],[321,12,300,8,"outputRange"],[321,23,300,19],[321,25,300,21,"fromLeft"],[321,33,300,29],[321,36,300,32],[321,37,300,33],[321,38,300,32],[321,40,300,36,"drawerWidth"],[321,51,300,32],[321,52,300,29],[321,55,300,51],[321,56,300,52],[321,57,300,51],[321,59,300,55],[321,60,300,56,"drawerWidth"],[321,71,300,51],[321,72,298,56],[322,0,301,8,"extrapolate"],[322,12,301,8,"extrapolate"],[322,23,301,19],[322,25,301,21],[323,0,298,56],[323,11,298,34],[323,12,298,6],[324,0,303,6,"containerStyles"],[324,10,303,6,"containerStyles"],[324,25,303,21],[324,28,303,24],[325,0,304,8,"transform"],[325,12,304,8,"transform"],[325,21,304,17],[325,23,304,19],[325,24,304,20],[326,0,304,22,"translateX"],[326,14,304,22,"translateX"],[326,24,304,32],[326,26,304,34,"containerTranslateX"],[327,0,304,20],[327,13,304,19],[328,0,303,24],[328,11,303,6],[329,0,306,5],[331,0,308,4],[331,12,308,8,"drawerTranslateX"],[331,28,308,24],[331,31,308,27],[331,32,308,4],[333,0,309,4],[333,12,309,8,"drawerSlide"],[333,23,309,4],[333,25,309,21],[334,0,310,6],[334,14,310,12,"closedDrawerOffset"],[334,32,310,30],[334,35,310,33,"fromLeft"],[334,43,310,41],[334,46,310,44],[334,47,310,45,"drawerWidth"],[334,58,310,41],[334,61,310,59,"drawerWidth"],[334,72,310,6],[335,0,311,6,"drawerTranslateX"],[335,10,311,6,"drawerTranslateX"],[335,26,311,22],[335,29,311,25,"openValue"],[335,38,311,34],[335,39,311,35,"interpolate"],[335,50,311,25],[335,51,311,47],[336,0,312,8,"inputRange"],[336,12,312,8,"inputRange"],[336,22,312,18],[336,24,312,20],[336,25,312,21],[336,26,312,20],[336,28,312,24],[336,29,312,20],[336,30,311,47],[337,0,313,8,"outputRange"],[337,12,313,8,"outputRange"],[337,23,313,19],[337,25,313,21],[337,26,313,22,"closedDrawerOffset"],[337,44,313,21],[337,46,313,42],[337,47,313,21],[337,48,311,47],[338,0,314,8,"extrapolate"],[338,12,314,8,"extrapolate"],[338,23,314,19],[338,25,314,21],[339,0,311,47],[339,11,311,25],[339,12,311,6],[340,0,316,5],[342,0,317,4],[342,12,317,10,"drawerStyles"],[342,24,317,22],[342,27,317,25],[343,0,318,6,"transform"],[343,10,318,6,"transform"],[343,19,318,15],[343,21,318,17],[343,22,318,18],[344,0,318,20,"translateX"],[344,12,318,20,"translateX"],[344,22,318,30],[344,24,318,32,"drawerTranslateX"],[345,0,318,18],[345,11,318,17],[345,12,317,25],[346,0,319,6,"flexDirection"],[346,10,319,6,"flexDirection"],[346,23,319,19],[346,25,319,21],[346,26,319,22,"I18nManager"],[346,51,319,34,"isRTL"],[346,56,319,22],[346,59,319,42],[346,60,319,43,"fromLeft"],[346,68,319,22],[346,71,319,54,"fromLeft"],[346,79,319,21],[346,83,319,66],[346,88,319,21],[346,91,319,74],[347,0,317,25],[347,9,317,4],[348,0,322,4],[348,15,322,11],[348,44,322,12],[348,65,322,11],[348,66,322,21],[348,70,322,11],[349,0,322,26],[349,10,322,26],[349,15,322,31],[349,17,322,33,"styles"],[349,23,322,39],[349,24,322,40,"main"],[349,28,322,11],[350,0,322,46],[350,10,322,46],[350,18,322,54],[350,20,322,56],[350,26,322,61,"_handleContainerLayout"],[350,48,322,11],[351,0,322,11],[352,0,322,11],[353,0,322,11],[354,0,322,11],[355,0,322,11],[355,11,323,8],[355,40,323,9],[355,61,323,8],[355,62,323,18],[355,66,323,8],[356,0,323,23],[356,10,323,23],[356,15,323,28],[356,17,323,30],[356,18,323,31,"drawerType"],[356,28,323,41],[356,33,323,46],[356,40,323,31],[356,43,323,56,"styles"],[356,49,323,62],[356,50,323,63,"containerOnBack"],[356,65,323,31],[356,68,323,81,"styles"],[356,74,323,87],[356,75,323,88,"containerInFront"],[356,91,323,30],[356,93,323,106,"containerStyles"],[356,108,323,30],[356,110,323,123,"contentContainerStyle"],[356,131,323,30],[356,132,323,8],[357,0,323,8],[358,0,323,8],[359,0,323,8],[360,0,323,8],[361,0,323,8],[361,11,324,11],[361,18,324,18],[361,24,324,23,"props"],[361,29,324,18],[361,30,324,29,"children"],[361,38,324,11],[361,43,324,42],[361,53,324,11],[361,56,324,55],[361,62,324,60,"props"],[361,67,324,55],[361,68,324,66,"children"],[361,76,324,55],[361,77,324,75],[361,83,324,80,"_openValue"],[361,93,324,55],[361,94,324,11],[361,97,324,94],[361,103,324,99,"props"],[361,108,324,94],[361,109,324,105,"children"],[361,117,323,8],[361,119,325,11],[361,125,325,16,"_renderOverlay"],[361,139,325,11],[361,141,323,8],[361,142,322,11],[361,144,327,8],[361,173,327,9],[361,194,327,8],[361,195,327,18],[361,199,327,8],[362,0,327,23],[362,10,327,23],[362,23,327,36],[362,25,327,37],[362,35,327,8],[363,0,327,48],[363,10,327,48],[363,34,327,72],[363,36,327,74,"drawerShown"],[363,47,327,8],[364,0,327,87],[364,10,327,87],[364,15,327,92],[364,17,327,94],[364,18,327,95,"styles"],[364,24,327,101],[364,25,327,102,"drawerContainer"],[364,40,327,94],[364,42,327,119,"drawerStyles"],[364,54,327,94],[364,55,327,8],[365,0,327,8],[366,0,327,8],[367,0,327,8],[368,0,327,8],[369,0,327,8],[369,11,328,10],[369,40,328,11],[369,57,328,10],[370,0,328,16],[370,10,328,16],[370,15,328,21],[370,17,328,23],[370,18,328,24,"styles"],[370,24,328,30],[370,25,328,31,"drawer"],[370,31,328,23],[370,33,328,39,"dynamicDrawerStyles"],[370,52,328,23],[370,53,328,10],[371,0,328,10],[372,0,328,10],[373,0,328,10],[374,0,328,10],[375,0,328,10],[375,11,329,13],[375,17,329,18,"props"],[375,22,329,13],[375,23,329,24,"renderNavigationView"],[375,43,329,13],[375,44,329,45],[375,50,329,50,"_openValue"],[375,60,329,13],[375,61,328,10],[375,62,327,8],[375,63,322,11],[375,64,322,4],[376,0,333,3],[376,7,45,30],[378,0,48,4],[378,10,48,10,"dragX"],[378,16,48,15],[378,19,48,18],[378,23,48,22,"Animated"],[378,45,48,31,"Value"],[378,50,48,18],[378,51,48,37],[378,52,48,18],[378,53,48,4],[380,0,49,4],[380,10,49,10,"touchX"],[380,17,49,16],[380,20,49,19],[380,24,49,23,"Animated"],[380,46,49,32,"Value"],[380,51,49,19],[380,52,49,38],[380,53,49,19],[380,54,49,4],[382,0,50,4],[382,10,50,10,"drawerTranslation"],[382,28,50,27],[382,31,50,30],[382,35,50,34,"Animated"],[382,57,50,43,"Value"],[382,62,50,30],[382,63,50,49],[382,64,50,30],[382,65,50,4],[384,0,52,4],[384,12,52,9,"state"],[384,17,52,4],[384,20,52,17],[385,0,53,6,"dragX"],[385,8,53,6,"dragX"],[385,13,53,11],[385,15,53,6,"dragX"],[385,21,52,17],[386,0,54,6,"touchX"],[386,8,54,6,"touchX"],[386,14,54,12],[386,16,54,6,"touchX"],[386,23,52,17],[387,0,55,6,"drawerTranslation"],[387,8,55,6,"drawerTranslation"],[387,25,55,23],[387,27,55,6,"drawerTranslation"],[387,45,52,17],[388,0,56,6,"drawerShown"],[388,8,56,6,"drawerShown"],[388,19,56,17],[388,21,56,19],[388,26,52,17],[389,0,57,6,"containerWidth"],[389,8,57,6,"containerWidth"],[389,22,57,20],[389,24,57,22],[390,0,52,17],[390,7,52,4],[392,0,60,4],[392,12,60,9,"_updateAnimatedEvent"],[392,32,60,4],[392,33,60,30,"props"],[392,39,60,4],[392,41,60,37],[392,47,60,42,"state"],[392,52,60,4],[394,0,45,30],[395,0,61,3],[399,42,63,22,"props"],[399,47],[399,49,63,29,"state"],[399,54],[399,56,63,36],[400,0,64,4],[400,12,64,8],[400,17,64,13,"props"],[400,22,64,8],[400,23,64,19,"drawerPosition"],[400,37,64,8],[400,42,64,38,"props"],[400,47,64,43],[400,48,64,44,"drawerPosition"],[400,62,64,8],[400,66,64,62],[400,71,64,67,"props"],[400,76,64,62],[400,77,64,73,"drawerWidth"],[400,88,64,62],[400,93,64,89,"props"],[400,98,64,94],[400,99,64,95,"drawerWidth"],[400,110,64,8],[400,114,64,110],[400,119,64,115,"props"],[400,124,64,110],[400,125,64,121,"drawerType"],[400,135,64,110],[400,140,64,136,"props"],[400,145,64,141],[400,146,64,142,"drawerType"],[400,156,64,8],[400,160,64,156],[400,165,64,161,"state"],[400,170,64,156],[400,171,64,167,"containerWidth"],[400,185,64,156],[400,190,64,186,"state"],[400,195,64,191],[400,196,64,192,"containerWidth"],[400,210,64,4],[400,212,64,208],[401,0,65,6],[401,15,65,11,"_updateAnimatedEvent"],[401,35,65,6],[401,36,65,32,"props"],[401,41,65,6],[401,43,65,39,"state"],[401,48,65,6],[402,0,66,5],[403,0,67,3],[406,31,335,11],[407,0,335,11],[407,27,336,44],[407,32,336,49,"state"],[407,37,335,11],[408,0,335,11],[408,12,336,12,"drawerShown"],[408,23,335,11],[408,39,336,12,"drawerShown"],[408,50,335,11],[409,0,335,11],[409,12,336,25,"containerWidth"],[409,26,335,11],[409,42,336,25,"containerWidth"],[409,56,335,11],[410,0,335,11],[410,27,344,8],[410,32,344,13,"props"],[410,37,335,11],[411,0,335,11],[411,12,339,6,"drawerPosition"],[411,26,335,11],[411,42,339,6,"drawerPosition"],[411,56,335,11],[412,0,335,11],[412,12,340,6,"drawerType"],[412,22,335,11],[412,38,340,6,"drawerType"],[412,48,335,11],[413,0,335,11],[413,12,341,6,"drawerLockMode"],[413,26,335,11],[413,42,341,6,"drawerLockMode"],[413,56,335,11],[414,0,335,11],[414,12,342,6,"edgeWidth"],[414,21,335,11],[414,37,342,6,"edgeWidth"],[414,46,335,11],[415,0,335,11],[415,12,343,6,"minSwipeDistance"],[415,28,335,11],[415,44,343,6,"minSwipeDistance"],[415,60,335,11],[416,0,346,4],[416,12,346,10,"fromLeft"],[416,20,346,18],[416,23,346,21,"drawerPosition"],[416,37,346,35],[416,42,346,40],[416,48,346,4],[417,0,351,4],[417,12,351,10,"gestureOrientation"],[417,30,351,28],[417,33,351,31],[417,34,351,32,"fromLeft"],[417,42,351,40],[417,45,351,43],[417,46,351,40],[417,49,351,47],[417,50,351,48],[417,51,351,31],[417,56,351,54,"drawerShown"],[417,67,351,65],[417,70,351,68],[417,71,351,69],[417,72,351,65],[417,75,351,73],[417,76,351,31],[417,77,351,4],[418,0,356,4],[418,12,356,10,"hitSlop"],[418,19,356,17],[418,22,356,20,"fromLeft"],[418,30,356,28],[418,33,356,31],[419,0,356,33,"right"],[419,10,356,33,"right"],[419,15,356,38],[419,17,356,40,"drawerShown"],[419,28,356,51],[419,31,356,54],[419,32,356,51],[419,35,356,58,"edgeWidth"],[419,44,356,67],[419,47,356,70,"containerWidth"],[420,0,356,31],[420,9,356,28],[420,12,356,89],[421,0,356,91,"left"],[421,10,356,91,"left"],[421,14,356,95],[421,16,356,97,"drawerShown"],[421,27,356,108],[421,30,356,111],[421,31,356,108],[421,34,356,115,"edgeWidth"],[421,43,356,124],[421,46,356,127,"containerWidth"],[422,0,356,89],[422,9,356,4],[423,0,358,4],[423,15,358,11],[423,44,358,12],[423,88,358,11],[424,0,358,30],[424,10,358,30],[424,17,358,37],[424,19,358,39,"hitSlop"],[424,26,358,11],[425,0,358,48],[425,10,358,48],[425,20,358,58],[425,22,358,60,"gestureOrientation"],[425,40,358,78],[425,43,358,81,"minSwipeDistance"],[425,59,358,11],[426,0,358,99],[426,10,358,99],[426,19,358,108],[426,21,358,110],[426,23,358,11],[427,0,358,114],[427,10,358,114],[427,24,358,128],[427,26,358,130],[427,31,358,135,"_onGestureEvent"],[427,46,358,11],[428,0,358,152],[428,10,358,152],[428,17,358,159],[428,19,358,161,"drawerLockMode"],[428,33,358,175],[428,38,358,180],[428,53,358,161],[428,57,358,199,"drawerLockMode"],[428,71,358,213],[428,76,358,218],[428,89,358,11],[429,0,358,233],[429,10,358,233],[429,30,358,253],[429,32,358,255],[429,37,358,260,"_openingHandlerStateChange"],[429,63,358,11],[430,0,358,288],[430,10,358,288],[430,13,358,291],[430,15,358,293],[430,20,358,298,"props"],[430,25,358,293],[430,26,358,304,"gestureRef"],[430,36,358,11],[431,0,358,11],[432,0,358,11],[433,0,358,11],[434,0,358,11],[435,0,358,11],[435,11,359,9],[435,16,359,14,"_renderDrawer"],[435,29,359,9],[435,31,358,11],[435,32,358,4],[436,0,361,3],[440,4,27,42,"Component"],[440,20],[440,30,28,9,"defaultProps"],[440,42],[440,45,28,24],[441,0,29,4,"drawerWidth"],[441,4,29,4,"drawerWidth"],[441,15,29,15],[441,17,29,17],[441,20,28,24],[442,0,30,4,"drawerPosition"],[442,4,30,4,"drawerPosition"],[442,18,30,18],[442,20,30,20],[442,26,28,24],[443,0,31,4,"useNativeAnimations"],[443,4,31,4,"useNativeAnimations"],[443,23,31,23],[443,25,31,25],[443,29,28,24],[444,0,32,4,"drawerType"],[444,4,32,4,"drawerType"],[444,14,32,14],[444,16,32,16],[444,23,28,24],[445,0,33,4,"edgeWidth"],[445,4,33,4,"edgeWidth"],[445,13,33,13],[445,15,33,15],[445,17,28,24],[446,0,34,4,"minSwipeDistance"],[446,4,34,4,"minSwipeDistance"],[446,20,34,20],[446,22,34,22],[446,23,28,24],[447,0,35,4,"overlayColor"],[447,4,35,4,"overlayColor"],[447,16,35,16],[447,18,35,18],[447,25,28,24],[448,0,36,4,"drawerLockMode"],[448,4,36,4,"drawerLockMode"],[448,18,36,18],[448,20,36,20],[449,0,28,24],[449,3],[449,12,39,9,"positions"],[449,21],[449,24,39,21],[450,0,40,4,"Left"],[450,4,40,4,"Left"],[450,8,40,8],[450,10,40,10],[450,16,39,21],[451,0,41,4,"Right"],[451,4,41,4,"Right"],[451,9,41,9],[451,11,41,11],[452,0,39,21],[452,3],[457,0,364,0],[457,6,364,6,"styles"],[457,12,364,12],[457,15,364,15,"StyleSheet"],[457,39,364,26,"create"],[457,45,364,15],[457,46,364,33],[458,0,365,2,"drawer"],[458,4,365,2,"drawer"],[458,10,365,8],[458,12,365,10],[459,0,365,12,"flex"],[459,6,365,12,"flex"],[459,10,365,16],[459,12,365,18],[460,0,365,10],[460,5,364,33],[461,0,366,2,"drawerContainer"],[461,4,366,2,"drawerContainer"],[461,19,366,17],[461,39,367,7,"StyleSheet"],[461,63,367,18,"absoluteFillObject"],[461,81,366,17],[462,0,368,4,"zIndex"],[462,6,368,4,"zIndex"],[462,12,368,10],[462,14,368,12],[462,18,366,17],[463,0,369,4,"flexDirection"],[463,6,369,4,"flexDirection"],[463,19,369,17],[463,21,369,19],[464,0,366,17],[464,6,364,33],[465,0,371,2,"containerInFront"],[465,4,371,2,"containerInFront"],[465,20,371,18],[465,40,372,7,"StyleSheet"],[465,64,372,18,"absoluteFillObject"],[465,82,371,18],[466,0,373,4,"zIndex"],[466,6,373,4,"zIndex"],[466,12,373,10],[466,14,373,12],[467,0,371,18],[467,6,364,33],[468,0,375,2,"containerOnBack"],[468,4,375,2,"containerOnBack"],[468,19,375,17],[468,39,376,7,"StyleSheet"],[468,63,376,18,"absoluteFillObject"],[468,81,375,17],[468,82,364,33],[469,0,378,2,"main"],[469,4,378,2,"main"],[469,8,378,6],[469,10,378,8],[470,0,379,4,"flex"],[470,6,379,4,"flex"],[470,10,379,8],[470,12,379,10],[470,13,378,8],[471,0,380,4,"zIndex"],[471,6,380,4,"zIndex"],[471,12,380,10],[471,14,380,12],[471,15,378,8],[472,0,381,4,"overflow"],[472,6,381,4,"overflow"],[472,14,381,12],[472,16,381,14],[473,0,378,8],[473,5,364,33],[474,0,383,2,"overlay"],[474,4,383,2,"overlay"],[474,11,383,9],[474,31,384,7,"StyleSheet"],[474,55,384,18,"absoluteFillObject"],[474,73,383,9],[475,0,385,4,"zIndex"],[475,6,385,4,"zIndex"],[475,12,385,10],[475,14,385,12],[476,0,383,9],[477,0,364,33],[477,3,364,15],[477,4,364,0]]},"type":"js/module"}]}