{"dependencies":[{"name":"react","data":{"isAsync":false}},{"name":"./../react-transform-hmr/lib/index.js","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"react-native/Libraries/Animated/src/AnimatedEvent","data":{"isAsync":false}},{"name":"react-native-gesture-handler","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../react-transform-hmr/lib/index.js\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[2], \"react-native\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n\n  var _AnimatedEvent = _$$_REQUIRE(_dependencyMap[4], \"react-native/Libraries/Animated/src/AnimatedEvent\");\n\n  var _reactNativeGestureHandler = _$$_REQUIRE(_dependencyMap[5], \"react-native-gesture-handler\");\n\n  var _class,\n      _temp,\n      _jsxFileName = \"/home/alex/Documentos/CursoReactNative/node_modules/react-native-gesture-handler/DrawerLayout.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var _components = {\n    DrawerLayout: {\n      displayName: \"DrawerLayout\"\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/home/alex/Documentos/CursoReactNative/node_modules/react-native-gesture-handler/DrawerLayout.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var DRAG_TOSS = 0.05;\n  var IDLE = 'Idle';\n  var DRAGGING = 'Dragging';\n  var SETTLING = 'Settling';\n\n  var DrawerLayout = _wrapComponent(\"DrawerLayout\")((_temp = _class = function (_Component) {\n    _inherits(DrawerLayout, _Component);\n\n    function DrawerLayout(_props, context) {\n      var _this;\n\n      _classCallCheck(this, DrawerLayout);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawerLayout).call(this, _props, context));\n\n      _this._updateAnimatedEvent = function (props, state) {\n        var drawerPosition = props.drawerPosition,\n            drawerWidth = props.drawerWidth,\n            drawerType = props.drawerType;\n        var dragXValue = state.dragX,\n            touchXValue = state.touchX,\n            drawerTranslation = state.drawerTranslation,\n            containerWidth = state.containerWidth;\n        var dragX = dragXValue;\n        var touchX = touchXValue;\n\n        if (drawerPosition !== 'left') {\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        }\n\n        var translationX = dragX;\n\n        if (drawerType === 'front') {\n          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n\n          var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n        }\n\n        _this._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        _this._onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], {\n          useNativeDriver: props.useNativeAnimations\n        });\n      };\n\n      _this._handleContainerLayout = function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n\n        _this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      };\n\n      _this._emitStateChanged = function (newState, drawerWillShow) {\n        _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);\n      };\n\n      _this._openingHandlerStateChange = function (_ref2) {\n        var nativeEvent = _ref2.nativeEvent;\n\n        if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {\n          _this._handleRelease(nativeEvent);\n        } else if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {\n          _this._emitStateChanged(DRAGGING, false);\n\n          if (_this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n\n          if (_this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n          }\n        }\n      };\n\n      _this._onTapHandlerStateChange = function (_ref3) {\n        var nativeEvent = _ref3.nativeEvent;\n\n        if (_this.state.drawerShown && nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {\n          _this.closeDrawer();\n        }\n      };\n\n      _this._handleRelease = function (nativeEvent) {\n        var _this$props = _this.props,\n            drawerWidth = _this$props.drawerWidth,\n            drawerPosition = _this$props.drawerPosition,\n            drawerType = _this$props.drawerType;\n        var _this$state = _this.state,\n            drawerShown = _this$state.drawerShown,\n            containerWidth = _this$state.containerWidth;\n        var dragX = nativeEvent.translationX,\n            velocityX = nativeEvent.velocityX,\n            touchX = nativeEvent.x;\n\n        if (drawerPosition !== 'left') {\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n\n        var gestureStartX = touchX - dragX;\n        var dragOffsetBasedOnStart = 0;\n\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n\n        var startOffsetX = dragX + dragOffsetBasedOnStart + (drawerShown ? drawerWidth : 0);\n        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        var shouldOpen = projOffsetX > drawerWidth / 2;\n\n        if (shouldOpen) {\n          _this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          _this._animateDrawer(startOffsetX, 0, velocityX);\n        }\n      };\n\n      _this._animateDrawer = function (fromValue, toValue, velocity) {\n        _this.state.dragX.setValue(0);\n\n        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n        if (fromValue !== undefined) {\n          _this.state.drawerTranslation.setValue(fromValue);\n        }\n\n        var willShow = toValue !== 0;\n\n        _this.setState({\n          drawerShown: willShow\n        });\n\n        _this._emitStateChanged(SETTLING, willShow);\n\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n        }\n\n        _reactNative.Animated.spring(_this.state.drawerTranslation, {\n          velocity: velocity,\n          bounciness: 0,\n          toValue: toValue,\n          useNativeDriver: _this.props.useNativeAnimations\n        }).start(function (_ref4) {\n          var finished = _ref4.finished;\n\n          if (finished) {\n            _this._emitStateChanged(IDLE, willShow);\n\n            if (willShow) {\n              _this.props.onDrawerOpen && _this.props.onDrawerOpen();\n            } else {\n              _this.props.onDrawerClose && _this.props.onDrawerClose();\n            }\n          }\n        });\n      };\n\n      _this.openDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n      };\n\n      _this.closeDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n      };\n\n      _this._renderOverlay = function () {\n        (0, _invariant.default)(_this._openValue, 'should be set');\n\n        var overlayOpacity = _this._openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 0.7],\n          extrapolate: 'clamp'\n        });\n\n        var dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: _this.props.overlayColor\n        };\n        return _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: _this._onTapHandlerStateChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321\n          }\n        }, _react.default.createElement(_reactNative.Animated.View, {\n          pointerEvents: _this.state.drawerShown ? 'auto' : 'none',\n          style: [styles.overlay, dynamicOverlayStyles],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          }\n        }));\n      };\n\n      _this._renderDrawer = function () {\n        var drawerShown = _this.state.drawerShown;\n        var _this$props2 = _this.props,\n            drawerBackgroundColor = _this$props2.drawerBackgroundColor,\n            drawerWidth = _this$props2.drawerWidth,\n            drawerPosition = _this$props2.drawerPosition,\n            drawerType = _this$props2.drawerType,\n            contentContainerStyle = _this$props2.contentContainerStyle;\n        var fromLeft = drawerPosition === 'left';\n        var drawerSlide = drawerType !== 'back';\n        var containerSlide = drawerType !== 'front';\n        var dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        var openValue = _this._openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        var containerStyles;\n\n        if (containerSlide) {\n          var containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n\n        var drawerTranslateX = 0;\n\n        if (drawerSlide) {\n          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        }\n\n        var drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: fromLeft ? 'row' : 'row-reverse'\n        };\n        return _react.default.createElement(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: _this._handleContainerLayout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378\n          }\n        }, _react.default.createElement(_reactNative.Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379\n          }\n        }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), _react.default.createElement(_reactNative.Animated.View, {\n          pointerEvents: \"box-none\",\n          accessibilityViewIsModal: drawerShown,\n          style: [styles.drawerContainer, drawerStyles],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: [styles.drawer, dynamicDrawerStyles],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396\n          }\n        }, _this.props.renderNavigationView(_this._openValue))));\n      };\n\n      var _dragX = new _reactNative.Animated.Value(0);\n\n      var _touchX = new _reactNative.Animated.Value(0);\n\n      var _drawerTranslation = new _reactNative.Animated.Value(0);\n\n      _this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        drawerShown: false,\n        containerWidth: 0\n      };\n\n      _this._updateAnimatedEvent(_props, _this.state);\n\n      return _this;\n    }\n\n    _createClass(DrawerLayout, [{\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n          this._updateAnimatedEvent(props, state);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$state2 = this.state,\n            drawerShown = _this$state2.drawerShown,\n            containerWidth = _this$state2.containerWidth;\n        var _this$props3 = this.props,\n            drawerPosition = _this$props3.drawerPosition,\n            drawerType = _this$props3.drawerType,\n            edgeWidth = _this$props3.edgeWidth,\n            minSwipeDistance = _this$props3.minSwipeDistance;\n        var fromLeft = drawerPosition === 'left';\n        var gestureOrientation = (fromLeft ? 1 : -1) * (drawerShown ? -1 : 1);\n        var hitSlop = fromLeft ? {\n          right: drawerShown ? 0 : edgeWidth - containerWidth\n        } : {\n          left: drawerShown ? 0 : edgeWidth - containerWidth\n        };\n        return _react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, {\n          hitSlop: hitSlop,\n          minOffsetX: gestureOrientation * minSwipeDistance,\n          onGestureEvent: this._onGestureEvent,\n          onHandlerStateChange: this._openingHandlerStateChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429\n          }\n        }, this._renderDrawer());\n      }\n    }]);\n\n    return DrawerLayout;\n  }(_react.Component), _class.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'black'\n  }, _class.positions = {\n    Left: 'left',\n    Right: 'right'\n  }, _temp));\n\n  var _default2 = DrawerLayout;\n  exports.default = _default2;\n\n  var styles = _reactNative.StyleSheet.create({\n    drawer: {\n      flex: 0\n    },\n    drawerContainer: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1001,\n      flexDirection: 'row'\n    }),\n    containerInFront: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1002\n    }),\n    containerOnBack: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1000\n    })\n  });\n});","map":[[7,0,11,0],[11,0,12,0],[13,0,13,0],[15,0,14,0],[17,0,16,0],[66,0,22,0],[66,6,22,6,"DRAG_TOSS"],[66,15,22,15],[66,18,22,18],[66,22,22,0],[67,0,24,0],[67,6,24,6,"IDLE"],[67,10,24,10],[67,13,24,13],[67,19,24,0],[68,0,25,0],[68,6,25,6,"DRAGGING"],[68,14,25,14],[68,17,25,17],[68,27,25,0],[69,0,26,0],[69,6,26,6,"SETTLING"],[69,14,26,14],[69,17,26,17],[69,27,26,0],[74,0,88,2],[74,26,88,14,"props"],[74,32,88,2],[74,34,88,31,"context"],[74,41,88,2],[74,43,88,45],[75,0,88,45],[77,0,88,45],[79,0,89,4],[79,88,89,10,"props"],[79,94,89,4],[79,96,89,17,"context"],[79,103,89,4],[81,0,88,45],[81,12,117,2,"_updateAnimatedEvent"],[81,32,88,45],[81,35,117,25],[81,45,117,26,"props"],[81,50,117,25],[81,52,117,43,"state"],[81,57,117,25],[81,59,117,64],[82,0,117,64],[82,12,119,12,"drawerPosition"],[82,26,117,64],[82,29,119,56,"props"],[82,34,117,64],[82,35,119,12,"drawerPosition"],[82,49,117,64],[83,0,117,64],[83,12,119,28,"drawerWidth"],[83,23,117,64],[83,26,119,56,"props"],[83,31,117,64],[83,32,119,28,"drawerWidth"],[83,43,117,64],[84,0,117,64],[84,12,119,41,"drawerType"],[84,22,117,64],[84,25,119,56,"props"],[84,30,117,64],[84,31,119,41,"drawerType"],[84,41,117,64],[85,0,117,64],[85,12,121,13,"dragXValue"],[85,22,117,64],[85,25,125,8,"state"],[85,30,117,64],[85,31,121,6,"dragX"],[85,36,117,64],[86,0,117,64],[86,12,122,14,"touchXValue"],[86,23,117,64],[86,26,125,8,"state"],[86,31,117,64],[86,32,122,6,"touchX"],[86,38,117,64],[87,0,117,64],[87,12,123,6,"drawerTranslation"],[87,29,117,64],[87,32,125,8,"state"],[87,37,117,64],[87,38,123,6,"drawerTranslation"],[87,55,117,64],[88,0,117,64],[88,12,124,6,"containerWidth"],[88,26,117,64],[88,29,125,8,"state"],[88,34,117,64],[88,35,124,6,"containerWidth"],[88,49,117,64],[89,0,127,4],[89,12,127,8,"dragX"],[89,17,127,13],[89,20,127,16,"dragXValue"],[89,30,127,4],[90,0,128,4],[90,12,128,8,"touchX"],[90,18,128,14],[90,21,128,17,"touchXValue"],[90,32,128,4],[92,0,130,4],[92,12,130,8,"drawerPosition"],[92,26,130,22],[92,31,130,27],[92,37,130,4],[92,39,130,35],[93,0,138,6,"dragX"],[93,10,138,6,"dragX"],[93,15,138,11],[93,18,138,14,"Animated"],[93,40,138,23,"multiply"],[93,48,138,14],[93,49,138,32],[93,53,138,36,"Animated"],[93,75,138,45,"Value"],[93,80,138,32],[93,81,138,51],[93,82,138,52],[93,83,138,32],[93,84,138,14],[93,86,138,56,"dragXValue"],[93,96,138,14],[93,97,138,6],[94,0,139,6,"touchX"],[94,10,139,6,"touchX"],[94,16,139,12],[94,19,139,15,"Animated"],[94,41,139,24,"add"],[94,44,139,15],[94,45,140,8],[94,49,140,12,"Animated"],[94,71,140,21,"Value"],[94,76,140,8],[94,77,140,27,"containerWidth"],[94,91,140,8],[94,92,139,15],[94,94,141,8,"Animated"],[94,116,141,17,"multiply"],[94,124,141,8],[94,125,141,26],[94,129,141,30,"Animated"],[94,151,141,39,"Value"],[94,156,141,26],[94,157,141,45],[94,158,141,46],[94,159,141,26],[94,160,141,8],[94,162,141,50,"touchXValue"],[94,173,141,8],[94,174,139,15],[94,175,139,6],[95,0,143,6,"touchXValue"],[95,10,143,6,"touchXValue"],[95,21,143,17],[95,22,143,18,"setValue"],[95,30,143,6],[95,31,143,27,"containerWidth"],[95,45,143,6],[96,0,144,5],[96,9,130,4],[96,15,144,11],[97,0,145,6,"touchXValue"],[97,10,145,6,"touchXValue"],[97,21,145,17],[97,22,145,18,"setValue"],[97,30,145,6],[97,31,145,27],[97,32,145,6],[98,0,146,5],[100,0,172,4],[100,12,172,8,"translationX"],[100,24,172,20],[100,27,172,23,"dragX"],[100,32,172,4],[102,0,173,4],[102,12,173,8,"drawerType"],[102,22,173,18],[102,27,173,23],[102,34,173,4],[102,36,173,32],[103,0,174,6],[103,14,174,12,"startPositionX"],[103,28,174,26],[103,31,174,29,"Animated"],[103,53,174,38,"add"],[103,56,174,29],[103,57,175,8,"touchX"],[103,63,174,29],[103,65,176,8,"Animated"],[103,87,176,17,"multiply"],[103,95,176,8],[103,96,176,26],[103,100,176,30,"Animated"],[103,122,176,39,"Value"],[103,127,176,26],[103,128,176,45],[103,129,176,46],[103,130,176,26],[103,131,176,8],[103,133,176,50,"dragX"],[103,138,176,8],[103,139,174,29],[103,140,174,6],[105,0,179,6],[105,14,179,12,"dragOffsetFromOnStartPosition"],[105,43,179,41],[105,46,179,44,"startPositionX"],[105,60,179,58],[105,61,179,59,"interpolate"],[105,72,179,44],[105,73,179,71],[106,0,180,8,"inputRange"],[106,12,180,8,"inputRange"],[106,22,180,18],[106,24,180,20],[106,25,180,21,"drawerWidth"],[106,36,180,32],[106,39,180,35],[106,40,180,20],[106,42,180,38,"drawerWidth"],[106,53,180,20],[106,55,180,51,"drawerWidth"],[106,66,180,62],[106,69,180,65],[106,70,180,20],[106,71,179,71],[107,0,181,8,"outputRange"],[107,12,181,8,"outputRange"],[107,23,181,19],[107,25,181,21],[107,26,181,22],[107,27,181,21],[107,29,181,25],[107,30,181,21],[107,32,181,28],[107,33,181,21],[108,0,179,71],[108,11,179,44],[108,12,179,6],[109,0,183,6,"translationX"],[109,10,183,6,"translationX"],[109,22,183,18],[109,25,183,21,"Animated"],[109,47,183,30,"add"],[109,50,183,21],[109,51,183,34,"dragX"],[109,56,183,21],[109,58,183,41,"dragOffsetFromOnStartPosition"],[109,87,183,21],[109,88,183,6],[110,0,184,5],[112,0,186,4],[112,14,186,9,"_openValue"],[112,24,186,4],[112,27,186,22,"Animated"],[112,49,186,31,"add"],[112,52,186,22],[112,53,186,35,"translationX"],[112,65,186,22],[112,67,186,49,"drawerTranslation"],[112,84,186,22],[112,86,186,68,"interpolate"],[112,97,186,22],[112,98,187,6],[113,0,188,8,"inputRange"],[113,10,188,8,"inputRange"],[113,20,188,18],[113,22,188,20],[113,23,188,21],[113,24,188,20],[113,26,188,24,"drawerWidth"],[113,37,188,20],[113,38,187,6],[114,0,189,8,"outputRange"],[114,10,189,8,"outputRange"],[114,21,189,19],[114,23,189,21],[114,24,189,22],[114,25,189,21],[114,27,189,25],[114,28,189,21],[114,29,187,6],[115,0,190,8,"extrapolate"],[115,10,190,8,"extrapolate"],[115,21,190,19],[115,23,190,21],[116,0,187,6],[116,9,186,22],[116,10,186,4],[117,0,194,4],[117,14,194,9,"_onGestureEvent"],[117,29,194,4],[117,32,194,27,"Animated"],[117,54,194,36,"event"],[117,59,194,27],[117,60,195,6],[117,61,195,7],[118,0,195,9,"nativeEvent"],[118,10,195,9,"nativeEvent"],[118,21,195,20],[118,23,195,22],[119,0,195,24,"translationX"],[119,12,195,24,"translationX"],[119,24,195,36],[119,26,195,38,"dragXValue"],[119,36,195,22],[120,0,195,50,"x"],[120,12,195,50,"x"],[120,13,195,51],[120,15,195,53,"touchXValue"],[121,0,195,22],[122,0,195,7],[122,9,195,6],[122,10,194,27],[122,12,196,6],[123,0,196,8,"useNativeDriver"],[123,10,196,8,"useNativeDriver"],[123,25,196,23],[123,27,196,25,"props"],[123,32,196,30],[123,33,196,31,"useNativeAnimations"],[124,0,196,6],[124,9,194,27],[124,10,194,4],[125,0,198,3],[125,7,88,45],[127,0,88,45],[127,12,200,2,"_handleContainerLayout"],[127,34,88,45],[127,37,200,27],[127,53,200,48],[128,0,200,48],[128,12,200,30,"nativeEvent"],[128,23,200,48],[128,31,200,30,"nativeEvent"],[128,42,200,48],[130,0,201,4],[130,14,201,9,"setState"],[130,22,201,4],[130,23,201,18],[131,0,201,20,"containerWidth"],[131,10,201,20,"containerWidth"],[131,24,201,34],[131,26,201,36,"nativeEvent"],[131,37,201,47],[131,38,201,48,"layout"],[131,44,201,36],[131,45,201,55,"width"],[132,0,201,18],[132,9,201,4],[133,0,202,3],[133,7,88,45],[135,0,88,45],[135,12,204,2,"_emitStateChanged"],[135,29,88,45],[135,32,204,22],[135,42,204,23,"newState"],[135,50,204,22],[135,52,204,41,"drawerWillShow"],[135,66,204,22],[135,68,204,69],[136,0,205,4],[136,14,205,9,"props"],[136,19,205,4],[136,20,205,15,"onDrawerStateChanged"],[136,40,205,4],[136,44,206,6],[136,50,206,11,"props"],[136,55,206,6],[136,56,206,17,"onDrawerStateChanged"],[136,76,206,6],[136,77,206,38,"newState"],[136,85,206,6],[136,87,206,48,"drawerWillShow"],[136,101,206,6],[136,102,205,4],[137,0,207,3],[137,7,88,45],[139,0,88,45],[139,12,209,2,"_openingHandlerStateChange"],[139,38,88,45],[139,41,209,31],[139,58,209,52],[140,0,209,52],[140,12,209,34,"nativeEvent"],[140,23,209,52],[140,32,209,34,"nativeEvent"],[140,43,209,52],[142,0,210,4],[142,12,210,8,"nativeEvent"],[142,23,210,19],[142,24,210,20,"oldState"],[142,32,210,8],[142,37,210,33,"State"],[142,70,210,39,"ACTIVE"],[142,76,210,4],[142,78,210,47],[143,0,211,6],[143,16,211,11,"_handleRelease"],[143,30,211,6],[143,31,211,26,"nativeEvent"],[143,42,211,6],[144,0,212,5],[144,9,210,4],[144,15,212,11],[144,19,212,15,"nativeEvent"],[144,30,212,26],[144,31,212,27,"state"],[144,36,212,15],[144,41,212,37,"State"],[144,74,212,43,"ACTIVE"],[144,80,212,11],[144,82,212,51],[145,0,213,6],[145,16,213,11,"_emitStateChanged"],[145,33,213,6],[145,34,213,29,"DRAGGING"],[145,42,213,6],[145,44,213,39],[145,49,213,6],[147,0,214,6],[147,14,214,10],[147,20,214,15,"props"],[147,25,214,10],[147,26,214,21,"keyboardDismissMode"],[147,45,214,10],[147,50,214,45],[147,59,214,6],[147,61,214,56],[148,0,215,8,"Keyboard"],[148,34,215,17,"dismiss"],[148,41,215,8],[149,0,216,7],[151,0,217,6],[151,14,217,10],[151,20,217,15,"props"],[151,25,217,10],[151,26,217,21,"hideStatusBar"],[151,39,217,6],[151,41,217,36],[152,0,218,8,"StatusBar"],[152,35,218,18,"setHidden"],[152,44,218,8],[152,45,218,28],[152,49,218,8],[152,51,218,34],[152,57,218,39,"props"],[152,62,218,34],[152,63,218,45,"statusBarAnimation"],[152,81,218,34],[152,85,218,67],[152,92,218,8],[153,0,219,7],[154,0,220,5],[155,0,221,3],[155,7,88,45],[157,0,88,45],[157,12,223,2,"_onTapHandlerStateChange"],[157,36,88,45],[157,39,223,29],[157,56,223,50],[158,0,223,50],[158,12,223,32,"nativeEvent"],[158,23,223,50],[158,32,223,32,"nativeEvent"],[158,43,223,50],[160,0,224,4],[160,12,224,8],[160,18,224,13,"state"],[160,23,224,8],[160,24,224,19,"drawerShown"],[160,35,224,8],[160,39,224,34,"nativeEvent"],[160,50,224,45],[160,51,224,46,"oldState"],[160,59,224,34],[160,64,224,59,"State"],[160,97,224,65,"ACTIVE"],[160,103,224,4],[160,105,224,73],[161,0,225,6],[161,16,225,11,"closeDrawer"],[161,27,225,6],[162,0,226,5],[163,0,227,3],[163,7,88,45],[165,0,88,45],[165,12,229,2,"_handleRelease"],[165,26,88,45],[165,29,229,19],[165,39,229,19,"nativeEvent"],[165,50,229,30],[165,52,229,34],[166,0,229,34],[166,26,230,56],[166,32,230,61,"props"],[166,37,229,34],[167,0,229,34],[167,12,230,12,"drawerWidth"],[167,23,229,34],[167,38,230,12,"drawerWidth"],[167,49,229,34],[168,0,229,34],[168,12,230,25,"drawerPosition"],[168,26,229,34],[168,41,230,25,"drawerPosition"],[168,55,229,34],[169,0,229,34],[169,12,230,41,"drawerType"],[169,22,229,34],[169,37,230,41,"drawerType"],[169,47,229,34],[170,0,229,34],[170,26,231,44],[170,32,231,49,"state"],[170,37,229,34],[171,0,229,34],[171,12,231,12,"drawerShown"],[171,23,229,34],[171,38,231,12,"drawerShown"],[171,49,229,34],[172,0,229,34],[172,12,231,25,"containerWidth"],[172,26,229,34],[172,41,231,25,"containerWidth"],[172,55,229,34],[173,0,229,34],[173,12,232,24,"dragX"],[173,17,229,34],[173,20,232,56,"nativeEvent"],[173,31,229,34],[173,32,232,10,"translationX"],[173,44,229,34],[174,0,229,34],[174,12,232,31,"velocityX"],[174,21,229,34],[174,24,232,56,"nativeEvent"],[174,35,229,34],[174,36,232,31,"velocityX"],[174,45,229,34],[175,0,229,34],[175,12,232,45,"touchX"],[175,18,229,34],[175,21,232,56,"nativeEvent"],[175,32,229,34],[175,33,232,42,"x"],[175,34,229,34],[177,0,234,4],[177,12,234,8,"drawerPosition"],[177,26,234,22],[177,31,234,27],[177,37,234,4],[177,39,234,35],[178,0,237,6,"dragX"],[178,10,237,6,"dragX"],[178,15,237,11],[178,18,237,14],[178,19,237,15,"dragX"],[178,24,237,6],[179,0,238,6,"touchX"],[179,10,238,6,"touchX"],[179,16,238,12],[179,19,238,15,"containerWidth"],[179,33,238,29],[179,36,238,32,"touchX"],[179,42,238,6],[180,0,239,6,"velocityX"],[180,10,239,6,"velocityX"],[180,19,239,15],[180,22,239,18],[180,23,239,19,"velocityX"],[180,32,239,6],[181,0,240,5],[183,0,242,4],[183,12,242,10,"gestureStartX"],[183,25,242,23],[183,28,242,26,"touchX"],[183,34,242,32],[183,37,242,35,"dragX"],[183,42,242,4],[184,0,243,4],[184,12,243,8,"dragOffsetBasedOnStart"],[184,34,243,30],[184,37,243,33],[184,38,243,4],[186,0,245,4],[186,12,245,8,"drawerType"],[186,22,245,18],[186,27,245,23],[186,34,245,4],[186,36,245,32],[187,0,246,6,"dragOffsetBasedOnStart"],[187,10,246,6,"dragOffsetBasedOnStart"],[187,32,246,28],[187,35,247,8,"gestureStartX"],[187,48,247,21],[187,51,247,24,"drawerWidth"],[187,62,247,8],[187,65,247,38,"gestureStartX"],[187,78,247,51],[187,81,247,54,"drawerWidth"],[187,92,247,8],[187,95,247,68],[187,96,246,6],[188,0,248,5],[190,0,250,4],[190,12,250,10,"startOffsetX"],[190,24,250,22],[190,27,251,6,"dragX"],[190,32,251,11],[190,35,251,14,"dragOffsetBasedOnStart"],[190,57,251,6],[190,61,251,40,"drawerShown"],[190,72,251,51],[190,75,251,54,"drawerWidth"],[190,86,251,51],[190,89,251,68],[190,90,251,6],[190,91,250,4],[191,0,252,4],[191,12,252,10,"projOffsetX"],[191,23,252,21],[191,26,252,24,"startOffsetX"],[191,38,252,36],[191,41,252,39,"DRAG_TOSS"],[191,50,252,48],[191,53,252,51,"velocityX"],[191,62,252,4],[192,0,254,4],[192,12,254,10,"shouldOpen"],[192,22,254,20],[192,25,254,23,"projOffsetX"],[192,36,254,34],[192,39,254,37,"drawerWidth"],[192,50,254,48],[192,53,254,51],[192,54,254,4],[194,0,256,4],[194,12,256,8,"shouldOpen"],[194,22,256,4],[194,24,256,20],[195,0,257,6],[195,16,257,11,"_animateDrawer"],[195,30,257,6],[195,31,257,26,"startOffsetX"],[195,43,257,6],[195,45,257,40,"drawerWidth"],[195,56,257,6],[195,58,257,53,"velocityX"],[195,67,257,6],[196,0,258,5],[196,9,256,4],[196,15,258,11],[197,0,259,6],[197,16,259,11,"_animateDrawer"],[197,30,259,6],[197,31,259,26,"startOffsetX"],[197,43,259,6],[197,45,259,40],[197,46,259,6],[197,48,259,43,"velocityX"],[197,57,259,6],[198,0,260,5],[199,0,261,3],[199,7,88,45],[201,0,88,45],[201,12,263,2,"_animateDrawer"],[201,26,88,45],[201,29,263,19],[201,39,263,20,"fromValue"],[201,48,263,19],[201,50,263,40,"toValue"],[201,57,263,19],[201,59,263,57,"velocity"],[201,67,263,19],[201,69,263,78],[202,0,264,4],[202,14,264,9,"state"],[202,19,264,4],[202,20,264,15,"dragX"],[202,25,264,4],[202,26,264,21,"setValue"],[202,34,264,4],[202,35,264,30],[202,36,264,4],[204,0,265,4],[204,14,265,9,"state"],[204,19,265,4],[204,20,265,15,"touchX"],[204,26,265,4],[204,27,265,22,"setValue"],[204,35,265,4],[204,36,266,6],[204,42,266,11,"props"],[204,47,266,6],[204,48,266,17,"drawerPosition"],[204,62,266,6],[204,67,266,36],[204,73,266,6],[204,76,266,45],[204,77,266,6],[204,80,266,49],[204,86,266,54,"state"],[204,91,266,49],[204,92,266,60,"containerWidth"],[204,106,265,4],[206,0,269,4],[206,12,269,8,"fromValue"],[206,21,269,17],[206,26,269,22,"undefined"],[206,35,269,4],[206,37,269,33],[207,0,270,6],[207,16,270,11,"state"],[207,21,270,6],[207,22,270,17,"drawerTranslation"],[207,39,270,6],[207,40,270,35,"setValue"],[207,48,270,6],[207,49,270,44,"fromValue"],[207,58,270,6],[208,0,271,5],[210,0,273,4],[210,12,273,10,"willShow"],[210,20,273,18],[210,23,273,21,"toValue"],[210,30,273,28],[210,35,273,33],[210,36,273,4],[212,0,274,4],[212,14,274,9,"setState"],[212,22,274,4],[212,23,274,18],[213,0,274,20,"drawerShown"],[213,10,274,20,"drawerShown"],[213,21,274,31],[213,23,274,33,"willShow"],[214,0,274,18],[214,9,274,4],[216,0,275,4],[216,14,275,9,"_emitStateChanged"],[216,31,275,4],[216,32,275,27,"SETTLING"],[216,40,275,4],[216,42,275,37,"willShow"],[216,50,275,4],[218,0,276,4],[218,12,276,8],[218,18,276,13,"props"],[218,23,276,8],[218,24,276,19,"hideStatusBar"],[218,37,276,4],[218,39,276,34],[219,0,277,6,"StatusBar"],[219,33,277,16,"setHidden"],[219,42,277,6],[219,43,277,26,"willShow"],[219,51,277,6],[219,53,277,36],[219,59,277,41,"props"],[219,64,277,36],[219,65,277,47,"statusBarAnimation"],[219,83,277,36],[219,87,277,69],[219,94,277,6],[220,0,278,5],[222,0,279,4,"Animated"],[222,30,279,13,"spring"],[222,36,279,4],[222,37,279,20],[222,43,279,25,"state"],[222,48,279,20],[222,49,279,31,"drawerTranslation"],[222,66,279,4],[222,68,279,50],[223,0,280,6,"velocity"],[223,10,280,6,"velocity"],[223,18,280,14],[223,20,280,6,"velocity"],[223,28,279,50],[224,0,281,6,"bounciness"],[224,10,281,6,"bounciness"],[224,20,281,16],[224,22,281,18],[224,23,279,50],[225,0,282,6,"toValue"],[225,10,282,6,"toValue"],[225,17,282,13],[225,19,282,6,"toValue"],[225,26,279,50],[226,0,283,6,"useNativeDriver"],[226,10,283,6,"useNativeDriver"],[226,25,283,21],[226,27,283,23],[226,33,283,28,"props"],[226,38,283,23],[226,39,283,34,"useNativeAnimations"],[227,0,279,50],[227,9,279,4],[227,11,284,7,"start"],[227,16,279,4],[227,17,284,13],[227,34,284,31],[228,0,284,31],[228,14,284,16,"finished"],[228,22,284,31],[228,31,284,16,"finished"],[228,39,284,31],[230,0,285,6],[230,14,285,10,"finished"],[230,22,285,6],[230,24,285,20],[231,0,286,8],[231,18,286,13,"_emitStateChanged"],[231,35,286,8],[231,36,286,31,"IDLE"],[231,40,286,8],[231,42,286,37,"willShow"],[231,50,286,8],[233,0,287,8],[233,16,287,12,"willShow"],[233,24,287,8],[233,26,287,22],[234,0,288,10],[234,20,288,15,"props"],[234,25,288,10],[234,26,288,21,"onDrawerOpen"],[234,38,288,10],[234,42,288,37],[234,48,288,42,"props"],[234,53,288,37],[234,54,288,48,"onDrawerOpen"],[234,66,288,37],[234,68,288,10],[235,0,289,9],[235,13,287,8],[235,19,289,15],[236,0,290,10],[236,20,290,15,"props"],[236,25,290,10],[236,26,290,21,"onDrawerClose"],[236,39,290,10],[236,43,290,38],[236,49,290,43,"props"],[236,54,290,38],[236,55,290,49,"onDrawerClose"],[236,68,290,38],[236,70,290,10],[237,0,291,9],[238,0,292,7],[239,0,293,5],[239,9,279,4],[240,0,294,3],[240,7,88,45],[242,0,88,45],[242,12,296,2,"openDrawer"],[242,22,88,45],[242,25,296,15],[242,37,296,59],[243,0,296,59],[243,12,296,16,"options"],[243,19,296,59],[243,90,296,52],[243,92,296,59],[245,0,297,4],[245,14,297,9,"_animateDrawer"],[245,28,297,4],[245,29,298,6,"undefined"],[245,38,297,4],[245,40,299,6],[245,46,299,11,"props"],[245,51,299,6],[245,52,299,17,"drawerWidth"],[245,63,297,4],[245,65,300,6,"options"],[245,72,300,13],[245,73,300,14,"velocity"],[245,81,300,6],[245,84,300,25,"options"],[245,91,300,32],[245,92,300,33,"velocity"],[245,100,300,6],[245,103,300,44],[245,104,297,4],[246,0,302,3],[246,7,88,45],[248,0,88,45],[248,12,304,2,"closeDrawer"],[248,23,88,45],[248,26,304,16],[248,38,304,60],[249,0,304,60],[249,12,304,17,"options"],[249,19,304,60],[249,90,304,53],[249,92,304,60],[251,0,305,4],[251,14,305,9,"_animateDrawer"],[251,28,305,4],[251,29,305,24,"undefined"],[251,38,305,4],[251,40,305,35],[251,41,305,4],[251,43,305,38,"options"],[251,50,305,45],[251,51,305,46,"velocity"],[251,59,305,38],[251,62,305,57,"options"],[251,69,305,64],[251,70,305,65,"velocity"],[251,78,305,38],[251,81,305,76],[251,82,305,4],[252,0,306,3],[252,7,88,45],[254,0,88,45],[254,12,308,2,"_renderOverlay"],[254,26,88,45],[254,29,308,19],[254,41,308,25],[255,0,310,4],[255,32,310,14],[255,38,310,19,"_openValue"],[255,48,310,4],[255,50,310,31],[255,65,310,4],[257,0,311,4],[257,12,311,10,"overlayOpacity"],[257,26,311,24],[257,29,311,27],[257,35,311,32,"_openValue"],[257,45,311,27],[257,46,311,43,"interpolate"],[257,57,311,27],[257,58,311,55],[258,0,312,6,"inputRange"],[258,10,312,6,"inputRange"],[258,20,312,16],[258,22,312,18],[258,23,312,19],[258,24,312,18],[258,26,312,22],[258,27,312,18],[258,28,311,55],[259,0,313,6,"outputRange"],[259,10,313,6,"outputRange"],[259,21,313,17],[259,23,313,19],[259,24,313,20],[259,25,313,19],[259,27,313,23],[259,30,313,19],[259,31,311,55],[260,0,314,6,"extrapolate"],[260,10,314,6,"extrapolate"],[260,21,314,17],[260,23,314,19],[261,0,311,55],[261,9,311,27],[261,10,311,4],[263,0,316,4],[263,12,316,10,"dynamicOverlayStyles"],[263,32,316,30],[263,35,316,33],[264,0,317,6,"opacity"],[264,10,317,6,"opacity"],[264,17,317,13],[264,19,317,15,"overlayOpacity"],[264,33,316,33],[265,0,318,6,"backgroundColor"],[265,10,318,6,"backgroundColor"],[265,25,318,21],[265,27,318,23],[265,33,318,28,"props"],[265,38,318,23],[265,39,318,34,"overlayColor"],[266,0,316,33],[266,9,316,4],[267,0,320,4],[267,15,321,6],[267,44,321,7],[267,88,321,6],[268,0,321,25],[268,10,321,25],[268,30,321,45],[268,32,321,47],[268,38,321,52,"_onTapHandlerStateChange"],[268,62,321,6],[269,0,321,6],[270,0,321,6],[271,0,321,6],[272,0,321,6],[273,0,321,6],[273,11,322,8],[273,40,322,9],[273,61,322,8],[273,62,322,18],[273,66,322,8],[274,0,323,10],[274,10,323,10],[274,23,323,23],[274,25,323,25],[274,31,323,30,"state"],[274,36,323,25],[274,37,323,36,"drawerShown"],[274,48,323,25],[274,51,323,50],[274,57,323,25],[274,60,323,59],[274,66,322,8],[275,0,324,10],[275,10,324,10],[275,15,324,15],[275,17,324,17],[275,18,324,18,"styles"],[275,24,324,24],[275,25,324,25,"overlay"],[275,32,324,17],[275,34,324,34,"dynamicOverlayStyles"],[275,54,324,17],[275,55,322,8],[276,0,322,8],[277,0,322,8],[278,0,322,8],[279,0,322,8],[280,0,322,8],[280,10,321,6],[280,11,320,4],[281,0,328,3],[281,7,88,45],[283,0,88,45],[283,12,330,2,"_renderDrawer"],[283,25,88,45],[283,28,330,18],[283,40,330,24],[284,0,330,24],[284,12,331,12,"drawerShown"],[284,23,330,24],[284,26,331,28],[284,32,331,33,"state"],[284,37,330,24],[284,38,331,12,"drawerShown"],[284,49,330,24],[285,0,330,24],[285,27,338,8],[285,33,338,13,"props"],[285,38,330,24],[286,0,330,24],[286,12,333,6,"drawerBackgroundColor"],[286,33,330,24],[286,49,333,6,"drawerBackgroundColor"],[286,70,330,24],[287,0,330,24],[287,12,334,6,"drawerWidth"],[287,23,330,24],[287,39,334,6,"drawerWidth"],[287,50,330,24],[288,0,330,24],[288,12,335,6,"drawerPosition"],[288,26,330,24],[288,42,335,6,"drawerPosition"],[288,56,330,24],[289,0,330,24],[289,12,336,6,"drawerType"],[289,22,330,24],[289,38,336,6,"drawerType"],[289,48,330,24],[290,0,330,24],[290,12,337,6,"contentContainerStyle"],[290,33,330,24],[290,49,337,6,"contentContainerStyle"],[290,70,330,24],[291,0,340,4],[291,12,340,10,"fromLeft"],[291,20,340,18],[291,23,340,21,"drawerPosition"],[291,37,340,35],[291,42,340,40],[291,48,340,4],[292,0,341,4],[292,12,341,10,"drawerSlide"],[292,23,341,21],[292,26,341,24,"drawerType"],[292,36,341,34],[292,41,341,39],[292,47,341,4],[293,0,342,4],[293,12,342,10,"containerSlide"],[293,26,342,24],[293,29,342,27,"drawerType"],[293,39,342,37],[293,44,342,42],[293,51,342,4],[294,0,344,4],[294,12,344,10,"dynamicDrawerStyles"],[294,31,344,29],[294,34,344,32],[295,0,345,6,"backgroundColor"],[295,10,345,6,"backgroundColor"],[295,25,345,21],[295,27,345,23,"drawerBackgroundColor"],[295,48,344,32],[296,0,346,6,"width"],[296,10,346,6,"width"],[296,15,346,11],[296,17,346,13,"drawerWidth"],[297,0,344,32],[297,9,344,4],[298,0,348,4],[298,12,348,10,"openValue"],[298,21,348,19],[298,24,348,22],[298,30,348,27,"_openValue"],[298,40,348,4],[299,0,349,4],[299,32,349,14,"openValue"],[299,41,349,4],[299,43,349,25],[299,58,349,4],[300,0,351,4],[300,12,351,8,"containerStyles"],[300,27,351,4],[302,0,352,4],[302,12,352,8,"containerSlide"],[302,26,352,4],[302,28,352,24],[303,0,353,6],[303,14,353,12,"containerTranslateX"],[303,33,353,31],[303,36,353,34,"openValue"],[303,45,353,43],[303,46,353,44,"interpolate"],[303,57,353,34],[303,58,353,56],[304,0,354,8,"inputRange"],[304,12,354,8,"inputRange"],[304,22,354,18],[304,24,354,20],[304,25,354,21],[304,26,354,20],[304,28,354,24],[304,29,354,20],[304,30,353,56],[305,0,355,8,"outputRange"],[305,12,355,8,"outputRange"],[305,23,355,19],[305,25,355,21,"fromLeft"],[305,33,355,29],[305,36,355,32],[305,37,355,33],[305,38,355,32],[305,40,355,36,"drawerWidth"],[305,51,355,32],[305,52,355,29],[305,55,355,51],[305,56,355,52],[305,57,355,51],[305,59,355,55],[305,60,355,56,"drawerWidth"],[305,71,355,51],[305,72,353,56],[306,0,356,8,"extrapolate"],[306,12,356,8,"extrapolate"],[306,23,356,19],[306,25,356,21],[307,0,353,56],[307,11,353,34],[307,12,353,6],[308,0,358,6,"containerStyles"],[308,10,358,6,"containerStyles"],[308,25,358,21],[308,28,358,24],[309,0,359,8,"transform"],[309,12,359,8,"transform"],[309,21,359,17],[309,23,359,19],[309,24,359,20],[310,0,359,22,"translateX"],[310,14,359,22,"translateX"],[310,24,359,32],[310,26,359,34,"containerTranslateX"],[311,0,359,20],[311,13,359,19],[312,0,358,24],[312,11,358,6],[313,0,361,5],[315,0,363,4],[315,12,363,8,"drawerTranslateX"],[315,28,363,24],[315,31,363,27],[315,32,363,4],[317,0,364,4],[317,12,364,8,"drawerSlide"],[317,23,364,4],[317,25,364,21],[318,0,365,6],[318,14,365,12,"closedDrawerOffset"],[318,32,365,30],[318,35,365,33,"fromLeft"],[318,43,365,41],[318,46,365,44],[318,47,365,45,"drawerWidth"],[318,58,365,41],[318,61,365,59,"drawerWidth"],[318,72,365,6],[319,0,366,6,"drawerTranslateX"],[319,10,366,6,"drawerTranslateX"],[319,26,366,22],[319,29,366,25,"openValue"],[319,38,366,34],[319,39,366,35,"interpolate"],[319,50,366,25],[319,51,366,47],[320,0,367,8,"inputRange"],[320,12,367,8,"inputRange"],[320,22,367,18],[320,24,367,20],[320,25,367,21],[320,26,367,20],[320,28,367,24],[320,29,367,20],[320,30,366,47],[321,0,368,8,"outputRange"],[321,12,368,8,"outputRange"],[321,23,368,19],[321,25,368,21],[321,26,368,22,"closedDrawerOffset"],[321,44,368,21],[321,46,368,42],[321,47,368,21],[321,48,366,47],[322,0,369,8,"extrapolate"],[322,12,369,8,"extrapolate"],[322,23,369,19],[322,25,369,21],[323,0,366,47],[323,11,366,25],[323,12,366,6],[324,0,371,5],[326,0,372,4],[326,12,372,10,"drawerStyles"],[326,24,372,22],[326,27,372,25],[327,0,373,6,"transform"],[327,10,373,6,"transform"],[327,19,373,15],[327,21,373,17],[327,22,373,18],[328,0,373,20,"translateX"],[328,12,373,20,"translateX"],[328,22,373,30],[328,24,373,32,"drawerTranslateX"],[329,0,373,18],[329,11,373,17],[329,12,372,25],[330,0,374,6,"flexDirection"],[330,10,374,6,"flexDirection"],[330,23,374,19],[330,25,374,21,"fromLeft"],[330,33,374,29],[330,36,374,32],[330,41,374,29],[330,44,374,40],[331,0,372,25],[331,9,372,4],[332,0,377,4],[332,15,378,6],[332,44,378,7],[332,65,378,6],[332,66,378,16],[332,70,378,6],[333,0,378,21],[333,10,378,21],[333,15,378,26],[333,17,378,28,"styles"],[333,23,378,34],[333,24,378,35,"main"],[333,28,378,6],[334,0,378,41],[334,10,378,41],[334,18,378,49],[334,20,378,51],[334,26,378,56,"_handleContainerLayout"],[334,48,378,6],[335,0,378,6],[336,0,378,6],[337,0,378,6],[338,0,378,6],[339,0,378,6],[339,11,379,8],[339,40,379,9],[339,61,379,8],[339,62,379,18],[339,66,379,8],[340,0,380,10],[340,10,380,10],[340,15,380,15],[340,17,380,17],[340,18,381,12,"drawerType"],[340,28,381,22],[340,33,381,27],[340,40,381,12],[340,43,382,16,"styles"],[340,49,382,22],[340,50,382,23,"containerOnBack"],[340,65,381,12],[340,68,383,16,"styles"],[340,74,383,22],[340,75,383,23,"containerInFront"],[340,91,380,17],[340,93,384,12,"containerStyles"],[340,108,380,17],[340,110,385,12,"contentContainerStyle"],[340,131,380,17],[340,132,379,8],[341,0,379,8],[342,0,379,8],[343,0,379,8],[344,0,379,8],[345,0,379,8],[345,11,387,11],[345,18,387,18],[345,24,387,23,"props"],[345,29,387,18],[345,30,387,29,"children"],[345,38,387,11],[345,43,387,42],[345,53,387,11],[345,56,388,14],[345,62,388,19,"props"],[345,67,388,14],[345,68,388,25,"children"],[345,76,388,14],[345,77,388,34],[345,83,388,39,"_openValue"],[345,93,388,14],[345,94,387,11],[345,97,389,14],[345,103,389,19,"props"],[345,108,389,14],[345,109,389,25,"children"],[345,117,379,8],[345,119,390,11],[345,125,390,16,"_renderOverlay"],[345,139,390,11],[345,141,379,8],[345,142,378,6],[345,144,392,8],[345,173,392,9],[345,194,392,8],[345,195,392,18],[345,199,392,8],[346,0,393,10],[346,10,393,10],[346,23,393,23],[346,25,393,24],[346,35,392,8],[347,0,394,10],[347,10,394,10],[347,34,394,34],[347,36,394,36,"drawerShown"],[347,47,392,8],[348,0,395,10],[348,10,395,10],[348,15,395,15],[348,17,395,17],[348,18,395,18,"styles"],[348,24,395,24],[348,25,395,25,"drawerContainer"],[348,40,395,17],[348,42,395,42,"drawerStyles"],[348,54,395,17],[348,55,392,8],[349,0,392,8],[350,0,392,8],[351,0,392,8],[352,0,392,8],[353,0,392,8],[353,11,396,10],[353,40,396,11],[353,57,396,10],[354,0,396,16],[354,10,396,16],[354,15,396,21],[354,17,396,23],[354,18,396,24,"styles"],[354,24,396,30],[354,25,396,31,"drawer"],[354,31,396,23],[354,33,396,39,"dynamicDrawerStyles"],[354,52,396,23],[354,53,396,10],[355,0,396,10],[356,0,396,10],[357,0,396,10],[358,0,396,10],[359,0,396,10],[359,11,397,13],[359,17,397,18,"props"],[359,22,397,13],[359,23,397,24,"renderNavigationView"],[359,43,397,13],[359,44,397,45],[359,50,397,50,"_openValue"],[359,60,397,13],[359,61,396,10],[359,62,392,8],[359,63,378,6],[359,64,377,4],[360,0,402,3],[360,7,88,45],[362,0,91,4],[362,10,91,10,"dragX"],[362,16,91,15],[362,19,91,18],[362,23,91,22,"Animated"],[362,45,91,31,"Value"],[362,50,91,18],[362,51,91,37],[362,52,91,18],[362,53,91,4],[364,0,92,4],[364,10,92,10,"touchX"],[364,17,92,16],[364,20,92,19],[364,24,92,23,"Animated"],[364,46,92,32,"Value"],[364,51,92,19],[364,52,92,38],[364,53,92,19],[364,54,92,4],[366,0,93,4],[366,10,93,10,"drawerTranslation"],[366,28,93,27],[366,31,93,30],[366,35,93,34,"Animated"],[366,57,93,43,"Value"],[366,62,93,30],[366,63,93,49],[366,64,93,30],[366,65,93,4],[368,0,95,4],[368,12,95,9,"state"],[368,17,95,4],[368,20,95,17],[369,0,96,6,"dragX"],[369,8,96,6,"dragX"],[369,13,96,11],[369,15,96,6,"dragX"],[369,21,95,17],[370,0,97,6,"touchX"],[370,8,97,6,"touchX"],[370,14,97,12],[370,16,97,6,"touchX"],[370,23,95,17],[371,0,98,6,"drawerTranslation"],[371,8,98,6,"drawerTranslation"],[371,25,98,23],[371,27,98,6,"drawerTranslation"],[371,45,95,17],[372,0,99,6,"drawerShown"],[372,8,99,6,"drawerShown"],[372,19,99,17],[372,21,99,19],[372,26,95,17],[373,0,100,6,"containerWidth"],[373,8,100,6,"containerWidth"],[373,22,100,20],[373,24,100,22],[374,0,95,17],[374,7,95,4],[376,0,103,4],[376,12,103,9,"_updateAnimatedEvent"],[376,32,103,4],[376,33,103,30,"props"],[376,39,103,4],[376,41,103,37],[376,47,103,42,"state"],[376,52,103,4],[378,0,88,45],[379,0,104,3],[383,42,106,22,"props"],[383,47],[383,49,106,39,"state"],[383,54],[383,56,106,57],[384,0,107,4],[384,12,108,6],[384,17,108,11,"props"],[384,22,108,6],[384,23,108,17,"drawerPosition"],[384,37,108,6],[384,42,108,36,"props"],[384,47,108,41],[384,48,108,42,"drawerPosition"],[384,62,108,6],[384,66,109,6],[384,71,109,11,"props"],[384,76,109,6],[384,77,109,17,"drawerWidth"],[384,88,109,6],[384,93,109,33,"props"],[384,98,109,38],[384,99,109,39,"drawerWidth"],[384,110,108,6],[384,114,110,6],[384,119,110,11,"props"],[384,124,110,6],[384,125,110,17,"drawerType"],[384,135,110,6],[384,140,110,32,"props"],[384,145,110,37],[384,146,110,38,"drawerType"],[384,156,108,6],[384,160,111,6],[384,165,111,11,"state"],[384,170,111,6],[384,171,111,17,"containerWidth"],[384,185,111,6],[384,190,111,36,"state"],[384,195,111,41],[384,196,111,42,"containerWidth"],[384,210,107,4],[384,212,112,6],[385,0,113,6],[385,15,113,11,"_updateAnimatedEvent"],[385,35,113,6],[385,36,113,32,"props"],[385,41,113,6],[385,43,113,39,"state"],[385,48,113,6],[386,0,114,5],[387,0,115,3],[390,31,404,11],[391,0,404,11],[391,27,405,44],[391,32,405,49,"state"],[391,37,404,11],[392,0,404,11],[392,12,405,12,"drawerShown"],[392,23,404,11],[392,39,405,12,"drawerShown"],[392,50,404,11],[393,0,404,11],[393,12,405,25,"containerWidth"],[393,26,404,11],[393,42,405,25,"containerWidth"],[393,56,404,11],[394,0,404,11],[394,27,412,8],[394,32,412,13,"props"],[394,37,404,11],[395,0,404,11],[395,12,408,6,"drawerPosition"],[395,26,404,11],[395,42,408,6,"drawerPosition"],[395,56,404,11],[396,0,404,11],[396,12,409,6,"drawerType"],[396,22,404,11],[396,38,409,6,"drawerType"],[396,48,404,11],[397,0,404,11],[397,12,410,6,"edgeWidth"],[397,21,404,11],[397,37,410,6,"edgeWidth"],[397,46,404,11],[398,0,404,11],[398,12,411,6,"minSwipeDistance"],[398,28,404,11],[398,44,411,6,"minSwipeDistance"],[398,60,404,11],[399,0,414,4],[399,12,414,10,"fromLeft"],[399,20,414,18],[399,23,414,21,"drawerPosition"],[399,37,414,35],[399,42,414,40],[399,48,414,4],[400,0,419,4],[400,12,419,10,"gestureOrientation"],[400,30,419,28],[400,33,419,31],[400,34,419,32,"fromLeft"],[400,42,419,40],[400,45,419,43],[400,46,419,40],[400,49,419,47],[400,50,419,48],[400,51,419,31],[400,56,419,54,"drawerShown"],[400,67,419,65],[400,70,419,68],[400,71,419,69],[400,72,419,65],[400,75,419,73],[400,76,419,31],[400,77,419,4],[401,0,424,4],[401,12,424,10,"hitSlop"],[401,19,424,17],[401,22,424,20,"fromLeft"],[401,30,424,28],[401,33,425,8],[402,0,425,10,"right"],[402,10,425,10,"right"],[402,15,425,15],[402,17,425,17,"drawerShown"],[402,28,425,28],[402,31,425,31],[402,32,425,28],[402,35,425,35,"edgeWidth"],[402,44,425,44],[402,47,425,47,"containerWidth"],[403,0,425,8],[403,9,424,28],[403,12,426,8],[404,0,426,10,"left"],[404,10,426,10,"left"],[404,14,426,14],[404,16,426,16,"drawerShown"],[404,27,426,27],[404,30,426,30],[404,31,426,27],[404,34,426,34,"edgeWidth"],[404,43,426,43],[404,46,426,46,"containerWidth"],[405,0,426,8],[405,9,424,4],[406,0,428,4],[406,15,429,6],[406,44,429,7],[406,88,429,6],[407,0,430,8],[407,10,430,8],[407,17,430,15],[407,19,430,17,"hitSlop"],[407,26,429,6],[408,0,431,8],[408,10,431,8],[408,20,431,18],[408,22,431,20,"gestureOrientation"],[408,40,431,38],[408,43,431,41,"minSwipeDistance"],[408,59,429,6],[409,0,432,8],[409,10,432,8],[409,24,432,22],[409,26,432,24],[409,31,432,29,"_onGestureEvent"],[409,46,429,6],[410,0,433,8],[410,10,433,8],[410,30,433,28],[410,32,433,30],[410,37,433,35,"_openingHandlerStateChange"],[410,63,429,6],[411,0,429,6],[412,0,429,6],[413,0,429,6],[414,0,429,6],[415,0,429,6],[415,11,434,9],[415,16,434,14,"_renderDrawer"],[415,29,434,9],[415,31,429,6],[415,32,428,4],[416,0,437,3],[420,4,70,42,"Component"],[420,20],[420,30,71,9,"defaultProps"],[420,42],[420,45,71,24],[421,0,72,4,"drawerWidth"],[421,4,72,4,"drawerWidth"],[421,15,72,15],[421,17,72,17],[421,20,71,24],[422,0,73,4,"drawerPosition"],[422,4,73,4,"drawerPosition"],[422,18,73,18],[422,20,73,20],[422,26,71,24],[423,0,74,4,"useNativeAnimations"],[423,4,74,4,"useNativeAnimations"],[423,23,74,23],[423,25,74,25],[423,29,71,24],[424,0,75,4,"drawerType"],[424,4,75,4,"drawerType"],[424,14,75,14],[424,16,75,16],[424,23,71,24],[425,0,76,4,"edgeWidth"],[425,4,76,4,"edgeWidth"],[425,13,76,13],[425,15,76,15],[425,17,71,24],[426,0,77,4,"minSwipeDistance"],[426,4,77,4,"minSwipeDistance"],[426,20,77,20],[426,22,77,22],[426,23,71,24],[427,0,78,4,"overlayColor"],[427,4,78,4,"overlayColor"],[427,16,78,16],[427,18,78,18],[428,0,71,24],[428,3],[428,12,81,9,"positions"],[428,21],[428,24,81,21],[429,0,82,4,"Left"],[429,4,82,4,"Left"],[429,8,82,8],[429,10,82,10],[429,16,81,21],[430,0,83,4,"Right"],[430,4,83,4,"Right"],[430,9,83,9],[430,11,83,11],[431,0,81,21],[431,3],[436,0,440,0],[436,6,440,6,"styles"],[436,12,440,12],[436,15,440,15,"StyleSheet"],[436,39,440,26,"create"],[436,45,440,15],[436,46,440,33],[437,0,441,2,"drawer"],[437,4,441,2,"drawer"],[437,10,441,8],[437,12,441,10],[438,0,441,12,"flex"],[438,6,441,12,"flex"],[438,10,441,16],[438,12,441,18],[439,0,441,10],[439,5,440,33],[440,0,442,2,"drawerContainer"],[440,4,442,2,"drawerContainer"],[440,19,442,17],[440,39,443,7,"StyleSheet"],[440,63,443,18,"absoluteFillObject"],[440,81,442,17],[441,0,444,4,"zIndex"],[441,6,444,4,"zIndex"],[441,12,444,10],[441,14,444,12],[441,18,442,17],[442,0,445,4,"flexDirection"],[442,6,445,4,"flexDirection"],[442,19,445,17],[442,21,445,19],[443,0,442,17],[443,6,440,33],[444,0,447,2,"containerInFront"],[444,4,447,2,"containerInFront"],[444,20,447,18],[444,40,448,7,"StyleSheet"],[444,64,448,18,"absoluteFillObject"],[444,82,447,18],[445,0,449,4,"zIndex"],[445,6,449,4,"zIndex"],[445,12,449,10],[445,14,449,12],[446,0,447,18],[446,6,440,33],[447,0,451,2,"containerOnBack"],[447,4,451,2,"containerOnBack"],[447,19,451,17],[447,39,452,7,"StyleSheet"],[447,63,452,18,"absoluteFillObject"],[447,81,451,17],[447,82,440,33],[448,0,454,2,"main"],[448,4,454,2,"main"],[448,8,454,6],[448,10,454,8],[449,0,455,4,"flex"],[449,6,455,4,"flex"],[449,10,455,8],[449,12,455,10],[449,13,454,8],[450,0,456,4,"zIndex"],[450,6,456,4,"zIndex"],[450,12,456,10],[450,14,456,12],[450,15,454,8],[451,0,457,4,"overflow"],[451,6,457,4,"overflow"],[451,14,457,12],[451,16,457,14],[452,0,454,8],[452,5,440,33],[453,0,459,2,"overlay"],[453,4,459,2,"overlay"],[453,11,459,9],[453,31,460,7,"StyleSheet"],[453,55,460,18,"absoluteFillObject"],[453,73,459,9],[454,0,461,4,"zIndex"],[454,6,461,4,"zIndex"],[454,12,461,10],[454,14,461,12],[455,0,459,9],[456,0,440,33],[456,3,440,15],[456,4,440,0]]},"type":"js/module"}]}