{"dependencies":[{"name":"expo-constants","data":{"isAsync":false}},{"name":"pretty-format","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/parseErrorStack","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/symbolicateStackTrace","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.EXPO_CONSOLE_METHOD_NAME = void 0;\n\n  var _expoConstants = _$$_REQUIRE(_dependencyMap[0], \"expo-constants\");\n\n  var _prettyFormat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"pretty-format\"));\n\n  var _parseErrorStack = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"react-native/Libraries/Core/Devtools/parseErrorStack\"));\n\n  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"react-native/Libraries/Core/Devtools/symbolicateStackTrace\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  var EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n  exports.EXPO_CONSOLE_METHOD_NAME = EXPO_CONSOLE_METHOD_NAME;\n\n  function serializeLogDataAsync(data, level) {\n    var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;\n\n    return regeneratorRuntime.async(function serializeLogDataAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            includesStack = false;\n\n            if (!_stackTraceLogsSupported()) {\n              _context.next = 32;\n              break;\n            }\n\n            if (!_isUnhandledPromiseRejection(data, level)) {\n              _context.next = 11;\n              break;\n            }\n\n            rawStack = data[0];\n            syntheticError = {\n              stack: rawStack\n            };\n            _context.next = 7;\n            return regeneratorRuntime.awrap(_symbolicateErrorAsync(syntheticError));\n\n          case 7:\n            stack = _context.sent;\n\n            if (!stack.length) {\n              serializedValues = _stringifyLogData(data);\n            } else {\n              errorMessage = rawStack.split('\\n')[1];\n              serializedValues = [{\n                message: \"[Unhandled promise rejection: \" + errorMessage + \"]\",\n                stack: _formatStack(stack)\n              }];\n              includesStack = true;\n            }\n\n            _context.next = 30;\n            break;\n\n          case 11:\n            if (!(data.length === 1 && data[0] instanceof Error)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 14;\n            return regeneratorRuntime.awrap(_serializeErrorAsync(data[0]));\n\n          case 14:\n            serializedError = _context.sent;\n            serializedValues = [serializedError];\n            includesStack = serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 19:\n            if (!(level === 'warn' || level === 'error')) {\n              _context.next = 29;\n              break;\n            }\n\n            error = _captureConsoleStackTrace();\n            _errorMessage = _stringifyLogData(data).join(', ');\n            _context.next = 24;\n            return regeneratorRuntime.awrap(_serializeErrorAsync(error, _errorMessage));\n\n          case 24:\n            _serializedError = _context.sent;\n            serializedValues = [_serializedError];\n            includesStack = _serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 29:\n            serializedValues = _stringifyLogData(data);\n\n          case 30:\n            _context.next = 33;\n            break;\n\n          case 32:\n            serializedValues = _stringifyLogData(data);\n\n          case 33:\n            return _context.abrupt(\"return\", {\n              body: _toConsumableArray(serializedValues),\n              includesStack: includesStack\n            });\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _stringifyLogData(data) {\n    return data.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        return (0, _prettyFormat.default)(item);\n      }\n    });\n  }\n\n  function _serializeErrorAsync(error, message) {\n    var stack, formattedStack;\n    return regeneratorRuntime.async(function _serializeErrorAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (message == null) {\n              message = error.message;\n            }\n\n            if (!(!error.stack || !error.stack.length)) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _prettyFormat.default)(error));\n\n          case 3:\n            _context2.next = 5;\n            return regeneratorRuntime.awrap(_symbolicateErrorAsync(error));\n\n          case 5:\n            stack = _context2.sent;\n            formattedStack = _formatStack(stack);\n            return _context2.abrupt(\"return\", {\n              message: message,\n              stack: formattedStack\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _symbolicateErrorAsync(error) {\n    var parsedStack, symbolicatedStack;\n    return regeneratorRuntime.async(function _symbolicateErrorAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parsedStack = (0, _parseErrorStack.default)(error);\n            _context3.prev = 1;\n            _context3.next = 4;\n            return regeneratorRuntime.awrap((0, _symbolicateStackTrace.default)(parsedStack));\n\n          case 4:\n            symbolicatedStack = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](1);\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 10:\n            if (symbolicatedStack) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 12:\n            return _context3.abrupt(\"return\", symbolicatedStack.map(_removeProjectRoot));\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this, [[1, 7]]);\n  }\n\n  function _formatStack(stack) {\n    return stack.map(function (frame) {\n      var line = frame.file + \":\" + frame.lineNumber;\n\n      if (frame.column != null) {\n        line += \":\" + frame.column;\n      }\n\n      line += \" in \" + frame.methodName;\n      return line;\n    }).join('\\n');\n  }\n\n  function _removeProjectRoot(frame) {\n    var filename = frame.file;\n\n    if (filename == null) {\n      return frame;\n    }\n\n    var projectRoot = _getProjectRoot();\n\n    if (projectRoot == null) {\n      return frame;\n    }\n\n    if (filename.startsWith(projectRoot)) {\n      filename = filename.substring(projectRoot.length);\n\n      if (filename[0] === '/' || filename[0] === '\\\\') {\n        filename = filename.substring(1);\n      }\n\n      frame.file = filename;\n    }\n\n    return frame;\n  }\n\n  function _stackTraceLogsSupported() {\n    return !!(__DEV__ && _getProjectRoot());\n  }\n\n  function _isUnhandledPromiseRejection(data, level) {\n    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);\n  }\n\n  function _captureConsoleStackTrace() {\n    try {\n      throw new Error();\n    } catch (error) {\n      var stackLines = error.stack.split('\\n');\n      var consoleMethodIndex = stackLines.findIndex(function (frame) {\n        return frame.includes(EXPO_CONSOLE_METHOD_NAME);\n      });\n\n      if (consoleMethodIndex !== -1) {\n        stackLines = stackLines.slice(consoleMethodIndex + 1);\n        error.stack = stackLines.join('\\n');\n      }\n\n      return error;\n    }\n  }\n\n  function _getProjectRoot() {\n    return _expoConstants.Constants.manifest && _expoConstants.Constants.manifest.developer ? _expoConstants.Constants.manifest.developer.projectRoot : null;\n  }\n\n  var _default = {\n    serializeLogDataAsync: serializeLogDataAsync\n  };\n  exports.default = _default;\n});","map":[[7,0,1,0],[9,0,2,0],[11,0,3,0],[13,0,4,0],[25,0,5,7],[25,6,5,13,"EXPO_CONSOLE_METHOD_NAME"],[25,30,5,37],[25,33,5,40],[25,51,5,7],[28,0,6,0],[28,11,6,15,"serializeLogDataAsync"],[28,32,6,0],[28,33,6,37,"data"],[28,37,6,0],[28,39,6,43,"level"],[28,44,6,0],[29,0,6,0],[31,0,6,0],[32,0,6,0],[33,0,6,0],[34,0,6,0],[35,0,8,8,"includesStack"],[35,12,8,8,"includesStack"],[35,25,6,0],[35,28,8,24],[35,33,6,0],[37,0,6,0],[37,17,9,8,"_stackTraceLogsSupported"],[37,41,9,32],[37,43,6,0],[38,0,6,0],[39,0,6,0],[40,0,6,0],[42,0,6,0],[42,17,10,12,"_isUnhandledPromiseRejection"],[42,45,10,40],[42,46,10,41,"data"],[42,50,10,40],[42,52,10,47,"level"],[42,57,10,40],[42,58,6,0],[43,0,6,0],[44,0,6,0],[45,0,6,0],[47,0,11,16,"rawStack"],[47,12,11,16,"rawStack"],[47,20,6,0],[47,23,11,27,"data"],[47,27,11,31],[47,28,11,32],[47,29,11,31],[47,30,6,0],[48,0,12,16,"syntheticError"],[48,12,12,16,"syntheticError"],[48,26,6,0],[48,29,12,33],[49,0,12,35,"stack"],[49,14,12,35,"stack"],[49,19,12,40],[49,21,12,42,"rawStack"],[50,0,12,33],[50,13,6,0],[51,0,6,0],[52,0,6,0],[52,44,13,30,"_symbolicateErrorAsync"],[52,66,13,52],[52,67,13,53,"syntheticError"],[52,81,13,52],[52,82,6,0],[54,0,6,0],[55,0,13,16,"stack"],[55,12,13,16,"stack"],[55,17,6,0],[57,0,14,12],[57,16,14,16],[57,17,14,17,"stack"],[57,22,14,22],[57,23,14,23,"length"],[57,29,14,12],[57,31,14,31],[58,0,15,16,"serializedValues"],[58,14,15,16,"serializedValues"],[58,30,15,32],[58,33,15,35,"_stringifyLogData"],[58,50,15,52],[58,51,15,53,"data"],[58,55,15,52],[58,56,15,16],[59,0,16,13],[59,13,14,12],[59,19,17,17],[60,0,19,20,"errorMessage"],[60,14,19,20,"errorMessage"],[60,26,17,17],[60,29,19,35,"rawStack"],[60,37,19,43],[60,38,19,44,"split"],[60,43,19,35],[60,44,19,50],[60,48,19,35],[60,50,19,56],[60,51,19,35],[60,52,17,17],[61,0,20,16,"serializedValues"],[61,14,20,16,"serializedValues"],[61,30,20,32],[61,33,20,35],[61,34,21,20],[62,0,22,24,"message"],[62,16,22,24,"message"],[62,23,22,31],[62,60,22,66,"errorMessage"],[62,72,22,31],[62,78,21,20],[63,0,23,24,"stack"],[63,16,23,24,"stack"],[63,21,23,29],[63,23,23,31,"_formatStack"],[63,35,23,43],[63,36,23,44,"stack"],[63,41,23,43],[64,0,21,20],[64,15,20,35],[64,16,20,16],[65,0,26,16,"includesStack"],[65,14,26,16,"includesStack"],[65,27,26,29],[65,30,26,32],[65,34,26,16],[66,0,27,13],[68,0,6,0],[69,0,6,0],[71,0,6,0],[72,0,6,0],[72,18,29,17,"data"],[72,22,29,21],[72,23,29,22,"length"],[72,29,29,17],[72,34,29,33],[72,35,29,17],[72,39,29,38,"data"],[72,43,29,42],[72,44,29,43],[72,45,29,42],[72,46,29,38],[72,58,29,57,"Error"],[72,63,6,0],[73,0,6,0],[74,0,6,0],[75,0,6,0],[77,0,6,0],[78,0,6,0],[78,44,33,40,"_serializeErrorAsync"],[78,64,33,60],[78,65,33,61,"data"],[78,69,33,65],[78,70,33,66],[78,71,33,65],[78,72,33,60],[78,73,6,0],[80,0,6,0],[81,0,33,16,"serializedError"],[81,12,33,16,"serializedError"],[81,27,6,0],[82,0,34,12,"serializedValues"],[82,12,34,12,"serializedValues"],[82,28,34,28],[82,31,34,31],[82,32,34,32,"serializedError"],[82,47,34,31],[82,48,34,12],[83,0,35,12,"includesStack"],[83,12,35,12,"includesStack"],[83,25,35,25],[83,28,35,28,"serializedError"],[83,43,35,43],[83,44,35,44,"hasOwnProperty"],[83,58,35,28],[83,59,35,59],[83,66,35,28],[83,67,35,12],[84,0,6,0],[85,0,6,0],[87,0,6,0],[88,0,6,0],[88,18,37,17,"level"],[88,23,37,22],[88,28,37,27],[88,34,37,17],[88,38,37,37,"level"],[88,43,37,42],[88,48,37,47],[88,55,6,0],[89,0,6,0],[90,0,6,0],[91,0,6,0],[93,0,40,16,"error"],[93,12,40,16,"error"],[93,17,6,0],[93,20,40,24,"_captureConsoleStackTrace"],[93,45,40,49],[93,47,6,0],[94,0,42,16,"errorMessage"],[94,12,42,16,"errorMessage"],[94,25,6,0],[94,28,42,31,"_stringifyLogData"],[94,45,42,48],[94,46,42,49,"data"],[94,50,42,48],[94,51,42,31],[94,52,42,55,"join"],[94,56,42,31],[94,57,42,60],[94,61,42,31],[94,62,6,0],[95,0,6,0],[96,0,6,0],[96,44,43,40,"_serializeErrorAsync"],[96,64,43,60],[96,65,43,61,"error"],[96,70,43,60],[96,72,43,68,"errorMessage"],[96,85,43,60],[96,86,6,0],[98,0,6,0],[99,0,43,16,"serializedError"],[99,12,43,16,"serializedError"],[99,28,6,0],[100,0,44,12,"serializedValues"],[100,12,44,12,"serializedValues"],[100,28,44,28],[100,31,44,31],[100,32,44,32,"serializedError"],[100,48,44,31],[100,49,44,12],[101,0,45,12,"includesStack"],[101,12,45,12,"includesStack"],[101,25,45,25],[101,28,45,28,"serializedError"],[101,44,45,43],[101,45,45,44,"hasOwnProperty"],[101,59,45,28],[101,60,45,59],[101,67,45,28],[101,68,45,12],[102,0,6,0],[103,0,6,0],[105,0,6,0],[106,0,48,12,"serializedValues"],[106,12,48,12,"serializedValues"],[106,28,48,28],[106,31,48,31,"_stringifyLogData"],[106,48,48,48],[106,49,48,49,"data"],[106,53,48,48],[106,54,48,12],[108,0,6,0],[109,0,6,0],[110,0,6,0],[112,0,6,0],[113,0,52,8,"serializedValues"],[113,12,52,8,"serializedValues"],[113,28,52,24],[113,31,52,27,"_stringifyLogData"],[113,48,52,44],[113,49,52,45,"data"],[113,53,52,44],[113,54,52,8],[115,0,6,0],[116,0,6,0],[116,45,54,11],[117,0,55,8,"body"],[117,14,55,8,"body"],[117,18,55,12],[117,39,55,18,"serializedValues"],[117,55,55,12],[117,56,54,11],[118,0,56,8,"includesStack"],[118,14,56,8,"includesStack"],[118,27,56,21],[118,29,56,8,"includesStack"],[119,0,54,11],[119,13,6,0],[121,0,6,0],[122,0,6,0],[123,0,6,0],[124,0,6,0],[125,0,6,0],[126,0,6,0],[127,0,6,0],[129,0,59,0],[129,11,59,9,"_stringifyLogData"],[129,28,59,0],[129,29,59,27,"data"],[129,33,59,0],[129,35,59,33],[130,0,60,4],[130,11,60,11,"data"],[130,15,60,15],[130,16,60,16,"map"],[130,19,60,11],[130,20,60,20],[130,30,60,20,"item"],[130,34,60,24],[130,36,60,28],[131,0,61,8],[131,10,61,12],[131,17,61,19,"item"],[131,21,61,12],[131,26,61,28],[131,34,61,8],[131,36,61,38],[132,0,62,12],[132,15,62,19,"item"],[132,19,62,12],[133,0,63,9],[133,7,61,8],[133,13,64,13],[134,0,65,12],[134,15,65,19],[134,42,65,32,"item"],[134,46,65,19],[134,47,65,12],[135,0,66,9],[136,0,67,5],[136,5,60,11],[136,6,60,4],[137,0,68,1],[139,0,69,0],[139,11,69,15,"_serializeErrorAsync"],[139,31,69,0],[139,32,69,36,"error"],[139,37,69,0],[139,39,69,43,"message"],[139,46,69,0],[140,0,69,0],[141,0,69,0],[142,0,69,0],[143,0,69,0],[144,0,69,0],[145,0,70,4],[145,16,70,8,"message"],[145,23,70,15],[145,27,70,19],[145,31,70,4],[145,33,70,25],[146,0,71,8,"message"],[146,14,71,8,"message"],[146,21,71,15],[146,24,71,18,"error"],[146,29,71,23],[146,30,71,24,"message"],[146,37,71,8],[147,0,72,5],[149,0,69,0],[149,18,73,8],[149,19,73,9,"error"],[149,24,73,14],[149,25,73,15,"stack"],[149,30,73,8],[149,34,73,24],[149,35,73,25,"error"],[149,40,73,30],[149,41,73,31,"stack"],[149,46,73,25],[149,47,73,37,"length"],[149,53,69,0],[150,0,69,0],[151,0,69,0],[152,0,69,0],[154,0,69,0],[154,46,74,15],[154,73,74,28,"error"],[154,78,74,15],[154,79,69,0],[156,0,69,0],[157,0,69,0],[158,0,69,0],[158,44,76,22,"_symbolicateErrorAsync"],[158,66,76,44],[158,67,76,45,"error"],[158,72,76,44],[158,73,69,0],[160,0,69,0],[161,0,76,8,"stack"],[161,12,76,8,"stack"],[161,17,69,0],[162,0,77,8,"formattedStack"],[162,12,77,8,"formattedStack"],[162,26,69,0],[162,29,77,25,"_formatStack"],[162,41,77,37],[162,42,77,38,"stack"],[162,47,77,37],[162,48,69,0],[163,0,69,0],[163,46,78,11],[164,0,78,13,"message"],[164,14,78,13,"message"],[164,21,78,20],[164,23,78,13,"message"],[164,30,78,11],[165,0,78,22,"stack"],[165,14,78,22,"stack"],[165,19,78,27],[165,21,78,29,"formattedStack"],[166,0,78,11],[166,13,69,0],[168,0,69,0],[169,0,69,0],[170,0,69,0],[171,0,69,0],[172,0,69,0],[173,0,69,0],[174,0,69,0],[176,0,80,0],[176,11,80,15,"_symbolicateErrorAsync"],[176,33,80,0],[176,34,80,38,"error"],[176,39,80,0],[177,0,80,0],[178,0,80,0],[179,0,80,0],[180,0,80,0],[181,0,80,0],[182,0,81,8,"parsedStack"],[182,12,81,8,"parsedStack"],[182,23,80,0],[182,26,81,22],[182,56,81,38,"error"],[182,61,81,22],[182,62,80,0],[183,0,80,0],[184,0,80,0],[185,0,80,0],[185,44,84,34],[185,80,84,56,"parsedStack"],[185,91,84,34],[185,92,80,0],[187,0,80,0],[188,0,84,8,"symbolicatedStack"],[188,12,84,8,"symbolicatedStack"],[188,29,80,0],[189,0,80,0],[190,0,80,0],[192,0,80,0],[193,0,80,0],[194,0,80,0],[195,0,80,0],[195,46,87,15,"parsedStack"],[195,57,80,0],[197,0,80,0],[198,0,80,0],[198,16,90,9,"symbolicatedStack"],[198,33,80,0],[199,0,80,0],[200,0,80,0],[201,0,80,0],[203,0,80,0],[203,46,91,15,"parsedStack"],[203,57,80,0],[205,0,80,0],[206,0,80,0],[206,46,94,11,"symbolicatedStack"],[206,63,94,28],[206,64,94,29,"map"],[206,67,94,11],[206,68,94,33,"_removeProjectRoot"],[206,86,94,11],[206,87,80,0],[208,0,80,0],[209,0,80,0],[210,0,80,0],[211,0,80,0],[212,0,80,0],[213,0,80,0],[214,0,80,0],[216,0,96,0],[216,11,96,9,"_formatStack"],[216,23,96,0],[216,24,96,22,"stack"],[216,29,96,0],[216,31,96,29],[217,0,97,4],[217,11,97,11,"stack"],[217,16,97,16],[217,17,98,9,"map"],[217,20,97,11],[217,21,98,13],[217,31,98,13,"frame"],[217,36,98,18],[217,38,98,22],[218,0,99,8],[218,10,99,12,"line"],[218,14,99,16],[218,17,99,22,"frame"],[218,22,99,27],[218,23,99,28,"file"],[218,27,99,16],[218,36,99,36,"frame"],[218,41,99,41],[218,42,99,42,"lineNumber"],[218,52,99,8],[220,0,100,8],[220,10,100,12,"frame"],[220,15,100,17],[220,16,100,18,"column"],[220,22,100,12],[220,26,100,28],[220,30,100,8],[220,32,100,34],[221,0,101,12,"line"],[221,8,101,12,"line"],[221,12,101,16],[221,22,101,24,"frame"],[221,27,101,29],[221,28,101,30,"column"],[221,34,101,12],[222,0,102,9],[224,0,103,8,"line"],[224,6,103,8,"line"],[224,10,103,12],[224,23,103,23,"frame"],[224,28,103,28],[224,29,103,29,"methodName"],[224,39,103,8],[225,0,104,8],[225,13,104,15,"line"],[225,17,104,8],[226,0,105,5],[226,5,97,11],[226,7,106,9,"join"],[226,11,97,11],[226,12,106,14],[226,16,97,11],[226,17,97,4],[227,0,107,1],[229,0,108,0],[229,11,108,9,"_removeProjectRoot"],[229,29,108,0],[229,30,108,28,"frame"],[229,35,108,0],[229,37,108,35],[230,0,109,4],[230,8,109,8,"filename"],[230,16,109,16],[230,19,109,19,"frame"],[230,24,109,24],[230,25,109,25,"file"],[230,29,109,4],[232,0,110,4],[232,8,110,8,"filename"],[232,16,110,16],[232,20,110,20],[232,24,110,4],[232,26,110,26],[233,0,111,8],[233,13,111,15,"frame"],[233,18,111,8],[234,0,112,5],[236,0,113,4],[236,8,113,8,"projectRoot"],[236,19,113,19],[236,22,113,22,"_getProjectRoot"],[236,37,113,37],[236,39,113,4],[238,0,114,4],[238,8,114,8,"projectRoot"],[238,19,114,19],[238,23,114,23],[238,27,114,4],[238,29,114,29],[239,0,115,8],[239,13,115,15,"frame"],[239,18,115,8],[240,0,116,5],[242,0,117,4],[242,8,117,8,"filename"],[242,16,117,16],[242,17,117,17,"startsWith"],[242,27,117,8],[242,28,117,28,"projectRoot"],[242,39,117,8],[242,40,117,4],[242,42,117,42],[243,0,118,8,"filename"],[243,6,118,8,"filename"],[243,14,118,16],[243,17,118,19,"filename"],[243,25,118,27],[243,26,118,28,"substring"],[243,35,118,19],[243,36,118,38,"projectRoot"],[243,47,118,49],[243,48,118,50,"length"],[243,54,118,19],[243,55,118,8],[245,0,119,8],[245,10,119,12,"filename"],[245,18,119,20],[245,19,119,21],[245,20,119,20],[245,21,119,12],[245,26,119,28],[245,29,119,12],[245,33,119,35,"filename"],[245,41,119,43],[245,42,119,44],[245,43,119,43],[245,44,119,35],[245,49,119,51],[245,53,119,8],[245,55,119,57],[246,0,120,12,"filename"],[246,8,120,12,"filename"],[246,16,120,20],[246,19,120,23,"filename"],[246,27,120,31],[246,28,120,32,"substring"],[246,37,120,23],[246,38,120,42],[246,39,120,23],[246,40,120,12],[247,0,121,9],[249,0,122,8,"frame"],[249,6,122,8,"frame"],[249,11,122,13],[249,12,122,14,"file"],[249,16,122,8],[249,19,122,21,"filename"],[249,27,122,8],[250,0,123,5],[252,0,124,4],[252,11,124,11,"frame"],[252,16,124,4],[253,0,125,1],[255,0,135,0],[255,11,135,9,"_stackTraceLogsSupported"],[255,35,135,0],[255,38,135,36],[256,0,136,4],[256,11,136,11],[256,12,136,12],[256,14,136,14,"__DEV__"],[256,21,136,21],[256,25,136,25,"_getProjectRoot"],[256,40,136,40],[256,42,136,12],[256,43,136,4],[257,0,137,1],[259,0,138,0],[259,11,138,9,"_isUnhandledPromiseRejection"],[259,39,138,0],[259,40,138,38,"data"],[259,44,138,0],[259,46,138,44,"level"],[259,51,138,0],[259,53,138,51],[260,0,139,4],[260,11,139,12,"level"],[260,16,139,17],[260,21,139,22],[260,27,139,12],[260,31,140,8],[260,38,140,15,"data"],[260,42,140,19],[260,43,140,20],[260,44,140,19],[260,45,140,8],[260,50,140,27],[260,58,139,12],[260,62,141,8],[260,102,141,48,"test"],[260,106,141,8],[260,107,141,53,"data"],[260,111,141,57],[260,112,141,58],[260,113,141,57],[260,114,141,8],[260,115,139,4],[261,0,142,1],[263,0,143,0],[263,11,143,9,"_captureConsoleStackTrace"],[263,36,143,0],[263,39,143,37],[264,0,144,4],[264,8,144,8],[265,0,145,8],[265,12,145,14],[265,16,145,18,"Error"],[265,21,145,14],[265,23,145,8],[266,0,146,5],[266,5,144,4],[266,6,147,4],[266,13,147,11,"error"],[266,18,147,4],[266,20,147,18],[267,0,148,8],[267,10,148,12,"stackLines"],[267,20,148,22],[267,23,148,25,"error"],[267,28,148,30],[267,29,148,31,"stack"],[267,34,148,25],[267,35,148,37,"split"],[267,40,148,25],[267,41,148,43],[267,45,148,25],[267,46,148,8],[268,0,149,8],[268,10,149,12,"consoleMethodIndex"],[268,28,149,30],[268,31,149,33,"stackLines"],[268,41,149,43],[268,42,149,44,"findIndex"],[268,51,149,33],[268,52,149,54],[268,62,149,54,"frame"],[268,67,149,59],[269,0,149,59],[269,15,149,63,"frame"],[269,20,149,68],[269,21,149,69,"includes"],[269,29,149,63],[269,30,149,78,"EXPO_CONSOLE_METHOD_NAME"],[269,54,149,63],[269,55,149,59],[270,0,149,59],[270,7,149,33],[270,8,149,8],[272,0,150,8],[272,10,150,12,"consoleMethodIndex"],[272,28,150,30],[272,33,150,35],[272,34,150,36],[272,35,150,8],[272,37,150,39],[273,0,151,12,"stackLines"],[273,8,151,12,"stackLines"],[273,18,151,22],[273,21,151,25,"stackLines"],[273,31,151,35],[273,32,151,36,"slice"],[273,37,151,25],[273,38,151,42,"consoleMethodIndex"],[273,56,151,60],[273,59,151,63],[273,60,151,25],[273,61,151,12],[274,0,152,12,"error"],[274,8,152,12,"error"],[274,13,152,17],[274,14,152,18,"stack"],[274,19,152,12],[274,22,152,26,"stackLines"],[274,32,152,36],[274,33,152,37,"join"],[274,37,152,26],[274,38,152,42],[274,42,152,26],[274,43,152,12],[275,0,153,9],[277,0,154,8],[277,13,154,15,"error"],[277,18,154,8],[278,0,155,5],[279,0,156,1],[281,0,157,0],[281,11,157,9,"_getProjectRoot"],[281,26,157,0],[281,29,157,27],[282,0,158,4],[282,11,158,11,"Constants"],[282,36,158,21,"manifest"],[282,44,158,11],[282,48,158,33,"Constants"],[282,73,158,43,"manifest"],[282,81,158,33],[282,82,158,52,"developer"],[282,91,158,11],[282,94,159,10,"Constants"],[282,119,159,20,"manifest"],[282,127,159,10],[282,128,159,29,"developer"],[282,137,159,10],[282,138,159,39,"projectRoot"],[282,149,158,11],[282,152,160,10],[282,156,158,4],[283,0,161,1],[285,17,162,15],[286,0,163,4,"serializeLogDataAsync"],[286,4,163,4,"serializeLogDataAsync"],[286,25,163,25],[286,27,163,4,"serializeLogDataAsync"],[287,0,162,15],[287,3]]},"type":"js/module"}]}